<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书 on 行行重行行</title>
    <link>http://youngspring1.github.io/categories/%E8%AF%BB%E4%B9%A6/</link>
    <description>Recent content in 读书 on 行行重行行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <lastBuildDate>Fri, 18 Nov 2016 18:40:17 +0800</lastBuildDate>
    <atom:link href="http://youngspring1.github.io/categories/%E8%AF%BB%E4%B9%A6/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>比拼每年读多少书是没有意义的</title>
      <link>http://youngspring1.github.io/post/2016/2016-11-18-books/</link>
      <pubDate>Fri, 18 Nov 2016 18:40:17 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-11-18-books/</guid>
      <description>&lt;p&gt;今年把所有读的书都摞成一叠，看上去还真挺多的。
但是顺着书脊一本一本扫过去，大部分以后大概都不会再翻开了。&lt;/p&gt;

&lt;p&gt;读的大部分书是消遣，这个层次和看电影、吃美食本质上并没有太大的区别。事实上，我是在消费别人创造的内容，并不值得炫耀。自己创造出来的产物，才是更有价值的东西。希望明年可以读更少的书，但是其中让自己愿意再读几遍的书能够更多。&lt;/p&gt;

&lt;p&gt;反正我家也放不下更多的书了。摊手&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/IMG_0269.JPG&#34; alt=&#34;aa&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>无知的游历</title>
      <link>http://youngspring1.github.io/post/2016/2016-11-07-travellor/</link>
      <pubDate>Mon, 07 Nov 2016 19:56:32 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-11-07-travellor/</guid>
      <description>&lt;p&gt;今年读了几本书，是作者在中国生活、游历的记录。&lt;br /&gt;
和两位作者的观点一样，我觉得游历的重点，自然是遇到的人和他们的故事。&lt;br /&gt;
所以以后出去玩要在一个地方待久点，和当地人一起生活，不要匆匆忙忙只做游客。&lt;/p&gt;

&lt;p&gt;PS 不要比读过多少书，要看读过的书中，有多少还愿意再读的。这部分才是真的该买的书。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;彼得•海斯勒 &lt;a href=&#34;https://www.amazon.cn/江城-彼得•海斯勒/dp/B0074E7CVU/ref=sr_1_1?ie=UTF8&amp;amp;qid=1478519919&amp;amp;sr=8-1&amp;amp;keywords=江城&#34;&gt;江城&lt;/a&gt;&lt;br /&gt;
彼得•海斯勒 &lt;a href=&#34;https://www.amazon.cn/寻路中国-从乡村到工厂的自驾之旅-彼得•海斯勒/dp/B004IJO942/ref=sr_1_1?ie=UTF8&amp;amp;qid=1478519980&amp;amp;sr=8-1&amp;amp;keywords=寻路中国&#34;&gt;寻路中国&lt;/a&gt;&lt;br /&gt;
比尔•波特 &lt;a href=&#34;https://www.amazon.cn/dp/B00FCT5Q1W/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;amp;qid=1478520079&amp;amp;sr=8-3&#34;&gt;丝绸之路&lt;/a&gt;&lt;br /&gt;
比尔•波特 &lt;a href=&#34;https://www.amazon.cn/图书/dp/B00MO05IP6/ref=sr_1_1?ie=UTF8&amp;amp;qid=1478520167&amp;amp;sr=8-1&amp;amp;keywords=黄河之旅&#34;&gt;黄河之旅&lt;/a&gt;&lt;br /&gt;
比尔•波特 &lt;a href=&#34;https://www.amazon.cn/禅的行囊-比尔·波特/dp/B00KLUX2LS/ref=sr_1_1?ie=UTF8&amp;amp;qid=1478520254&amp;amp;sr=8-1&amp;amp;keywords=禅的行囊&#34;&gt;禅的行囊&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>有顶天家族 第二代的归来</title>
      <link>http://youngspring1.github.io/post/2016/2016-08-28-utyouten/</link>
      <pubDate>Sun, 28 Aug 2016 09:21:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-08-28-utyouten/</guid>
      <description>

&lt;p&gt;昨天主动断网一天，竟然在逛街＋看电影之后，把去年买的一本小说，半猜半读地看完了。看来断网／关手机／关电脑是第一生产力啊。&lt;br /&gt;
看书的时候，想着故事中的人物，他们逛过的街／乘坐的电车／看到的风景，我也在京都亲历过，这种身临其境的想象，觉得特别奇妙。&lt;br /&gt;
祝早日动漫化，早日出中译版，早日出第三部大结局（大概又要等五年？）&lt;/p&gt;

&lt;h2 id=&#34;没有什么比有趣更重要啊:a84e1d07b2c13580fc6a36f776c57d13&#34;&gt;没有什么比有趣更重要啊，&lt;/h2&gt;

&lt;h2 id=&#34;因为我身上也流淌着傻瓜的血呢:a84e1d07b2c13580fc6a36f776c57d13&#34;&gt;因为我身上也流淌着傻瓜的血呢。&lt;/h2&gt;

&lt;p&gt;没有故事概览，就不能证明我读完了。现在也没有出中文版呢。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第二代的归来&lt;br /&gt;
天狗赤玉老师的儿子（第二代）从英国回来，打扮和生活都是十足的英国绅士，而且不承认自己是天狗。降落的时候散落的行李大部分都找回来，唯独不见了手枪。赤玉老师找第二代决斗，但是他自己一点法力都没有了，儿子都不屑跟他动手。&lt;/li&gt;
&lt;li&gt;南禅寺玉澜&lt;br /&gt;
象棋大会复活。南禅寺玉澜跟下鸭矢二郎对弈，结果作为棋子的矢三郎和金阁银阁引发的骚乱终止了棋局。这之后，玉澜和矢一郎的婚事也浮出水面。他们还发现了父亲的秘密象棋房间，其入口是父亲遗物棋盘的一点，而另外一个入口竟然是赤玉老师的壁橱。&lt;/li&gt;
&lt;li&gt;幻术师天满屋&lt;br /&gt;
矢三郎被幻术师天满屋的幻术骗到了。同时在菖蒲池画伯家，和淀川教授、天满屋吃了顿饭。回家的路上矢三郎又折回去，看到了画伯画的地狱图，天满屋曾经被寿老人流放其间。矢三郎变成恶鬼，找天满屋报被骗之仇，发现手枪在天满屋手里，又败在天满屋手下，幸好弁天及时回国救下矢三郎。&lt;/li&gt;
&lt;li&gt;大文字纳凉船大战&lt;br /&gt;
京都每年8月16日举办&lt;a href=&#34;https://www.kyokanko.or.jp/okuribi/&#34;&gt;五山送火&lt;/a&gt;活动，在周围的山上分别烧出“大”、“妙法”、船形图案、“大”、鸟居图案，真是好想去看呢。不过在下界很难看全五处图案，聪明的狸猫会派出可以飞的船，一家人在天上看。。。前年，下鸭家的飞船“万福丸”被夷川家的烟花炸毁了，去年向弁天借的飞行茶室也坠毁了，于是只能使用矢二郎变的叡山电车＋飞行茶室引擎作为纳凉飞船上天。这次弁天来到电车的屋顶，第二代在夷川家的船上，他们一言不合就撕逼，弁天被打败了。&lt;/li&gt;
&lt;li&gt;有马地狱&lt;br /&gt;
矢三郎去有马温泉找淀川教授，掉入地狱图中，被弁天救了出来。意外发现夷川早云企图加入星期五俱乐部，结果弁天献上飞行茶室引擎，矢三郎加入了星期五俱乐部。因为只有这一个名额，夷川早云气得不行，找寿老人理论。寿老人放出天满屋，天满屋开枪打死夷川早云。&lt;/li&gt;
&lt;li&gt;夷川家的后代
夷川早云的葬礼后，他的大儿子夷川吴一郎回来继承家业，划拨了一个实验室给矢四郎作电气研究。矢二郎服用了外婆的灵药后，能够变为人形，出门旅行。&lt;/li&gt;
&lt;li&gt;天狗的血，傻瓜的血&lt;br /&gt;
又到了选伪右卫门的日子，这次的候选人只有矢一郎一个人，简直是势在必得啊。结果夷川电气白兰地实验室发生爆炸，金阁银阁在现场搜出了手枪，带到了选举现场。矢一郎气得离场，遇到了星期五俱乐部，和寿老人的电车一起，又回到了选举现场。同时回来的，还有矢二郎和真正的吴一郎。假的吴一郎是夷川早云扮的，而且金阁银阁搜到的手枪只是个玩具。夷川早云知道天满屋开枪打海星之后，和天满屋拼命，一起掉进了地狱图。星期五俱乐部今年又没能吃上狸猫火锅。一切都澄清了之后，矢一郎还是被选为伪右卫门，新年过后，和玉澜结婚了。海星还活着。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160828-utyouten-title.jpg&#34; alt=&#34;title&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160828_utyouten-content.jpg&#34; alt=&#34;content&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>乌托邦</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-17-life/</link>
      <pubDate>Fri, 17 Jun 2016 21:22:08 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-17-life/</guid>
      <description>&lt;p&gt;今天早上读到&lt;a href=&#34;http://www.jiemian.com/article/209404.html&#34;&gt;两个乌托邦人&lt;/a&gt;这篇文章，下面这段很有感触。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;赛斯的故事是关于一个人寻找到自己在这世界上的位置。我想起来老舍说，每人在这世间，就像八百尊罗汉，各有各的位置。你实在不能像对桌上的尘土一样，随手拿抹布就把我抹掉了。太平洋也真是座温情的海洋。它允许一个奇葩，这样合理地长大，实现梦想，拥有书、拥有沿海顶楼的好风光、拥有盛满三文鱼的冰箱。这无限孤独又无限美满的人生。

每当我怀疑，我的人生究竟有没有意义的时候，我就会想想赛斯这奇葩。我会诧异如何从一开始每个人想要的都只不过是一个幸福的人生。结果走着走着，就变成了一个“独上高楼、高处不胜寒”的人生，变成了“十年生死两茫茫”的人生，变成了日复一日、年复一年，期待着总有一天能够赢取回报、得偿所愿，然后再终于快乐起来的人生。

我们等下去的时候，他蹦跶着跳进海里捞螃蟹，不知不觉就跑远了。我有些羡慕。

我逐渐发觉心理学以平均值导出关于人性若干结论的好笑之处：人与人之间的差异如此巨大，使得一千个人与一个人的样本，距离真理都同样远。曾有一万人的数据表明勤奋带来成功，再加上三百回研究支持金钱与幸福的钟型曲线关系，可世上奇葩那样多，这些适用于群体的结论就必定不可能与任何一个个体完美匹配。这便是人类群体与小白鼠的区别，而赛斯最早看清。

他让我看到，这样活过一生也OK。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个人非常立体的生活，在不那么熟悉的眼里都被扁平化了。好比看一场比赛的直播，过程惊心动魄，这是亲身体验；而晚间新闻中，却只有几句湖带过，这是别人眼里的我。更加可怕的是，普通人的一生，投影到历史上，简直微不足道。所以，还是把自己的生活过精彩吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>训练专注力</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-15-focus/</link>
      <pubDate>Wed, 15 Jun 2016 20:28:54 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-15-focus/</guid>
      <description>

&lt;h4 id=&#34;1-专注的状态:067ea3473217959ce25f78341d81828e&#34;&gt;1.专注的状态&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;流体验，指的是当人完全专注地投入一项事业中时，可以从中体验到的极度的快乐。沉浸在这种快乐当中的感受与一般的高兴不同，它是一种难得的高峰体验。人们在这时注意力会完全集中在当下的事物上，感觉不到自我的存在，感觉时间在不知不觉中飞逝，创造力和灵感得到激发，内心非常专注而平静，没有任何冲突，并且从自己所从事的事物中获得极大的满足。所谓的“废寝忘食”，就是沉浸在心流体验中的人们会出现的忘我状态。经常拥有这种高峰体验，会让人的内心得到升华，工作和生活进入到更高的境界，也是人充分实现自身潜能的一个重要途径。

这种高峰体验的出现又一些必要条件：首先就是需要人能毫无杂念地投入，全神贯注；另外，需要所做的事情和个人的能力很好地匹配，若是太过简单，人容易感觉无聊，太过复杂，人则容易感觉受挫；第三，人需要能在这个过程中不断地取得进展，比较明确的目标和及时的反馈都很重要，可以帮助人不断地调整自己的行动。有趣的是，人通常都是在非常积极地为事物努力的时候才会体验到这种极度的快乐。如果只是从事一些被动的活动，比如看电视等，哪怕它们会让人愉快，也不会激发心流。除此之外，精力涣散和心不在焉也会减少人们从事某项事物中获得的乐趣。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-进入状态-保持状态:067ea3473217959ce25f78341d81828e&#34;&gt;2.进入状态／保持状态&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;程序员们都知道，任务切换需要耗费许多额外的花销，通俗地来讲，首先需要保存当前上下文以便下次能够顺利切换回来，然后要加载目标任务的上下文。如果一个系统不停地在多个任务之间来回倒腾，就会耗费大量的时间在上下文切换上，无形中浪费很多的时间。

相比之下，如果只做一件任务，就不会有此损失。这就是为什么专注的人比不专注的人时间利用效率高得多的原因。任务切换的暗时间看似非常不明显，甚至很多人认为“多任务”是件很好的事情（有时候的确是），但日积月累起来就会发现，消耗在切换上的时间越来越多。

另外，大脑开始一件任务的时候必须要有一定时间来“热身”，这个时间因人而异，并且可以通过练习来改变。举个例子，你看了一会书之后，忽然感到一阵无聊，忍不住打开浏览器，十分钟后你想起来还要继续看书，但要回复到当时理想的状态，却需要一段时间来努力去集中精力，把记忆中相关的知识全都激活起来，从而才能进入“状态”，因为你上了十分钟网之后这些记忆已经被抑制了。如果这个“热身”状态需要一刻钟，那么看似十分钟的上网闲逛其实就花费了二十五分钟。

如果阅读的例子还不够生动，对于程序员来说其实有更好的例子：你写程序写得正high，忽然被叫去开了一通会，写到一半的代码搁在那儿。等你开完会回来你需要多久能够重新进入状态？又或者，你正在调试程序，你已经花了二十分钟的时间把与这个bug可能相关的代码前前后后都理解了一遍，心中构建了一个大致的地图，就在这时，呃，你又被叫去开了个会(:D)，开完会回来，可想而知，得花上一些时间来回想一下刚刚弄清的东西了。

迅速进入状态的能力是可以锻炼的，根据我个人的经验，至少可以缩短到3-5分钟。但要想完全进入状态，却是很难在这么短的时间实现的。所谓完全进入状态，举个例子：你看了3个小时的书，或者调试了半个小时的程序之后，往往满脑子都是相关的东西，所有这些知识都处在活跃状态，换言之你大脑中所有相关的记忆神经网络都被激活了，要达到这样一种忘记时间流逝的“沉浸”状态（心理学上叫做“流体验”），不是三两分钟的事情。而一旦这种状态被破坏，无形间效率就会大打折扣。这也是为什么我总是倾向于创造大块的时间来阅读重要的东西，因为这样有利于“沉浸”进去，使得新知识可以和大脑中与其相关的各种既有的知识充分融合，关联起来，后者对于深刻的记忆非常有帮助。

要充分利用暗时间，不仅要能够迅速进入状态，另一个很重要的习惯就是能够保持状态多久（思维体力）。

能够迅速进入专注状态，以及能够长期保持专注状态，是高效学习的两个最重要习惯。
值得庆幸的是，专注力和耐力与才能不同，可以通过训练于后天获得可以不断提升其资质。只要每天坐在书桌前，训练将意识倾注于一点，自然就能掌握。这同前面写过的强化肌肉的做法十分相似。每天不间断地写作集中意识去工作，这些非做不可----将这样的信息持续不断地传递给身体系统，让它牢牢地记住，再悄悄移动刻度，一点一点将极限值将上提升，注意不让身体发觉。这跟每天坚持慢跑，强化肌肉，逐步打造出跑步者的体型，乃是异曲同工。给它刺激，持续。再给它刺激，持续。这一过程当然需要耐心，不过一定会得到相应的回报。

优秀的侦探小说家雷蒙德.钱德勒在私信中说过：“哪怕没有什么东西可写，我私吞也肯定在书桌前坐上好几个小时，独自一人集中精力。”他这么做是为了什么，我完全能理解。钱德勒通过这么做，来提高职业作家必需的膂力，静静地提高士气。这样一种日常训练对他必不可缺。

我认为写作长篇小说是一种体力劳动。写文章属于脑力劳动，然而写出一本大部头来，更近于体力劳动。诚然，写书并不需要举起沉重的物体，也不需要飞速地奔来跑去，高高地蹿上跳下。世间的很多人似乎只看到表面，将作家的工作视为宁静而更改的书斋劳动，以为有了足以端起一只咖啡杯的力量，就能写小说了。试它一试，立即就会明白，写小说并非那么安逸的工作。坐在书桌前，将神经如同激光束一般集于一点，动用想象力，从“无”的地平线上催生出故事来，挑选出一个个正确的词语，让所有的流程准确无误----这样一种工作，与一般人想象的相比，更为长久地需要远为巨大的能量。这固然不必运动身体，劳筋动骨的劳动却在体内热火朝天地展开。固然，思索问题的是脑子，小说家却需披挂着叫“故事”的全副装备，动用全身进行思考，这要求作家彻底地驱使----在许多时候是奴役----肢体能力。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-排除干扰:067ea3473217959ce25f78341d81828e&#34;&gt;3.排除干扰&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;干吗还会欣羡我能坐稳在咖啡馆里呢？到咖啡馆原本就为着隔离而来，隔离自己的家，隔离善良的声音，隔离掉所有熟悉、舒适、温暖的东西；正在写长篇的小说家林俊颖一人独居，如今却也冲出到咖啡馆来，他笑着说，书架一直在那里叫你，你一碰到困难，借口翻翻资料，寻找感觉，接下来你就发现自己又埋进某本书、某部小说里两小时了。所以，所有像回事的作家最终几乎都在早上书写，趁着整个世界才刚醒来，还跟你暂时处在一种相互隔离的状态，你还有能力把它当在外头——就连海明威这种浮夸好热闹的人都告诉我们，在早晨进入写作之前，不做其他任何有企图心的事；纳博科夫一致工作到下午，知道黄昏散步时才找报纸看，才放世界溜进来；在淡水写作的舞鹤甚至不读报，他只在喂食镇上街猫时顺便瞄一眼头条，知道没发生战争，末日还没来就可以了。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-养成习惯:067ea3473217959ce25f78341d81828e&#34;&gt;4.养成习惯&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;书中主人翁流落赌城，在绝望时刻偶然从一个老头手上得到一个必然赢钱的赌方，但这个最后一定大赢的赌方非常诡异非常磨人，它必须先挨过一定阶段的输钱，只能输不能赢，而且明知是输亦一步也不能省——写小说的格林迷朱天心尤其喜欢这个例子，她在新小说顺利开笔之前，一样总要经历这同样的短则数日长可数星期的枯坐思索（在小说题材乃至内容已经完全锁定备妥的情况下），明明知道一定空手而回仍得每天带着书、草稿本和笔到写作的咖啡馆报到，她出门时的口头禅便是：“去输钱”。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>善哉行</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-06-lonely/</link>
      <pubDate>Mon, 06 Jun 2016 22:46:00 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-06-lonely/</guid>
      <description>

&lt;h2 id=&#34;善哉行:fc69331b0f799d0bad7de7a3734ff807&#34;&gt;善哉行&lt;/h2&gt;

&lt;h4 id=&#34;曹丕:fc69331b0f799d0bad7de7a3734ff807&#34;&gt;曹丕&lt;/h4&gt;

&lt;p&gt;上山采薇，薄暮苦饥。&lt;/p&gt;

&lt;p&gt;溪谷多风，霜露沾衣。&lt;/p&gt;

&lt;p&gt;野雉群雊，猿猴相追。&lt;/p&gt;

&lt;p&gt;还望故乡，郁何垒垒！&lt;/p&gt;

&lt;p&gt;高山有崖，林木有枝。&lt;/p&gt;

&lt;p&gt;忧来无方，人莫之知。&lt;/p&gt;

&lt;p&gt;人生如寄，多忧何为？&lt;/p&gt;

&lt;p&gt;今我不乐，岁月如驰。&lt;/p&gt;

&lt;p&gt;汤汤川流，中有行舟。&lt;/p&gt;

&lt;p&gt;随波转薄，有似客游。&lt;/p&gt;

&lt;p&gt;策我良马，被我轻裘。&lt;/p&gt;

&lt;p&gt;载驰载驱，聊以忘忧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>眼前：漫游在《左传》的世界</title>
      <link>http://youngspring1.github.io/post/2016/2016-05-10-zuozhuan/</link>
      <pubDate>Tue, 10 May 2016 23:20:31 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-05-10-zuozhuan/</guid>
      <description>&lt;p&gt;后人看历史的时候，不可避免地站在上帝视角思考问题。&lt;br /&gt;
读史记，一个人将来能够成就什么，从一开始就预设好了。&lt;br /&gt;
又或者大部分历史书，一个王朝如何兴起、成长、强盛、衰落，仿佛就是按照剧本来演的。&lt;/p&gt;

&lt;p&gt;而实际上，当时的人，哪知道后来会发生什么，哪知道做了某件事情的结果，甚至不知道大国的另外一个角落，此刻发生了什么。&lt;/p&gt;

&lt;p&gt;就好像看比赛直播，心情各种复杂，岂止是晚间新闻报道里三言两语能够概括的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;https://www.amazon.cn/gp/product/B01AU85S80/ref=od_aui_detailpages00?ie=UTF8&amp;amp;psc=1&#34;&gt;眼前：漫游在《左传》的世界&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>转：任务切换有害论</title>
      <link>http://youngspring1.github.io/post/2016/2016-04-07-human-task-switches/</link>
      <pubDate>Thu, 07 Apr 2016 22:31:55 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-04-07-human-task-switches/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;书摘，来自《软件随想录》，Joel Spolsky&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在管理一个程序团队时，第一件要学的事就是任务配置(task allocation)要正确。「任务配置」只是把事情分给大家做的夸大说法。用希伯来文的普通话来说就是「倒文件」(因为你会把文件倒在某人身上)。有些事情做得对会得到不可思议的生产力利益，决定哪些文件要倒在谁身上就是其中之一。反过来没做好的话可能就会陷入麻烦的状况，没有人能做好何任何事情而且大家都抱怨「在这里什么事都做不起来。」&lt;/p&gt;

&lt;p&gt;由于这是个针对程序员的网站，我要拿个程序设计问题让你的脑袋动一动暖暖身。&lt;/p&gt;

&lt;p&gt;假设你有A和B两件运算要做。每一件都需10秒的CPU时间。现在你有一颗CPU，为了简化问题，所以工作序列中没有其他东西。&lt;/p&gt;

&lt;p&gt;在我们的CPU中可以选择是否用多工处理。所以你可以先做好一件再做另一件。&lt;/p&gt;

&lt;h5 id=&#34;循序处理:adf6769e1c0a1dd908086b693a0d7412&#34;&gt;循序处理&lt;/h5&gt;

&lt;p&gt;运算A&lt;br /&gt;
1   2   3   4   5   6   7   8   9   10&lt;br /&gt;
运算B&lt;br /&gt;
11  12  13  14  15  16  17  18  19  20&lt;/p&gt;

&lt;p&gt;也可以使用多工方式。如果用多工的话可以假设这颗特别的CPU每个工作每次可以执行一秒，而且工作切换完全不花时间。&lt;/p&gt;

&lt;h5 id=&#34;多工处理:adf6769e1c0a1dd908086b693a0d7412&#34;&gt;多工处理&lt;/h5&gt;

&lt;p&gt;运算A&lt;br /&gt;
1   3   5   7   9   11  13  15  17  19&lt;br /&gt;
运算B&lt;br /&gt;
2   4   6   8   10  12  14  16  18  20&lt;/p&gt;

&lt;p&gt;你会选哪一种方式呢？大部份人的直觉反应都认为多工比较好。不管哪一种状况，都得等20秒才能两件运算都完成。不过可以想想单就各件运算来说要多久才有结果。&lt;/p&gt;

&lt;p&gt;在两种状况下，运算B(标成蓝色)都要20秒才得到结果。不过运算A的结果在多工时需要19秒。可是循序时就只要10秒就好了。&lt;/p&gt;

&lt;p&gt;换句话来说在这个安排好的例子中，循序处理的每件运算的平均时间比多工处理少(15秒对19.5秒)。(事实上这例子也并不是真的那么假 - 它是源于Jared在工作上必须解决的一个真实问题。)&lt;/p&gt;

&lt;p&gt;方法  运算A花的时间 运算B花的时间 平均&lt;br /&gt;
循序处理    10秒 20秒 15&lt;br /&gt;
多工处理    19秒 20秒 19.5&lt;/p&gt;

&lt;p&gt;我刚刚说过「工作切换完全不花时间」。其实在真的CPU中工作切换是需要一点点时间的，基本上要足够储存CPU暂存器的状态并载入其他工作的CPU暂存器。实际上这短到几乎可以忽略。不过为了让生活更多乐趣，让我们假设工作切换需要半秒。现在情况变得更糟了：&lt;/p&gt;

&lt;p&gt;方法  运算A花的时间 运算B花的时间 平均&lt;br /&gt;
循序处理    10秒 20秒 + 1次工作切换 = 20.5秒    15.25&lt;br /&gt;
多工处理    19秒 + 18次工作切换 = 28秒 20秒 + 19次工作切换 = 29.5秒   28.75&lt;/p&gt;

&lt;p&gt;现在呢，虽然我知道这有点蠢，不过就算为了让我高兴一下，想想如果工作切换需要一分钟拿如何？&lt;/p&gt;

&lt;p&gt;方法  运算A花的时间 运算B花的时间 平均&lt;br /&gt;
循序处理    10秒 20秒 + 1次工作切换 = 80秒  45秒&lt;br /&gt;
多工处理    19秒 + 18次工作切换 = 1099秒   20秒 + 19次工作切换 = 1160秒   几近19分钟!!&lt;/p&gt;

&lt;p&gt;工作切换用的时间愈长，多工处理的代价愈大。&lt;/p&gt;

&lt;p&gt;这件事本身不怎么新奇，不是吗？不久大概就会有些白痴气愤地写信指控我「反对」多工处理了。他们会质问我：「你真的想要回到那种得先结束WordPerfect才能执行Lotus 1-2-3的DOS时代吗？」&lt;/p&gt;

&lt;p&gt;不过那并不是我的意思。我只是想要你同意，在这类例子中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;循序处理会让结果平均上比较快得到，而且&lt;/li&gt;
&lt;li&gt;工作切换需要愈久，多工处理所付的代价就愈大。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;够了，别管CPU了，来管管人吧，这有趣多了。这里的重点在于管理「程序员」时，工作切换会需要很长很长的时间。因为程序设计这种工作必须同时在脑袋里记很多东西。另外记住的东西愈多，写程序时生产力愈高。用全速写程序的程序员脑里随时都会记住无数的事情：变量名称，数据结构，重要的API，写过常要用到的辅助函数名称，甚至存放源代码的次目录名称，一切东西都要记住。如果你把程序员送到克利特岛去度假三星期，他所有东西通通都会忘掉。人脑似乎会把东西移出短期RAM，改存到永远都读不回来的备份磁带上。&lt;/p&gt;

&lt;p&gt;要多久呢？嗯，我的软件公司最近放下手头上在做的事(开发一套代号CityDesk的软件产品)，花了三星期去帮助某个客户处理一个紧急状况。当我们回到办公室时，感觉好像要另外三星期才能回复全速制作CityDesk。&lt;/p&gt;

&lt;p&gt;就个人层次来说，你曾经注意过某件事吗？叫某人做一个工作可以做得很好，可是如果给他两个工作，他会把其中一个做好却忽略另一个，不然就是两件工作都做得很慢，慢到你觉得懒鬼都比他勤劳。这是因为程序设计的工作就是需要很长的切换时间。就我自己来说，当我需要同时完成两个程序设计项目时，切换时间大概要六个小时。以一天八小时来看，等于说多工处理把我的生产力降到每天只剩二小时。真令人沮丧啊。&lt;/p&gt;

&lt;p&gt;同样的道理，如果你给某人两件工作，应该要感谢他们只做一件工作而放弃另一件，因为这样能做好更多的事，而且平均上也能更快完成工作。事实上这一切的重点就是绝对不要让人同时做一件以上的事。请确定你有明白它的意思。好的经理人会认为自己的责任是消除障碍，好让大家都能专注在一件事情并把它真的完成。遇到紧急状况时，请先想想能不能自己处理掉，真的不行再丢给深陷在项目中的程序员吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么程序员要写功能设计书</title>
      <link>http://youngspring1.github.io/post/2016/2016-03-30-write-fd/</link>
      <pubDate>Wed, 30 Mar 2016 21:19:46 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-03-30-write-fd/</guid>
      <description>

&lt;p&gt;续上篇，还是阅读了《软件随想录》之后，希望把以前的思考再总结一下。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-什么是功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;1.什么是功能设计书&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;功能设计书
  从用户的角度，完整描述了程序的行为。它只介绍了程序的功能、交互方式，并不涉及具体的实现方式。   

技术设计书
  指引程序员，如何实现功能设计书所描述的功能。它涉及数据结构、数据库、程序语言、算法等等内部的实现细节。   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从头开始设计一个程序时，最重要的，是完成对用户交互的设计：用户需要哪些功能；这些功能具体需要哪些页面来实现；页面如何操作。&lt;br /&gt;
功能设计书的写作者需要将整个软件的所有可能的使用场景、流程，在自己的脑海中想象出来，并展现在功能设计书当中。&lt;/p&gt;

&lt;h2 id=&#34;2-为什么要写功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.为什么要写功能设计书&lt;/h2&gt;

&lt;p&gt;有好多同事觉得写设计书没有必要，浪费开发的时间，而且对个人能力没有提升。&lt;br /&gt;
我无法想象他们是如何得到这些结论的。可能我在学生时代也是这么想的，看到一个任务就马上写代码，但我早就不这样做了。&lt;/p&gt;

&lt;h4 id=&#34;2-1-设计:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.1 设计&lt;/h4&gt;

&lt;p&gt;功能设计书最重要作用，就是对程序所有的功能进行设计。通过写文档描述所有页面交互的细节，你会被迫对程序做真正的设计。&lt;br /&gt;
在程序的使用中，有可能遇到什么问题，应该如何处理，你在设计阶段就应该想清楚。在写作中，那些可能出问题的地方，大部分都能暴露出来；而如果不写设计书，当你写了一些代码之后，才发现这些问题，付出的代价会更大。&lt;br /&gt;
所以设计能够大幅度缩短整个项目的开发周期。&lt;/p&gt;

&lt;p&gt;更重要的，这对你个人的思维能力和表达能力都很有提升。&lt;br /&gt;
看上去，设计的成果是一篇文档，但为了写作这篇文档，你在脑海中进行的一系列思维活动，才是你最大的收获。&lt;/p&gt;

&lt;h4 id=&#34;2-2-沟通:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.2 沟通&lt;/h4&gt;

&lt;p&gt;有没有回忆起，用户／开发人员／测试人员一次次的跟你确认功能设计的情景？他们东一句西一句地跑过来问你各种愚蠢的问题，你的工作时间被消磨殆尽。&lt;br /&gt;
通过功能设计书，你只需要跟别人沟通一次；其他人员只要去阅读功能设计书，就能知道你能给他们的所有信息。&lt;br /&gt;
如果没有功能设计书，你只能一遍一遍地讲给他们听。&lt;br /&gt;
更可怕的是，如果没有功能设计书，测试人员会根据程序的输入输出来测试程序，或者根据开发人员的实现细节来测试程序，而不是基于设计来设计程序。&lt;/p&gt;

&lt;h4 id=&#34;2-3-计划:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.3 计划&lt;/h4&gt;

&lt;p&gt;如果没有功能设计书把所有的功能点／页面罗列出来，如何安排计划呢。&lt;/p&gt;

&lt;h2 id=&#34;2-谁来读功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.谁来读功能设计书&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;客户
  这里的客户，是那些付钱给你开发程序的人。
  友情提醒你一下，要把他们想象成一毛不拔的铁公鸡，妄图只花5块钱买一架航空母舰。
  写作功能设计书的时候，需要一遍又一遍的跟他们确认，跟他们的想象和需求是否一致。这里的功能设计书，就是必须的“立字据”。基本完成之后，再修改是要加钱的哦。
用户
  这里的用户，是那些使用程序的人。
  友情提醒你一下，要把他们想象成又笨又懒的人，他们什么都不会，什么都不想做。
  但你的功能设计书，必须要把他们教会使用这个程序。
技术设计书的作者
  技术设计书的作者，需要根据功能设计书，考虑如何实现程序。
开发人员
  开发人员，主要按照技术设计书来实现程序，但是也会参考功能设计书，确认功能是否都实现了，页面流程是否一致。
测试人员
  测试人员，需要按照功能设计书来写测试案例，并最终实施测试任务。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-谁来写功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;3.谁来写功能设计书&lt;/h2&gt;

&lt;p&gt;不同的公司，会有不同的职位和称呼，而且写作功能设计书的人，又不是专职写作功能设计书的。&lt;br /&gt;
所以这里，我并不会将什么人来写，而是简单说下，写作功能设计书的人，需要哪些素质。&lt;/p&gt;

&lt;h4 id=&#34;3-1-技术能力:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;3.1 技术能力&lt;/h4&gt;

&lt;p&gt;虽然功能设计书本身并不涉及具体的实现方式，但是，作者必须明白，功能点都是在成本范围内能够实现。这就要求作者必须要有技术功底。&lt;br /&gt;
这也是为什么，本文的标题是“为什么程序员要写功能设计书”，有过开发背景的人，才会具备技术功底。其他人员，很可惜，我觉得不具备写作功能设计书的能力。&lt;/p&gt;

&lt;h4 id=&#34;3-2-思维能力:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;3.2 思维能力&lt;/h4&gt;

&lt;p&gt;将脑海中的设计，通过确切的图片和简要的语言，展现在文档中。我认为这不是写作能力，而是思维能力。&lt;/p&gt;

&lt;h4 id=&#34;3-3-沟通能力:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;3.3 沟通能力&lt;/h4&gt;

&lt;p&gt;功能设计书不是独自写完就可以的。而是要跟其他所有读者沟通达成一致后，才能最终定稿。&lt;/p&gt;

&lt;h2 id=&#34;4-如何写功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;4.如何写功能设计书&lt;/h2&gt;

&lt;h4 id=&#34;4-1-应当包含哪些要素:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;4.1 应当包含哪些要素&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;概述
  该程序的主要功能。
使用场景
  在什么情况下，可以使用该程序。
流程图
  程序各个页面的关系，也是整个服务的全貌。
每个页面的功能说明
  所有页面的详细功能。
细节！细节！细节！
  重要的事情说三遍。页面上所有可能出现的细节都要考虑到，所有可能影响页面的因素都要考虑到。在这些情况下，程序如何反应，写下来。
待解决的问题
  文档不可能在第一版就达到完善的状态，这是你要把还不清楚的地方写下来。
多角度的注解
  主要是从开发人员或者测试人员的角度，需要注意的细节。
修改履历
  所有的读者，都会根据修改履历，大概了解每次修改的功能点和位置。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-2-写作原则:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;4.2 写作原则&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;简单
  能用图片的，尽量用图片而不是语言。能少说的，就不多说。
用户角度
  从用户的角度思考问题，想想用户需要知道什么信息。
评审
  自己阅读，甚至大声朗读几遍。拿给所有必需的读者看。再修改。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>软件随想录</title>
      <link>http://youngspring1.github.io/post/2016/2016-03-27-joe-on-soft/</link>
      <pubDate>Sun, 27 Mar 2016 21:53:14 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-03-27-joe-on-soft/</guid>
      <description>

&lt;p&gt;这周看了一本很有意思的书，《软件随想录》，其实有两卷，是StackOverflow的创始人和CEO发表的blog文集。&lt;br /&gt;
不管是程序员，还是跟程序员打交道的人，都可以读一读，一定会很有收获。&lt;/p&gt;

&lt;p&gt;我就不抄书了，谈谈我自己在工作中的一些感想吧。&lt;/p&gt;

&lt;h4 id=&#34;1-面试题:24c5794b69f59acc2f6fcd7edde119c4&#34;&gt;1.面试题&lt;/h4&gt;

&lt;p&gt;给小朋友面试的时候，公司会给一些题库，里面有好多经典的面试题，我严重怀疑面试的学生已经背得滚瓜烂熟了，反正基本上都能很快的答上来。但是要是出个笔试题，让他们手写几行（我以为）简单的代码，一天下来十几个人竟然没有一个能完全做对的。&lt;br /&gt;
我常常想，这些面试题有什么用？工作中基本不会用到，实在有一些细节的知识点，用的时候再查资料就可以了。&lt;br /&gt;
听上去没什么不对的，也许这就是马路上好多IT培训广告的原因，也许这就是公司招近好多不合格的“野生程序员”的原因。&lt;br /&gt;
今天看了书才知道，上学时候学习的那些基础课，不是让我们在日后的工作中使用的，而是提前做一次筛选，提醒那些不适合做程序员的人知难而退；然后磨炼留下的人，将他们提高到一个高度，这样以后再做工作上的事，就游刃有余了。&lt;/p&gt;

&lt;p&gt;补充一个学习理念：&lt;br /&gt;
当你小学三年级的时候，会觉得题目很难；但是当你高中的时候，会觉得小学的题目都很简单。那么，先将自己提升到高中的水平，和那些小学生一起，做小学生的题目。嗯，你一定能够碾压你的竞争对手。&lt;/p&gt;

&lt;h4 id=&#34;2-成长:24c5794b69f59acc2f6fcd7edde119c4&#34;&gt;2.成长&lt;/h4&gt;

&lt;p&gt;刚刚进公司的时候，有“总结－分享－成长”这样的氛围。比如，做项目到一定的阶段，大家会各自总结在这过程中，做得好的不好的地方，分析原因、提出对策，然后在下一次类似的机会中实践；一个人学习了新的知识点，一定会形成文档，下次别人遇到了问题，直接去问他或者看文档，有时还会组织分享会来讲解；如此这般，很容易感受到自身的成长。&lt;br /&gt;
而现在，大家都分散着做各自的项目，几乎没有时间和渠道交流。离职率也很高，各自学习自己感兴趣的东西。这也导致完全无心来培养一个新手，反正培养出来了也是要走的。哼哼。&lt;/p&gt;

&lt;h4 id=&#34;3-是geek还是农民工:24c5794b69f59acc2f6fcd7edde119c4&#34;&gt;3.是geek还是农民工&lt;/h4&gt;

&lt;p&gt;和程序员以外的人交流，噢，简直没法交流啊。就连本来应该懂一点技术的产品经理，也是拿各种不相关的词汇生搬硬套，并且妄图做技术上的决策。业务部的人，简直把程序员当成实现他们需求的工具，而且常常会想用1块钱的成本做10块钱的事，还觉得只值5毛钱。哼哼。&lt;br /&gt;
所以理想的情况，还是待在geek文化比较强烈的公司吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.cn/图书/dp/B00WDTQU8M?ie=UTF8&amp;amp;psc=1&amp;amp;ref_=oh_aui_detailpage_o00_s00&#34;&gt;软件随想录 I&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.cn/图书/dp/B00WFT32FY?ie=UTF8&amp;amp;psc=1&amp;amp;ref_=oh_aui_detailpage_o00_s00&#34;&gt;软件随想录 II&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>写给大家看的设计书</title>
      <link>http://youngspring1.github.io/post/2016/2016-03-12-designer/</link>
      <pubDate>Sat, 12 Mar 2016 21:56:16 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-03-12-designer/</guid>
      <description>

&lt;p&gt;即使不是设计师，如果懂一点设计，做出来的产品会更明确和清晰。&lt;br /&gt;
况且，一个现代人，总会有书面形式的表达，此时知晓一些设计原则，对文档非常有帮助。&lt;/p&gt;

&lt;p&gt;这本设计书，就是写给设计师以外的人看的。&lt;br /&gt;
The Non-Designer&amp;rsquo;s Design Book&lt;/p&gt;

&lt;p&gt;在看这本书以前，对于日常能见到的海报、传单、商品包装、图书封面，我都不甚在意；看完这本书之后，同样还是对于这些常见信息的展示形式，有了新的认识。&lt;br /&gt;
也就是说，能明确地说出来，这个传单，遵循了什么样的规则，所以产生了什么样的效果。而那个海报，如果稍微如何如何修改一下，或许能够变得更好。&lt;/p&gt;

&lt;h2 id=&#34;四大设计原则:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;四大设计原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;亲密性&lt;/li&gt;
&lt;li&gt;对齐&lt;/li&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;li&gt;对比&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;书上介绍了很多没有遵循这些原则的实例，然后告诉我们应该如何修改这些实例。&lt;br /&gt;
通过实例，能够更容易掌握下面这些干巴巴的定义。&lt;/p&gt;

&lt;h4 id=&#34;亲密性:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;亲密性&lt;/h4&gt;

&lt;p&gt;彼此相关的信息，应当归并在一起，形成一个视觉单元，而不是多个孤立的元素。&lt;br /&gt;
这有助于组织信息，减少混乱，为读者提供清晰的结构。&lt;/p&gt;

&lt;h4 id=&#34;对齐:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对齐&lt;/h4&gt;

&lt;p&gt;每个元素都应当于页面上的另一个元素有视觉的联系。&lt;br /&gt;
以此建立一种清晰、精巧而且清爽的外观。&lt;/p&gt;

&lt;h4 id=&#34;重复:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;重复&lt;/h4&gt;

&lt;p&gt;同一类元素应当以同样的颜色、形状、材质、空间关系、线宽、字体、大小和图片来重复出现。&lt;br /&gt;
既能增加条理性，还可以加强统一性。&lt;/p&gt;

&lt;h4 id=&#34;对比:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对比&lt;/h4&gt;

&lt;p&gt;不同类别的元素，应当截然不同。&lt;/p&gt;

&lt;h2 id=&#34;颜色:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;颜色&lt;/h2&gt;

&lt;p&gt;介绍了调色板里面各种颜色的关系，以及“亮色“和“暗色”的对比，“暖色”和“冷色”的对比，“纸”和“显示屏”的对比。&lt;/p&gt;

&lt;h2 id=&#34;字体:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;字体&lt;/h2&gt;

&lt;p&gt;介绍了不同字体的来源和对比，非常有启发。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/写给大家看的设计书-威廉姆斯/dp/B018KMT5WI/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1457794020&amp;amp;sr=1-1&#34;&gt;写给大家看的设计书&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>必然</title>
      <link>http://youngspring1.github.io/post/2016/2016-03-06-inevitable/</link>
      <pubDate>Sun, 06 Mar 2016 14:57:21 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-03-06-inevitable/</guid>
      <description>

&lt;p&gt;我们期待未来30年，哪些预言能够成为现实！&lt;/p&gt;

&lt;h3 id=&#34;形成-becoming:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;形成(Becoming)&lt;/h3&gt;

&lt;p&gt;无数在未来颠覆我们当前世界的产品，可能还没有发明出来，所以当下就是创业的最佳时机。&lt;br /&gt;
未来正在“形成”，正在被我们所塑造。我们没有迟到。&lt;br /&gt;
上学的时候有人讲“互联网的圈地时代已经过去了”，现在看来，过去的十年里，无数的互联网公司涌现出来，并且在几个巨头的统治下，顽强地生存着。人类的需求和欲望，是不断扩大和增长的，有这一点，就有足够的理由期待未来有更多的产品，来满足人类的需求。&lt;/p&gt;

&lt;h3 id=&#34;知化-cognifying:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;知化(Cognifying)&lt;/h3&gt;

&lt;p&gt;大数据＋计算能力＋算法＝人工智能时代。
一个有趣的循环：&lt;br /&gt;
1.机器人（电脑）干不了我的工作。&lt;br /&gt;
2.好吧，它会许多事情，但我做的事情，它不一定都会。&lt;br /&gt;
3.好吧，我做的事情它都会，但它常常出故障，这时需要我来处理。&lt;br /&gt;
4.好吧，它干常规工作时从不出错，但是我需要训练它学习新任务。&lt;br /&gt;
5.好吧，就让它做我原来的工作吧，那本来就不是人该干的。&lt;br /&gt;
6.哇，机器人正在干我以前做的工作，我的新工作不仅好玩多了，工资还高！&lt;br /&gt;
7.真高兴，机器人（电脑）绝对干不了我现在做的事情。&lt;/p&gt;

&lt;p&gt;好了，我要去找工作了！&lt;/p&gt;

&lt;h3 id=&#34;流动-flowing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;流动(Flowing)&lt;/h3&gt;

&lt;p&gt;如果某个产品可以依赖互联网复制，那么价格会趋近于免费。&lt;br /&gt;
但是下面这几种特性却无法复制，我们可以从这些角度创造价值：&lt;br /&gt;
1.即时性&lt;br /&gt;
2.个性化&lt;br /&gt;
3.解释性（用户手册、技术支持收费）&lt;br /&gt;
4.可靠性&lt;br /&gt;
5.获取权（云服务）&lt;br /&gt;
6.实体化（现场感）&lt;br /&gt;
7.可赞助&lt;br /&gt;
8.可寻性（相关性数据）&lt;br /&gt;
在“流动”的时代，互联网产品时开放的，可分享的，也是变化的。&lt;/p&gt;

&lt;h3 id=&#34;屏读-screening:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;屏读(Screening)&lt;/h3&gt;

&lt;p&gt;从古登堡以来，人们获取信息的方式，从书页转移到屏幕。未来我们的生活中会使用大大小小、分散在各处的屏幕。&lt;/p&gt;

&lt;h3 id=&#34;使用-accessing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;使用(Accessing)&lt;/h3&gt;

&lt;p&gt;未来我们不需要真正“拥有”某些资源，我们只在需要的时候，租用／借阅／访问这些资源。&lt;/p&gt;

&lt;h3 id=&#34;共享-sharing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;共享(Sharing)&lt;/h3&gt;

&lt;p&gt;我们分享我们的知识（StackOverflow），并且互相协作（github），看上去是免费提供的，但是参与者可以获得满足感。
如果对某个设想感兴趣，并且想把它制造出来，可以“众筹”，也就是粉丝们集体资助他们所喜爱的，再也没有比“众筹”更能让创作者受益的好方法了。&lt;/p&gt;

&lt;h3 id=&#34;过滤-filtering:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;过滤(Filtering)&lt;/h3&gt;

&lt;p&gt;这个世界每秒钟创造出来的信息，可能我一辈子都阅览不完。这个一个信息爆炸的时代，最稀缺的资源是我们自己的注意力，我们需要过滤器，将这些大量丰富的信息缩减到令人满意的程度，再将我们的注意力投入之上。&lt;br /&gt;
事实上，这些过滤器已经在工作了。电子邮件服务器帮我们区分出正常邮件／广告邮件／垃圾邮件；朋友圈／微博只推送给我，那些我感兴趣的信息；亚马逊通过我的购买记录，给我推荐我可能感兴趣的商品信息，我无须再自己搜索。&lt;br /&gt;
Google这样的广告服务商，可以根据用户的信息，提供更加准确的广告投放服务。&lt;br /&gt;
未来我们会在自己的身体或者生活中加入更多的感知仪器，测量到的数据会发送给我个人的过滤器，让我得到更加准确有效的信息。&lt;/p&gt;

&lt;h3 id=&#34;重混-remixing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;重混(Remixing)&lt;/h3&gt;

&lt;p&gt;文学作品／音乐／摄影作品／电影，这些作品在未来，最有可能发生再创作。同人小说创作、音乐改编、PS、电影片段剪辑。。。&lt;br /&gt;
法律上，应该如何界定一段代码、一个idea、一段旋律的所有权和期限，都可以是亟待探明的问题。&lt;/p&gt;

&lt;h3 id=&#34;互动-interacting:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;互动(Interacting)&lt;/h3&gt;

&lt;p&gt;通过各种各样的感应器，我们可以在增强现实／虚拟现实的世界里，用我们自己的感知和行为跟这个世界互动。
有些感应器可以增强我们的能力，比如视力、听力，有些感应器能够给我们添加一些新能力，比如GPS定位、X光透视、温度探测等。互动发生的区域，会比现在的手机和手表，离我们更近。&lt;br /&gt;
我们自己就是密码和数字身份证。我们的步态、心跳模式、敲击键盘的节奏、表情、眨眼的频率、坐下的姿势、声音等等，都是和他人不同的，也几乎无法仿造。&lt;/p&gt;

&lt;h3 id=&#34;追踪-tracking:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;追踪(Tracking)&lt;/h3&gt;

&lt;p&gt;越来越多的物联网设备记录了我们生活中的各种数据：行驶记录、旅行记录、手机位置、公共摄像头、公共wifi、社交网络、浏览器、智能家居设备、健康追踪等等。我们不断增长的自身信息，被追踪、分析，甚至被利用。&lt;/p&gt;

&lt;h3 id=&#34;提问-questioning:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;提问(Questioning)&lt;/h3&gt;

&lt;p&gt;在互联网上提问，可能是别人回答你的问题，比如维基百科、知乎；也有可能是人工智能回答你的问题，比如Google、Siri。
好的提问创造更多价值。&lt;/p&gt;

&lt;h3 id=&#34;开始-beginning:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;开始(Beginning)&lt;/h3&gt;

&lt;p&gt;未来正在发生，我们就站在起点，能够参与其中，深感荣幸。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/gp/product/B0176RQ53A?ref_=s9_hps_bw_g14_i1&#34;&gt;必然&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160306-the-inevitable.jpg&#34; alt=&#34;必然&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>