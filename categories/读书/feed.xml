<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书 on 行行重行行</title>
    <link>http://youngspring1.github.io/categories/%E8%AF%BB%E4%B9%A6/</link>
    <description>Recent content in 读书 on 行行重行行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 07 Apr 2016 22:31:55 +0800</lastBuildDate>
    <atom:link href="http://youngspring1.github.io/categories/%E8%AF%BB%E4%B9%A6/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>转：任务切换有害论</title>
      <link>http://youngspring1.github.io/post/2016/2016-04-07-human-task-switches/</link>
      <pubDate>Thu, 07 Apr 2016 22:31:55 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-04-07-human-task-switches/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;书摘，来自《软件随想录》，Joel Spolsky&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在管理一个程序团队时，第一件要学的事就是任务配置(task allocation)要正确。「任务配置」只是把事情分给大家做的夸大说法。用希伯来文的普通话来说就是「倒文件」(因为你会把文件倒在某人身上)。有些事情做得对会得到不可思议的生产力利益，决定哪些文件要倒在谁身上就是其中之一。反过来没做好的话可能就会陷入麻烦的状况，没有人能做好何任何事情而且大家都抱怨「在这里什么事都做不起来。」&lt;/p&gt;

&lt;p&gt;由于这是个针对程序员的网站，我要拿个程序设计问题让你的脑袋动一动暖暖身。&lt;/p&gt;

&lt;p&gt;假设你有A和B两件运算要做。每一件都需10秒的CPU时间。现在你有一颗CPU，为了简化问题，所以工作序列中没有其他东西。&lt;/p&gt;

&lt;p&gt;在我们的CPU中可以选择是否用多工处理。所以你可以先做好一件再做另一件。&lt;/p&gt;

&lt;h5 id=&#34;循序处理:adf6769e1c0a1dd908086b693a0d7412&#34;&gt;循序处理&lt;/h5&gt;

&lt;p&gt;运算A&lt;br /&gt;
1   2   3   4   5   6   7   8   9   10&lt;br /&gt;
运算B&lt;br /&gt;
11  12  13  14  15  16  17  18  19  20&lt;/p&gt;

&lt;p&gt;也可以使用多工方式。如果用多工的话可以假设这颗特别的CPU每个工作每次可以执行一秒，而且工作切换完全不花时间。&lt;/p&gt;

&lt;h5 id=&#34;多工处理:adf6769e1c0a1dd908086b693a0d7412&#34;&gt;多工处理&lt;/h5&gt;

&lt;p&gt;运算A&lt;br /&gt;
1   3   5   7   9   11  13  15  17  19&lt;br /&gt;
运算B&lt;br /&gt;
2   4   6   8   10  12  14  16  18  20&lt;/p&gt;

&lt;p&gt;你会选哪一种方式呢？大部份人的直觉反应都认为多工比较好。不管哪一种状况，都得等20秒才能两件运算都完成。不过可以想想单就各件运算来说要多久才有结果。&lt;/p&gt;

&lt;p&gt;在两种状况下，运算B(标成蓝色)都要20秒才得到结果。不过运算A的结果在多工时需要19秒。可是循序时就只要10秒就好了。&lt;/p&gt;

&lt;p&gt;换句话来说在这个安排好的例子中，循序处理的每件运算的平均时间比多工处理少(15秒对19.5秒)。(事实上这例子也并不是真的那么假 - 它是源于Jared在工作上必须解决的一个真实问题。)&lt;/p&gt;

&lt;p&gt;方法  运算A花的时间 运算B花的时间 平均&lt;br /&gt;
循序处理    10秒 20秒 15&lt;br /&gt;
多工处理    19秒 20秒 19.5&lt;/p&gt;

&lt;p&gt;我刚刚说过「工作切换完全不花时间」。其实在真的CPU中工作切换是需要一点点时间的，基本上要足够储存CPU暂存器的状态并载入其他工作的CPU暂存器。实际上这短到几乎可以忽略。不过为了让生活更多乐趣，让我们假设工作切换需要半秒。现在情况变得更糟了：&lt;/p&gt;

&lt;p&gt;方法  运算A花的时间 运算B花的时间 平均&lt;br /&gt;
循序处理    10秒 20秒 + 1次工作切换 = 20.5秒    15.25&lt;br /&gt;
多工处理    19秒 + 18次工作切换 = 28秒 20秒 + 19次工作切换 = 29.5秒   28.75&lt;/p&gt;

&lt;p&gt;现在呢，虽然我知道这有点蠢，不过就算为了让我高兴一下，想想如果工作切换需要一分钟拿如何？&lt;/p&gt;

&lt;p&gt;方法  运算A花的时间 运算B花的时间 平均&lt;br /&gt;
循序处理    10秒 20秒 + 1次工作切换 = 80秒  45秒&lt;br /&gt;
多工处理    19秒 + 18次工作切换 = 1099秒   20秒 + 19次工作切换 = 1160秒   几近19分钟!!&lt;/p&gt;

&lt;p&gt;工作切换用的时间愈长，多工处理的代价愈大。&lt;/p&gt;

&lt;p&gt;这件事本身不怎么新奇，不是吗？不久大概就会有些白痴气愤地写信指控我「反对」多工处理了。他们会质问我：「你真的想要回到那种得先结束WordPerfect才能执行Lotus 1-2-3的DOS时代吗？」&lt;/p&gt;

&lt;p&gt;不过那并不是我的意思。我只是想要你同意，在这类例子中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;循序处理会让结果平均上比较快得到，而且&lt;/li&gt;
&lt;li&gt;工作切换需要愈久，多工处理所付的代价就愈大。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;够了，别管CPU了，来管管人吧，这有趣多了。这里的重点在于管理「程序员」时，工作切换会需要很长很长的时间。因为程序设计这种工作必须同时在脑袋里记很多东西。另外记住的东西愈多，写程序时生产力愈高。用全速写程序的程序员脑里随时都会记住无数的事情：变量名称，数据结构，重要的API，写过常要用到的辅助函数名称，甚至存放源代码的次目录名称，一切东西都要记住。如果你把程序员送到克利特岛去度假三星期，他所有东西通通都会忘掉。人脑似乎会把东西移出短期RAM，改存到永远都读不回来的备份磁带上。&lt;/p&gt;

&lt;p&gt;要多久呢？嗯，我的软件公司最近放下手头上在做的事(开发一套代号CityDesk的软件产品)，花了三星期去帮助某个客户处理一个紧急状况。当我们回到办公室时，感觉好像要另外三星期才能回复全速制作CityDesk。&lt;/p&gt;

&lt;p&gt;就个人层次来说，你曾经注意过某件事吗？叫某人做一个工作可以做得很好，可是如果给他两个工作，他会把其中一个做好却忽略另一个，不然就是两件工作都做得很慢，慢到你觉得懒鬼都比他勤劳。这是因为程序设计的工作就是需要很长的切换时间。就我自己来说，当我需要同时完成两个程序设计项目时，切换时间大概要六个小时。以一天八小时来看，等于说多工处理把我的生产力降到每天只剩二小时。真令人沮丧啊。&lt;/p&gt;

&lt;p&gt;同样的道理，如果你给某人两件工作，应该要感谢他们只做一件工作而放弃另一件，因为这样能做好更多的事，而且平均上也能更快完成工作。事实上这一切的重点就是绝对不要让人同时做一件以上的事。请确定你有明白它的意思。好的经理人会认为自己的责任是消除障碍，好让大家都能专注在一件事情并把它真的完成。遇到紧急状况时，请先想想能不能自己处理掉，真的不行再丢给深陷在项目中的程序员吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么程序员要写功能设计书</title>
      <link>http://youngspring1.github.io/post/2016-03-30-write-fd/</link>
      <pubDate>Wed, 30 Mar 2016 21:19:46 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-30-write-fd/</guid>
      <description>

&lt;p&gt;续上篇，还是阅读了《软件随想录》之后，希望把以前的思考再总结一下。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-什么是功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;1.什么是功能设计书&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;功能设计书
  从用户的角度，完整描述了程序的行为。它只介绍了程序的功能、交互方式，并不涉及具体的实现方式。   

技术设计书
  指引程序员，如何实现功能设计书所描述的功能。它涉及数据结构、数据库、程序语言、算法等等内部的实现细节。   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从头开始设计一个程序时，最重要的，是完成对用户交互的设计：用户需要哪些功能；这些功能具体需要哪些页面来实现；页面如何操作。&lt;br /&gt;
功能设计书的写作者需要将整个软件的所有可能的使用场景、流程，在自己的脑海中想象出来，并展现在功能设计书当中。&lt;/p&gt;

&lt;h2 id=&#34;2-为什么要写功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.为什么要写功能设计书&lt;/h2&gt;

&lt;p&gt;有好多同事觉得写设计书没有必要，浪费开发的时间，而且对个人能力没有提升。&lt;br /&gt;
我无法想象他们是如何得到这些结论的。可能我在学生时代也是这么想的，看到一个任务就马上写代码，但我早就不这样做了。&lt;/p&gt;

&lt;h4 id=&#34;2-1-设计:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.1 设计&lt;/h4&gt;

&lt;p&gt;功能设计书最重要作用，就是对程序所有的功能进行设计。通过写文档描述所有页面交互的细节，你会被迫对程序做真正的设计。&lt;br /&gt;
在程序的使用中，有可能遇到什么问题，应该如何处理，你在设计阶段就应该想清楚。在写作中，那些可能出问题的地方，大部分都能暴露出来；而如果不写设计书，当你写了一些代码之后，才发现这些问题，付出的代价会更大。&lt;br /&gt;
所以设计能够大幅度缩短整个项目的开发周期。&lt;/p&gt;

&lt;p&gt;更重要的，这对你个人的思维能力和表达能力都很有提升。&lt;br /&gt;
看上去，设计的成果是一篇文档，但为了写作这篇文档，你在脑海中进行的一系列思维活动，才是你最大的收获。&lt;/p&gt;

&lt;h4 id=&#34;2-2-沟通:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.2 沟通&lt;/h4&gt;

&lt;p&gt;有没有回忆起，用户／开发人员／测试人员一次次的跟你确认功能设计的情景？他们东一句西一句地跑过来问你各种愚蠢的问题，你的工作时间被消磨殆尽。&lt;br /&gt;
通过功能设计书，你只需要跟别人沟通一次；其他人员只要去阅读功能设计书，就能知道你能给他们的所有信息。&lt;br /&gt;
如果没有功能设计书，你只能一遍一遍地讲给他们听。&lt;br /&gt;
更可怕的是，如果没有功能设计书，测试人员会根据程序的输入输出来测试程序，或者根据开发人员的实现细节来测试程序，而不是基于设计来设计程序。&lt;/p&gt;

&lt;h4 id=&#34;2-3-计划:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.3 计划&lt;/h4&gt;

&lt;p&gt;如果没有功能设计书把所有的功能点／页面罗列出来，如何安排计划呢。&lt;/p&gt;

&lt;h2 id=&#34;2-谁来读功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;2.谁来读功能设计书&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;客户
  这里的客户，是那些付钱给你开发程序的人。
  友情提醒你一下，要把他们想象成一毛不拔的铁公鸡，妄图只花5块钱买一架航空母舰。
  写作功能设计书的时候，需要一遍又一遍的跟他们确认，跟他们的想象和需求是否一致。这里的功能设计书，就是必须的“立字据”。基本完成之后，再修改是要加钱的哦。
用户
  这里的用户，是那些使用程序的人。
  友情提醒你一下，要把他们想象成又笨又懒的人，他们什么都不会，什么都不想做。
  但你的功能设计书，必须要把他们教会使用这个程序。
技术设计书的作者
  技术设计书的作者，需要根据功能设计书，考虑如何实现程序。
开发人员
  开发人员，主要按照技术设计书来实现程序，但是也会参考功能设计书，确认功能是否都实现了，页面流程是否一致。
测试人员
  测试人员，需要按照功能设计书来写测试案例，并最终实施测试任务。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-谁来写功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;3.谁来写功能设计书&lt;/h2&gt;

&lt;p&gt;不同的公司，会有不同的职位和称呼，而且写作功能设计书的人，又不是专职写作功能设计书的。&lt;br /&gt;
所以这里，我并不会将什么人来写，而是简单说下，写作功能设计书的人，需要哪些素质。&lt;/p&gt;

&lt;h4 id=&#34;3-1-技术能力:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;3.1 技术能力&lt;/h4&gt;

&lt;p&gt;虽然功能设计书本身并不涉及具体的实现方式，但是，作者必须明白，功能点都是在成本范围内能够实现。这就要求作者必须要有技术功底。&lt;br /&gt;
这也是为什么，本文的标题是“为什么程序员要写功能设计书”，有过开发背景的人，才会具备技术功底。其他人员，很可惜，我觉得不具备写作功能设计书的能力。&lt;/p&gt;

&lt;h4 id=&#34;3-2-思维能力:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;3.2 思维能力&lt;/h4&gt;

&lt;p&gt;将脑海中的设计，通过确切的图片和简要的语言，展现在文档中。我认为这不是写作能力，而是思维能力。&lt;/p&gt;

&lt;h4 id=&#34;3-3-沟通能力:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;3.3 沟通能力&lt;/h4&gt;

&lt;p&gt;功能设计书不是独自写完就可以的。而是要跟其他所有读者沟通达成一致后，才能最终定稿。&lt;/p&gt;

&lt;h2 id=&#34;4-如何写功能设计书:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;4.如何写功能设计书&lt;/h2&gt;

&lt;h4 id=&#34;4-1-应当包含哪些要素:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;4.1 应当包含哪些要素&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;概述
  该程序的主要功能。
使用场景
  在什么情况下，可以使用该程序。
流程图
  程序各个页面的关系，也是整个服务的全貌。
每个页面的功能说明
  所有页面的详细功能。
细节！细节！细节！
  重要的事情说三遍。页面上所有可能出现的细节都要考虑到，所有可能影响页面的因素都要考虑到。在这些情况下，程序如何反应，写下来。
待解决的问题
  文档不可能在第一版就达到完善的状态，这是你要把还不清楚的地方写下来。
多角度的注解
  主要是从开发人员或者测试人员的角度，需要注意的细节。
修改履历
  所有的读者，都会根据修改履历，大概了解每次修改的功能点和位置。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-2-写作原则:eb7bfe2a6b06616e5d53e8ee4553cb80&#34;&gt;4.2 写作原则&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;简单
  能用图片的，尽量用图片而不是语言。能少说的，就不多说。
用户角度
  从用户的角度思考问题，想想用户需要知道什么信息。
评审
  自己阅读，甚至大声朗读几遍。拿给所有必需的读者看。再修改。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>软件随想录</title>
      <link>http://youngspring1.github.io/post/2016-03-27-joe-on-soft/</link>
      <pubDate>Sun, 27 Mar 2016 21:53:14 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-27-joe-on-soft/</guid>
      <description>

&lt;p&gt;这周看了一本很有意思的书，《软件随想录》，其实有两卷，是StackOverflow的创始人和CEO发表的blog文集。&lt;br /&gt;
不管是程序员，还是跟程序员打交道的人，都可以读一读，一定会很有收获。&lt;/p&gt;

&lt;p&gt;我就不抄书了，谈谈我自己在工作中的一些感想吧。&lt;/p&gt;

&lt;h4 id=&#34;1-面试题:24c5794b69f59acc2f6fcd7edde119c4&#34;&gt;1.面试题&lt;/h4&gt;

&lt;p&gt;给小朋友面试的时候，公司会给一些题库，里面有好多经典的面试题，我严重怀疑面试的学生已经背得滚瓜烂熟了，反正基本上都能很快的答上来。但是要是出个笔试题，让他们手写几行（我以为）简单的代码，一天下来十几个人竟然没有一个能完全做对的。&lt;br /&gt;
我常常想，这些面试题有什么用？工作中基本不会用到，实在有一些细节的知识点，用的时候再查资料就可以了。&lt;br /&gt;
听上去没什么不对的，也许这就是马路上好多IT培训广告的原因，也许这就是公司招近好多不合格的“野生程序员”的原因。&lt;br /&gt;
今天看了书才知道，上学时候学习的那些基础课，不是让我们在日后的工作中使用的，而是提前做一次筛选，提醒那些不适合做程序员的人知难而退；然后磨炼留下的人，将他们提高到一个高度，这样以后再做工作上的事，就游刃有余了。&lt;/p&gt;

&lt;p&gt;补充一个学习理念：&lt;br /&gt;
当你小学三年级的时候，会觉得题目很难；但是当你高中的时候，会觉得小学的题目都很简单。那么，先将自己提升到高中的水平，和那些小学生一起，做小学生的题目。嗯，你一定能够碾压你的竞争对手。&lt;/p&gt;

&lt;h4 id=&#34;2-成长:24c5794b69f59acc2f6fcd7edde119c4&#34;&gt;2.成长&lt;/h4&gt;

&lt;p&gt;刚刚进公司的时候，有“总结－分享－成长”这样的氛围。比如，做项目到一定的阶段，大家会各自总结在这过程中，做得好的不好的地方，分析原因、提出对策，然后在下一次类似的机会中实践；一个人学习了新的知识点，一定会形成文档，下次别人遇到了问题，直接去问他或者看文档，有时还会组织分享会来讲解；如此这般，很容易感受到自身的成长。&lt;br /&gt;
而现在，大家都分散着做各自的项目，几乎没有时间和渠道交流。离职率也很高，各自学习自己感兴趣的东西。这也导致完全无心来培养一个新手，反正培养出来了也是要走的。哼哼。&lt;/p&gt;

&lt;h4 id=&#34;3-是geek还是农民工:24c5794b69f59acc2f6fcd7edde119c4&#34;&gt;3.是geek还是农民工&lt;/h4&gt;

&lt;p&gt;和程序员以外的人交流，噢，简直没法交流啊。就连本来应该懂一点技术的产品经理，也是拿各种不相关的词汇生搬硬套，并且妄图做技术上的决策。业务部的人，简直把程序员当成实现他们需求的工具，而且常常会想用1块钱的成本做10块钱的事，还觉得只值5毛钱。哼哼。&lt;br /&gt;
所以理想的情况，还是待在geek文化比较强烈的公司吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.cn/图书/dp/B00WDTQU8M?ie=UTF8&amp;amp;psc=1&amp;amp;ref_=oh_aui_detailpage_o00_s00&#34;&gt;软件随想录 I&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.cn/图书/dp/B00WFT32FY?ie=UTF8&amp;amp;psc=1&amp;amp;ref_=oh_aui_detailpage_o00_s00&#34;&gt;软件随想录 II&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>写给大家看的设计书</title>
      <link>http://youngspring1.github.io/post/2016-03-12-designer/</link>
      <pubDate>Sat, 12 Mar 2016 21:56:16 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-12-designer/</guid>
      <description>

&lt;p&gt;即使不是设计师，如果懂一点设计，做出来的产品会更明确和清晰。&lt;br /&gt;
况且，一个现代人，总会有书面形式的表达，此时知晓一些设计原则，对文档非常有帮助。&lt;/p&gt;

&lt;p&gt;这本设计书，就是写给设计师以外的人看的。&lt;br /&gt;
The Non-Designer&amp;rsquo;s Design Book&lt;/p&gt;

&lt;p&gt;在看这本书以前，对于日常能见到的海报、传单、商品包装、图书封面，我都不甚在意；看完这本书之后，同样还是对于这些常见信息的展示形式，有了新的认识。&lt;br /&gt;
也就是说，能明确地说出来，这个传单，遵循了什么样的规则，所以产生了什么样的效果。而那个海报，如果稍微如何如何修改一下，或许能够变得更好。&lt;/p&gt;

&lt;h2 id=&#34;四大设计原则:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;四大设计原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;亲密性&lt;/li&gt;
&lt;li&gt;对齐&lt;/li&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;li&gt;对比&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;书上介绍了很多没有遵循这些原则的实例，然后告诉我们应该如何修改这些实例。&lt;br /&gt;
通过实例，能够更容易掌握下面这些干巴巴的定义。&lt;/p&gt;

&lt;h4 id=&#34;亲密性:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;亲密性&lt;/h4&gt;

&lt;p&gt;彼此相关的信息，应当归并在一起，形成一个视觉单元，而不是多个孤立的元素。&lt;br /&gt;
这有助于组织信息，减少混乱，为读者提供清晰的结构。&lt;/p&gt;

&lt;h4 id=&#34;对齐:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对齐&lt;/h4&gt;

&lt;p&gt;每个元素都应当于页面上的另一个元素有视觉的联系。&lt;br /&gt;
以此建立一种清晰、精巧而且清爽的外观。&lt;/p&gt;

&lt;h4 id=&#34;重复:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;重复&lt;/h4&gt;

&lt;p&gt;同一类元素应当以同样的颜色、形状、材质、空间关系、线宽、字体、大小和图片来重复出现。&lt;br /&gt;
既能增加条理性，还可以加强统一性。&lt;/p&gt;

&lt;h4 id=&#34;对比:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对比&lt;/h4&gt;

&lt;p&gt;不同类别的元素，应当截然不同。&lt;/p&gt;

&lt;h2 id=&#34;颜色:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;颜色&lt;/h2&gt;

&lt;p&gt;介绍了调色板里面各种颜色的关系，以及“亮色“和“暗色”的对比，“暖色”和“冷色”的对比，“纸”和“显示屏”的对比。&lt;/p&gt;

&lt;h2 id=&#34;字体:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;字体&lt;/h2&gt;

&lt;p&gt;介绍了不同字体的来源和对比，非常有启发。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/写给大家看的设计书-威廉姆斯/dp/B018KMT5WI/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1457794020&amp;amp;sr=1-1&#34;&gt;写给大家看的设计书&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>必然</title>
      <link>http://youngspring1.github.io/post/2016-03-06-inevitable/</link>
      <pubDate>Sun, 06 Mar 2016 14:57:21 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-inevitable/</guid>
      <description>

&lt;p&gt;我们期待未来30年，哪些预言能够成为现实！&lt;/p&gt;

&lt;h3 id=&#34;形成-becoming:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;形成(Becoming)&lt;/h3&gt;

&lt;p&gt;无数在未来颠覆我们当前世界的产品，可能还没有发明出来，所以当下就是创业的最佳时机。&lt;br /&gt;
未来正在“形成”，正在被我们所塑造。我们没有迟到。&lt;br /&gt;
上学的时候有人讲“互联网的圈地时代已经过去了”，现在看来，过去的十年里，无数的互联网公司涌现出来，并且在几个巨头的统治下，顽强地生存着。人类的需求和欲望，是不断扩大和增长的，有这一点，就有足够的理由期待未来有更多的产品，来满足人类的需求。&lt;/p&gt;

&lt;h3 id=&#34;知化-cognifying:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;知化(Cognifying)&lt;/h3&gt;

&lt;p&gt;大数据＋计算能力＋算法＝人工智能时代。
一个有趣的循环：&lt;br /&gt;
1.机器人（电脑）干不了我的工作。&lt;br /&gt;
2.好吧，它会许多事情，但我做的事情，它不一定都会。&lt;br /&gt;
3.好吧，我做的事情它都会，但它常常出故障，这时需要我来处理。&lt;br /&gt;
4.好吧，它干常规工作时从不出错，但是我需要训练它学习新任务。&lt;br /&gt;
5.好吧，就让它做我原来的工作吧，那本来就不是人该干的。&lt;br /&gt;
6.哇，机器人正在干我以前做的工作，我的新工作不仅好玩多了，工资还高！&lt;br /&gt;
7.真高兴，机器人（电脑）绝对干不了我现在做的事情。&lt;/p&gt;

&lt;p&gt;好了，我要去找工作了！&lt;/p&gt;

&lt;h3 id=&#34;流动-flowing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;流动(Flowing)&lt;/h3&gt;

&lt;p&gt;如果某个产品可以依赖互联网复制，那么价格会趋近于免费。&lt;br /&gt;
但是下面这几种特性却无法复制，我们可以从这些角度创造价值：&lt;br /&gt;
1.即时性&lt;br /&gt;
2.个性化&lt;br /&gt;
3.解释性（用户手册、技术支持收费）&lt;br /&gt;
4.可靠性&lt;br /&gt;
5.获取权（云服务）&lt;br /&gt;
6.实体化（现场感）&lt;br /&gt;
7.可赞助&lt;br /&gt;
8.可寻性（相关性数据）&lt;br /&gt;
在“流动”的时代，互联网产品时开放的，可分享的，也是变化的。&lt;/p&gt;

&lt;h3 id=&#34;屏读-screening:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;屏读(Screening)&lt;/h3&gt;

&lt;p&gt;从古登堡以来，人们获取信息的方式，从书页转移到屏幕。未来我们的生活中会使用大大小小、分散在各处的屏幕。&lt;/p&gt;

&lt;h3 id=&#34;使用-accessing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;使用(Accessing)&lt;/h3&gt;

&lt;p&gt;未来我们不需要真正“拥有”某些资源，我们只在需要的时候，租用／借阅／访问这些资源。&lt;/p&gt;

&lt;h3 id=&#34;共享-sharing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;共享(Sharing)&lt;/h3&gt;

&lt;p&gt;我们分享我们的知识（StackOverflow），并且互相协作（github），看上去是免费提供的，但是参与者可以获得满足感。
如果对某个设想感兴趣，并且想把它制造出来，可以“众筹”，也就是粉丝们集体资助他们所喜爱的，再也没有比“众筹”更能让创作者受益的好方法了。&lt;/p&gt;

&lt;h3 id=&#34;过滤-filtering:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;过滤(Filtering)&lt;/h3&gt;

&lt;p&gt;这个世界每秒钟创造出来的信息，可能我一辈子都阅览不完。这个一个信息爆炸的时代，最稀缺的资源是我们自己的注意力，我们需要过滤器，将这些大量丰富的信息缩减到令人满意的程度，再将我们的注意力投入之上。&lt;br /&gt;
事实上，这些过滤器已经在工作了。电子邮件服务器帮我们区分出正常邮件／广告邮件／垃圾邮件；朋友圈／微博只推送给我，那些我感兴趣的信息；亚马逊通过我的购买记录，给我推荐我可能感兴趣的商品信息，我无须再自己搜索。&lt;br /&gt;
Google这样的广告服务商，可以根据用户的信息，提供更加准确的广告投放服务。&lt;br /&gt;
未来我们会在自己的身体或者生活中加入更多的感知仪器，测量到的数据会发送给我个人的过滤器，让我得到更加准确有效的信息。&lt;/p&gt;

&lt;h3 id=&#34;重混-remixing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;重混(Remixing)&lt;/h3&gt;

&lt;p&gt;文学作品／音乐／摄影作品／电影，这些作品在未来，最有可能发生再创作。同人小说创作、音乐改编、PS、电影片段剪辑。。。&lt;br /&gt;
法律上，应该如何界定一段代码、一个idea、一段旋律的所有权和期限，都可以是亟待探明的问题。&lt;/p&gt;

&lt;h3 id=&#34;互动-interacting:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;互动(Interacting)&lt;/h3&gt;

&lt;p&gt;通过各种各样的感应器，我们可以在增强现实／虚拟现实的世界里，用我们自己的感知和行为跟这个世界互动。
有些感应器可以增强我们的能力，比如视力、听力，有些感应器能够给我们添加一些新能力，比如GPS定位、X光透视、温度探测等。互动发生的区域，会比现在的手机和手表，离我们更近。&lt;br /&gt;
我们自己就是密码和数字身份证。我们的步态、心跳模式、敲击键盘的节奏、表情、眨眼的频率、坐下的姿势、声音等等，都是和他人不同的，也几乎无法仿造。&lt;/p&gt;

&lt;h3 id=&#34;追踪-tracking:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;追踪(Tracking)&lt;/h3&gt;

&lt;p&gt;越来越多的物联网设备记录了我们生活中的各种数据：行驶记录、旅行记录、手机位置、公共摄像头、公共wifi、社交网络、浏览器、智能家居设备、健康追踪等等。我们不断增长的自身信息，被追踪、分析，甚至被利用。&lt;/p&gt;

&lt;h3 id=&#34;提问-questioning:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;提问(Questioning)&lt;/h3&gt;

&lt;p&gt;在互联网上提问，可能是别人回答你的问题，比如维基百科、知乎；也有可能是人工智能回答你的问题，比如Google、Siri。
好的提问创造更多价值。&lt;/p&gt;

&lt;h3 id=&#34;开始-beginning:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;开始(Beginning)&lt;/h3&gt;

&lt;p&gt;未来正在发生，我们就站在起点，能够参与其中，深感荣幸。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/gp/product/B0176RQ53A?ref_=s9_hps_bw_g14_i1&#34;&gt;必然&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160306-the-inevitable.jpg&#34; alt=&#34;必然&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>