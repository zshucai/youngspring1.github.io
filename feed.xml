<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>行行重行行</title>
    <link>http://youngspring1.github.io/</link>
    <description>Recent content on 行行重行行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 12 Mar 2016 21:56:16 +0800</lastBuildDate>
    <atom:link href="http://youngspring1.github.io/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>非设计师的设计书</title>
      <link>http://youngspring1.github.io/post/2016-03-12-designer/</link>
      <pubDate>Sat, 12 Mar 2016 21:56:16 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-12-designer/</guid>
      <description>

&lt;p&gt;即使不是设计师，如果懂一点设计，做出来的产品会更明确和清晰。&lt;br /&gt;
况且，一个现代人，总会有书面形式的表达，此时知晓一些设计原则，对文档非常有帮助。&lt;/p&gt;

&lt;p&gt;这本设计书，就是写给设计师以外的人看的。&lt;br /&gt;
The Non-Designer&amp;rsquo;s Design Book&lt;/p&gt;

&lt;p&gt;在看这本书以前，对于日常能见到的海报、传单、商品包装、图书封面，我都不甚在意；看完这本书之后，同样还是对于这些常见信息的展示形式，有了新的认识。&lt;br /&gt;
也就是说，能明确地说出来，这个传单，遵循了什么样的规则，所以产生了什么样的效果。而那个海报，如果稍微如何如何修改一下，或许能够变得更好。&lt;/p&gt;

&lt;h2 id=&#34;四大设计原则:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;四大设计原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;亲密性&lt;/li&gt;
&lt;li&gt;对齐&lt;/li&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;li&gt;对比&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;书上介绍了很多没有遵循这些原则的实例，然后告诉我们应该如何修改这些实例。&lt;br /&gt;
通过实例，能够更容易掌握下面这些干巴巴的定义。&lt;/p&gt;

&lt;h4 id=&#34;亲密性:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;亲密性&lt;/h4&gt;

&lt;p&gt;彼此相关的信息，应当归并在一起，形成一个视觉单元，而不是多个孤立的元素。&lt;br /&gt;
这有助于组织信息，减少混乱，为读者提供清晰的结构。&lt;/p&gt;

&lt;h4 id=&#34;对齐:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对齐&lt;/h4&gt;

&lt;p&gt;每个元素都应当于页面上的另一个元素有视觉的联系。&lt;br /&gt;
以此建立一种清晰、精巧而且清爽的外观。&lt;/p&gt;

&lt;h4 id=&#34;重复:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;重复&lt;/h4&gt;

&lt;p&gt;同一类元素应当以同样的颜色、形状、材质、空间关系、线宽、字体、大小和图片来重复出现。&lt;br /&gt;
既能增加条理性，还可以加强统一性。&lt;/p&gt;

&lt;h4 id=&#34;对比:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对比&lt;/h4&gt;

&lt;p&gt;不同类别的元素，应当截然不同。&lt;/p&gt;

&lt;h2 id=&#34;颜色:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;颜色&lt;/h2&gt;

&lt;p&gt;介绍了调色板里面各种颜色的关系，以及“亮色“和“暗色”的对比，“暖色”和“冷色”的对比，“纸”和“显示屏”的对比。&lt;/p&gt;

&lt;h2 id=&#34;字体:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;字体&lt;/h2&gt;

&lt;p&gt;介绍了不同字体的来源和对比，非常有启发。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/写给大家看的设计书-威廉姆斯/dp/B018KMT5WI/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1457794020&amp;amp;sr=1-1&#34;&gt;写给大家看的设计书&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R语言中的class()、mode()和typeof()的区别</title>
      <link>http://youngspring1.github.io/post/2016-03-08-r-class/</link>
      <pubDate>Tue, 08 Mar 2016 22:52:12 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-08-r-class/</guid>
      <description>

&lt;p&gt;今天对R语言中的这三个函数产生了疑惑，为什么有时候它们的运行结果一样，有时候却又不一样？&lt;/p&gt;

&lt;h3 id=&#34;定义:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;定义&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;mode&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;The (Storage) Mode of an Object&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;Get or set the type or storage mode of an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;The Type of an Object&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;typeof determines the (R internal) type or storage mode of any object&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;Object Classes&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;R possesses a simple generic function mechanism which can be used for an object-oriented style of programming.&lt;br /&gt;
&amp;emsp;Method dispatch takes place based on the class of the first argument to the generic function.&lt;/p&gt;

&lt;h3 id=&#34;解释:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;解释&lt;/h3&gt;

&lt;p&gt;在R里面，每一个对象都有一个mode和一个class。&lt;br /&gt;
前者表示对象在内存中是如何存储的。 (numeric, character, list and function)&lt;br /&gt;
后者表示对象的抽象类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d &amp;lt;- data.frame(V1=c(1,2))
class(d)
# [1] &amp;quot;data.frame&amp;quot;
mode(d)
# [1] &amp;quot;list&amp;quot;
typeof(d)
# list

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面的例子，我们可以知道，data frame这种类型，在内存中作为list被存储，但是它们被包装成data frame。&lt;br /&gt;
对于某个函数的参数，它的类型是data frame，却不能说是list。&lt;/p&gt;

&lt;p&gt;再来看mode和typeof。&lt;br /&gt;
mode和typeof通常返回同样的值，但也有例外。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typeof(c(1,2))
# [1] &amp;quot;double&amp;quot;
mode(c(1,2))
# [1] &amp;quot;numeric&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;历史原因啦。R语言由S语言发展而来。&lt;br /&gt;
mode，为了和S语言兼容，返回R的对象的模式。&lt;br /&gt;
typeof是R语言特有的，返回一个R的对象的类型。（哎呀，解释不清楚啦）&lt;/p&gt;

&lt;h3 id=&#34;参考:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&#34;http://stackoverflow.com/questions/6258004/r-types-and-classes-of-variables&#34;&gt;http://stackoverflow.com/questions/6258004/r-types-and-classes-of-variables&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&#34;http://stats.stackexchange.com/questions/3212/mode-class-and-type-of-r-objects&#34;&gt;http://stats.stackexchange.com/questions/3212/mode-class-and-type-of-r-objects&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>大部分时候都是目光短浅的动物</title>
      <link>http://youngspring1.github.io/post/2016-03-08-thought/</link>
      <pubDate>Tue, 08 Mar 2016 22:42:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-08-thought/</guid>
      <description>&lt;p&gt;大部分时候都是目光短浅的动物，只能看到眼前一小块；要是再远一点，便如同迷雾般不可捉摸。&lt;br /&gt;
写代码的时候，不时需要打印出一些debug信息，这样才能确认正确；见过有牛人，一次写完代码，最后调试一遍，通过。&lt;br /&gt;
看不到利好，往往不敢继续。所以需要给自己的甜头，引诱自己继续前行。&lt;br /&gt;
在普通人看不到任何收益的情况下，还能继续做，要么眼光比别人更长远，要么是因为情怀。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今天吃饭看见一个老太太，一个人点了份寿司，安安静静的吃完，离开。面容好平静。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>敦煌旅行计划</title>
      <link>http://youngspring1.github.io/post/2016-03-06-plan/</link>
      <pubDate>Sun, 06 Mar 2016 23:39:55 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-plan/</guid>
      <description>

&lt;h3 id=&#34;day1-南京-兰州:4d92112643788221cfde671ff2b890a2&#34;&gt;Day1:南京－兰州&lt;/h3&gt;

&lt;p&gt;正宁路夜市（小吃）：到达的当晚可以逛。&lt;br /&gt;
永昌路夜市（杂货）：返程有空就逛，连着正宁路夜市。&lt;br /&gt;
中山铁桥：清朝。&lt;br /&gt;
省博：返程住兰州，有空逛，大约半天。&lt;/p&gt;

&lt;h3 id=&#34;day2-兰州-武威-张掖:4d92112643788221cfde671ff2b890a2&#34;&gt;Day2:兰州－武威－张掖&lt;/h3&gt;

&lt;p&gt;武威旧称凉州，西夏文化，特色小吃：拨鱼儿、面片、三套车。&lt;br /&gt;
张掖&lt;br /&gt;
&amp;emsp;丹霞景区（40元），最好早晨或者傍晚去，雨后更佳。&lt;br /&gt;
&amp;emsp;大佛寺（41元），西夏国寺，卧佛。&lt;br /&gt;
&amp;emsp;甘州美食广场。&lt;/p&gt;

&lt;h3 id=&#34;day3-张掖-嘉峪关-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day3:张掖－嘉峪关－敦煌&lt;/h3&gt;

&lt;p&gt;嘉峪关&lt;br /&gt;
&amp;emsp;关城、第一城、悬壁长城三景区联票，但距离较远。&lt;br /&gt;
&amp;emsp;镜铁市场的眼镜烧烤有名。&lt;br /&gt;
瓜洲&lt;br /&gt;
&amp;emsp;榆林窟，有空就去。&lt;/p&gt;

&lt;h3 id=&#34;day4-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day4:敦煌&lt;/h3&gt;

&lt;p&gt;敦煌市区以及莫高窟&lt;br /&gt;
&amp;emsp;鸣沙山月牙泉（120元）傍晚去。&lt;br /&gt;
&amp;emsp;市博。&lt;br /&gt;
&amp;emsp;沙洲市场（敦煌夜市）。&lt;br /&gt;
东线：莫高窟。&lt;/p&gt;

&lt;h3 id=&#34;day5-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day5:敦煌&lt;/h3&gt;

&lt;p&gt;敦煌周边&lt;br /&gt;
西线：&lt;br /&gt;
&amp;emsp;西北：玉门关（90km 40元）、雅丹魔鬼城（80km 80元）&lt;br /&gt;
&amp;emsp;西南：西千佛洞（35km）、阳关（70km 50元包含博物馆）&lt;/p&gt;

&lt;h3 id=&#34;day6-敦煌-青海湖-兰州:4d92112643788221cfde671ff2b890a2&#34;&gt;Day6:敦煌－青海湖－兰州&lt;/h3&gt;

&lt;h3 id=&#34;day7-兰州-南京:4d92112643788221cfde671ff2b890a2&#34;&gt;Day7:兰州－南京&lt;/h3&gt;

&lt;h3 id=&#34;路线备忘:4d92112643788221cfde671ff2b890a2&#34;&gt;路线备忘&lt;/h3&gt;

&lt;p&gt;G30 丝绸之路：兰州－武威－张掖－酒泉－瓜洲：1000km&lt;br /&gt;
S314 瓜洲－敦煌：120km&lt;br /&gt;
G215-G315-G25 敦煌－青海湖－兰州&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>20160306 碎碎念</title>
      <link>http://youngspring1.github.io/post/2016-03-06-ssn/</link>
      <pubDate>Sun, 06 Mar 2016 15:04:54 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-ssn/</guid>
      <description>&lt;p&gt;我有一个小侄子，吃饭时必须要拿iPad播放光头强，才能吃得下。&lt;br /&gt;
我以为只有小孩才会这样。&lt;br /&gt;
结果现在发现所有人吃饭都看着手机。&lt;br /&gt;
简直和筷子一样不可或缺。&lt;br /&gt;
下次我给大家表演一下，吃饭without手机。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>必然</title>
      <link>http://youngspring1.github.io/post/2016-03-06-inevitable/</link>
      <pubDate>Sun, 06 Mar 2016 14:57:21 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-inevitable/</guid>
      <description>

&lt;p&gt;我们期待未来30年，哪些预言能够成为现实！&lt;/p&gt;

&lt;h3 id=&#34;形成-becoming:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;形成(Becoming)&lt;/h3&gt;

&lt;p&gt;无数在未来颠覆我们当前世界的产品，可能还没有发明出来，所以当下就是创业的最佳时机。&lt;br /&gt;
未来正在“形成”，正在被我们所塑造。我们没有迟到。&lt;br /&gt;
上学的时候有人讲“互联网的圈地时代已经过去了”，现在看来，过去的十年里，无数的互联网公司涌现出来，并且在几个巨头的统治下，顽强地生存着。人类的需求和欲望，是不断扩大和增长的，有这一点，就有足够的理由期待未来有更多的产品，来满足人类的需求。&lt;/p&gt;

&lt;h3 id=&#34;知化-cognifying:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;知化(Cognifying)&lt;/h3&gt;

&lt;p&gt;大数据＋计算能力＋算法＝人工智能时代。
一个有趣的循环：&lt;br /&gt;
1.机器人（电脑）干不了我的工作。&lt;br /&gt;
2.好吧，它会许多事情，但我做的事情，它不一定都会。&lt;br /&gt;
3.好吧，我做的事情它都会，但它常常出故障，这时需要我来处理。&lt;br /&gt;
4.好吧，它干常规工作时从不出错，但是我需要训练它学习新任务。&lt;br /&gt;
5.好吧，就让它做我原来的工作吧，那本来就不是人该干的。&lt;br /&gt;
6.哇，机器人正在干我以前做的工作，我的新工作不仅好玩多了，工资还高！&lt;br /&gt;
7.真高兴，机器人（电脑）绝对干不了我现在做的事情。&lt;/p&gt;

&lt;p&gt;好了，我要去找工作了！&lt;/p&gt;

&lt;h3 id=&#34;流动-flowing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;流动(Flowing)&lt;/h3&gt;

&lt;p&gt;如果某个产品可以依赖互联网复制，那么价格会趋近于免费。&lt;br /&gt;
但是下面这几种特性却无法复制，我们可以从这些角度创造价值：&lt;br /&gt;
1.即时性&lt;br /&gt;
2.个性化&lt;br /&gt;
3.解释性（用户手册、技术支持收费）&lt;br /&gt;
4.可靠性&lt;br /&gt;
5.获取权（云服务）&lt;br /&gt;
6.实体化（现场感）&lt;br /&gt;
7.可赞助&lt;br /&gt;
8.可寻性（相关性数据）&lt;br /&gt;
在“流动”的时代，互联网产品时开放的，可分享的，也是变化的。&lt;/p&gt;

&lt;h3 id=&#34;屏读-screening:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;屏读(Screening)&lt;/h3&gt;

&lt;p&gt;从古登堡以来，人们获取信息的方式，从书页转移到屏幕。未来我们的生活中会使用大大小小、分散在各处的屏幕。&lt;/p&gt;

&lt;h3 id=&#34;使用-accessing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;使用(Accessing)&lt;/h3&gt;

&lt;p&gt;未来我们不需要真正“拥有”某些资源，我们只在需要的时候，租用／借阅／访问这些资源。&lt;/p&gt;

&lt;h3 id=&#34;共享-sharing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;共享(Sharing)&lt;/h3&gt;

&lt;p&gt;我们分享我们的知识（StackOverflow），并且互相协作（github），看上去是免费提供的，但是参与者可以获得满足感。
如果对某个设想感兴趣，并且想把它制造出来，可以“众筹”，也就是粉丝们集体资助他们所喜爱的，再也没有比“众筹”更能让创作者受益的好方法了。&lt;/p&gt;

&lt;h3 id=&#34;过滤-filtering:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;过滤(Filtering)&lt;/h3&gt;

&lt;p&gt;这个世界每秒钟创造出来的信息，可能我一辈子都阅览不完。这个一个信息爆炸的时代，最稀缺的资源是我们自己的注意力，我们需要过滤器，将这些大量丰富的信息缩减到令人满意的程度，再将我们的注意力投入之上。&lt;br /&gt;
事实上，这些过滤器已经在工作了。电子邮件服务器帮我们区分出正常邮件／广告邮件／垃圾邮件；朋友圈／微博只推送给我，那些我感兴趣的信息；亚马逊通过我的购买记录，给我推荐我可能感兴趣的商品信息，我无须再自己搜索。&lt;br /&gt;
Google这样的广告服务商，可以根据用户的信息，提供更加准确的广告投放服务。&lt;br /&gt;
未来我们会在自己的身体或者生活中加入更多的感知仪器，测量到的数据会发送给我个人的过滤器，让我得到更加准确有效的信息。&lt;/p&gt;

&lt;h3 id=&#34;重混-remixing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;重混(Remixing)&lt;/h3&gt;

&lt;p&gt;文学作品／音乐／摄影作品／电影，这些作品在未来，最有可能发生再创作。同人小说创作、音乐改编、PS、电影片段剪辑。。。&lt;br /&gt;
法律上，应该如何界定一段代码、一个idea、一段旋律的所有权和期限，都可以是亟待探明的问题。&lt;/p&gt;

&lt;h3 id=&#34;互动-interacting:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;互动(Interacting)&lt;/h3&gt;

&lt;p&gt;通过各种各样的感应器，我们可以在增强现实／虚拟现实的世界里，用我们自己的感知和行为跟这个世界互动。
有些感应器可以增强我们的能力，比如视力、听力，有些感应器能够给我们添加一些新能力，比如GPS定位、X光透视、温度探测等。互动发生的区域，会比现在的手机和手表，离我们更近。&lt;br /&gt;
我们自己就是密码和数字身份证。我们的步态、心跳模式、敲击键盘的节奏、表情、眨眼的频率、坐下的姿势、声音等等，都是和他人不同的，也几乎无法仿造。&lt;/p&gt;

&lt;h3 id=&#34;追踪-tracking:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;追踪(Tracking)&lt;/h3&gt;

&lt;p&gt;越来越多的物联网设备记录了我们生活中的各种数据：行驶记录、旅行记录、手机位置、公共摄像头、公共wifi、社交网络、浏览器、智能家居设备、健康追踪等等。我们不断增长的自身信息，被追踪、分析，甚至被利用。&lt;/p&gt;

&lt;h3 id=&#34;提问-questioning:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;提问(Questioning)&lt;/h3&gt;

&lt;p&gt;在互联网上提问，可能是别人回答你的问题，比如维基百科、知乎；也有可能是人工智能回答你的问题，比如Google、Siri。
好的提问创造更多价值。&lt;/p&gt;

&lt;h3 id=&#34;开始-beginning:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;开始(Beginning)&lt;/h3&gt;

&lt;p&gt;未来正在发生，我们就站在起点，能够参与其中，深感荣幸。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/gp/product/B0176RQ53A?ref_=s9_hps_bw_g14_i1&#34;&gt;必然&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160306-the-inevitable.jpg&#34; alt=&#34;必然&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git常用命令备忘</title>
      <link>http://youngspring1.github.io/post/2016-03-06-git/</link>
      <pubDate>Sun, 06 Mar 2016 13:53:07 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-git/</guid>
      <description>

&lt;p&gt;不用git简直就是反人类啊。&lt;br /&gt;
不过没有能力一下子把所有的命令都记住，先把常用的几个列下，具体的后面用到了再查。&lt;/p&gt;

&lt;h2 id=&#34;示意图:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;示意图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160306-git-map.png&#34; alt=&#34;git-map&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remote&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;repository&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;index&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;workspace&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-图中的remote是远程仓库，而repository、index和workspace都是在你本地。&lt;br /&gt;
remote还可以分为trunk repository和your own github repository。
如果你觉得别人的工程很好，想在此基础上嫁接自己的开发，那么fork一下，就会到你自己的github工程列表中。这些remote都是有独立的地址的，比如git自己的代码，提供一个唯一的地址供大家fork：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/git/git.git   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-图中的repository是本地仓库，如果这个本地仓库刚刚被初始化，还是空的，那么我们需要clone一下远程仓库。&lt;br /&gt;
如果这个本地仓库是以前就创建好的，我们开发代码之前，应该取得（fetch）远程仓库remote的更新。&lt;/p&gt;

&lt;p&gt;-图中的workspace是工作区，就是具体的代码文件。
-图中的index是暂存区，代码某个版本开发好后，需要add进index，就是告诉仓库，我修改了哪些文件，将会提交哪些文件。&lt;br /&gt;
此时使用commit命令来提交文件。&lt;br /&gt;
最后，把修改从本地仓库repository推送（push）到远程仓库（remote）。&lt;/p&gt;

&lt;h2 id=&#34;1-git-clone:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;1.git clone&lt;/h2&gt;

&lt;p&gt;重要的事情在前面说，chone之前需要init！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd proj-dir
$ git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;clone命令会在本地主机生成一个目录，与远程主机的版本库同名。&lt;br /&gt;
如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone &amp;lt;版本库的网址&amp;gt;
$ git clone &amp;lt;版本库的网址&amp;gt; &amp;lt;本地目录名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如，克隆jQuery的版本库。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/jquery/jquery.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;clone支持HTTP(s)、SSH、Git、FTP等协议。&lt;/p&gt;

&lt;h2 id=&#34;2-git-remote:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;2.git remote&lt;/h2&gt;

&lt;p&gt;git remote命令列出所有远程主机。&lt;br /&gt;
克隆版本库的时候，所使用的远程主机自动被Git命名为origin。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用-v选项，可以参看远程主机的网址。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想用其他的主机名，需要用git clone命令的-o选项指定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone -o jQuery https://github.com/jquery/jquery.git
$ git remote
jQuery
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-git-fetch:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;3.git fetch&lt;/h2&gt;

&lt;p&gt;如果远程仓库的代码有更新，我们需要将这些更新取到本地。&lt;br /&gt;
通常建议在修改本地代码前做这件事。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git fetch &amp;lt;远程主机名&amp;gt;
$ git fetch &amp;lt;远程主机名&amp;gt; &amp;lt;分支名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不指定分支名，则取回所有分支的更新。&lt;br /&gt;
如果指定分支名，则仅取回指定分支的更新。&lt;/p&gt;

&lt;p&gt;那么，我怎么知道取哪个分支？&lt;br /&gt;
git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch -r
origin/master

$ git branch -a
* master
remotes/origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的命令表示，本地主机的当前分支是master，远程分支是origin/master。&lt;/p&gt;

&lt;p&gt;fetch只能从远程仓库取得代码，还没有合并到本地的代码中去。需要使用git merge命令或者git rebase命令，在本地分支上合并远程分支。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge origin/master
# 或者
$ git rebase origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可是可是，如果我不想合并到现在的分支上怎么办呢。可以使用git checkout命令创建一个新的分支。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b newBrach origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面命令表示，在origin/master的基础上，创建一个新分支。&lt;/p&gt;

&lt;h2 id=&#34;4-git-pull:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;4.git pull&lt;/h2&gt;

&lt;p&gt;取回远程主机某个分支的更新，并且与本地的指定分支合并。
同最开始的图上看，是不是相当于fetch＋checkout？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
$ git pull origin next:master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示取回origin主机的next分支，与本地的master分支合并。&lt;br /&gt;
如果远程分支是与当前分支合并，则冒号后面的部分可以省略。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git pull origin next
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是先做git fetch，再做git merge。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git fetch origin
$ git merge origin/next
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-git-add:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;5.git add&lt;/h2&gt;

&lt;p&gt;把修改信息添加到index暂存区。
添加所有文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add -A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加指定文件到暂存区：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add &amp;lt;文件1&amp;gt; &amp;lt;文件2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以指定文件夹：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add &amp;lt;文件夹&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除文件，并且将删除信息也添加到暂存区：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rm &amp;lt;文件1&amp;gt; &amp;lt;文件2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重命名，并且将重命名信息也添加到暂存区：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git mv &amp;lt;原文件名&amp;gt; &amp;lt;新文件名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-git-commit:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;6.git commit&lt;/h2&gt;

&lt;p&gt;把暂存区的修改，提交到仓库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;quot;信息&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原则上是，每一个原子修改，都作一次提交。&lt;/p&gt;

&lt;h2 id=&#34;7-git-push:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;7.git push&lt;/h2&gt;

&lt;p&gt;将本地分支的更新，推送到远程主机。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常本地分支名和远程分支名都同名，可以省略远程分支名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示将本地的master分支推送到origin主机的master分支。&lt;/p&gt;

&lt;h2 id=&#34;其他:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;其他&lt;/h2&gt;

&lt;p&gt;显示暂存区和工作区的差异：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git diff  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示有变更的文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;1.阮一峰  &lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/06/git_remote.html&#34;&gt;Git远程操作详解&lt;/a&gt;&lt;br /&gt;
2.阮一峰  &lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu&#34;&gt;常用 Git 命令清单&lt;/a&gt;&lt;br /&gt;
3.廖雪峰  &lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34;&gt;Git教程&lt;/a&gt;&lt;br /&gt;
4.&lt;a href=&#34;http://git-scm.com/book/zh/v2&#34;&gt;Git官方文档&lt;/a&gt;&lt;br /&gt;
5.Git常用命令一览&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160306-git-cmd.png&#34; alt=&#34;git-cmd&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用hugo搭建个人博客入门教程</title>
      <link>http://youngspring1.github.io/post/2016-03-06-hugo/</link>
      <pubDate>Sun, 06 Mar 2016 10:28:49 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-hugo/</guid>
      <description>

&lt;h3 id=&#34;起因:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;起因&lt;/h3&gt;

&lt;p&gt;之前看过腾讯工程师写的《Web全站工程师的自我修养》&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;一书，萌生了搭建一个博客的想法，用来记录学习记录和生活感受。先用免费的github，挂载静态页面试试吧。原来计划使用道听途说的Jekyll，然后一不小心看到了这篇文章&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;http://blog.coderzh.com/2015/08/29/hugo/&lt;/a&gt;，各种好:&lt;br /&gt;
1.只有一个二进制文件。&lt;br /&gt;
2.可以将宇宙标准MarkDown格式的文章自动转换为静态网页。&lt;br /&gt;
3.内置Web服务器，可以立即在本地查看修改结果。&lt;br /&gt;
那么就用hugo&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;吧。有空再试试hexo&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;安装hugo:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;安装hugo&lt;/h3&gt;

&lt;p&gt;我是在mac上通过tar压缩文件安装的。&lt;br /&gt;
其他方法可以参考官方文档。&lt;br /&gt;
1.下载&lt;br /&gt;
&amp;emsp;下载地址：&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;&lt;br /&gt;
&amp;emsp;我要的mac版，文件名长这样：hugo_X.YY_darwin_amd64.zip&lt;br /&gt;
2.解压&lt;br /&gt;
&amp;emsp;解压后是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l   
total 31696
-rw-r--r--@ 1 username  staff     10480  2 28 21:38 LICENSE.md
-rw-r--r--@ 1 username  staff      7694  2 28 21:38 README.md
-rwxr-xr-x@ 1 username  staff  16201084  2 28 21:38 hugo_0.15_darwin_amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;试一试：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./hugo_0.15_darwin_amd64 version   
Hugo Static Site Generator v0.15 BuildDate: 2016-02-28T21:38:32+08:00   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.创建链接文件&lt;br /&gt;
&amp;emsp;这么长的命令，用起来多不方便啊，我们简化一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ln -s /fullpath/fullpath/hugo_0.15_darwin_amd64 hugo
$ ls -l
total 31696
-rw-r--r--@ 1 username  staff     10480  2 28 21:38 LICENSE.md
-rw-r--r--@ 1 username  staff      7694  2 28 21:38 README.md
lrwxr-xr-x  1 username  staff        54  2 28 22:05 hugo -&amp;gt; /fullpath/fullpath/hugo_0.15_darwin_amd64
-rwxr-xr-x@ 1 username  staff  16201084  2 28 21:38 hugo_0.15_darwin_amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;亲测有效：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./hugo version   
Hugo Static Site Generator v0.15 BuildDate: 2016-02-28T21:38:32+08:00   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.加入PATH&lt;br /&gt;
&amp;emsp;这还不够，我们要加到PATH里去。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which hugo
/fullpath/fullpath/hugo
$ vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;加入这一行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/fullpath/fullpath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;这样你应该可以在任意位置运行hugo命令了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo version   
Hugo Static Site Generator v0.15 BuildDate: 2016-02-28T21:38:32+08:00   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;生成本地站点:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;生成本地站点&lt;/h3&gt;

&lt;p&gt;安装好hugo之后，就可以很轻松地生成本地站点啦：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugo会在当前的目录下，生成mysite这个目录，cd进去，目录结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;archetypes/
content/
layouts/
static/
config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中content是MarkDown文章目录，layouts存放的是网站的模版文件，static存放的是图片、css、js资源等。config.toml是网站的配置文件，你也可以换成yaml、json等。&lt;/p&gt;

&lt;h3 id=&#34;创建文章:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;创建文章&lt;/h3&gt;

&lt;p&gt;在mysite目录下，创建一个[关于]页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd mysite
$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容自己填呗。
再创建一个文章页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/2016-03-06-first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容自己填。&lt;br /&gt;
想看看效果么？等等，还需要导入个主题。&lt;/p&gt;

&lt;h3 id=&#34;导入主题:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;导入主题&lt;/h3&gt;

&lt;p&gt;还是在在mysite目录下，创建一个文件夹，我们随便clone一个主题下来。&lt;br /&gt;
我在&lt;a href=&#34;https://themes.gohugo.io&#34;&gt;https://themes.gohugo.io&lt;/a&gt;上没有找到喜欢的主题，就直接拉了上面原文作者的主题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd themes
$ git clone https://github.com/coderzh/hugo-rapid-theme.git
$ cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（主题里面包含了作者的信息，如果需要使用，记得修改。）&lt;/p&gt;

&lt;h3 id=&#34;调试:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;调试&lt;/h3&gt;

&lt;p&gt;现在终于可以调试了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --theme=hugo-rapid-theme --buildDrafts --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览器里打开：&lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;br /&gt;
选项watch会让服务器自动检测文章的改动，自动刷新浏览器，非常方便。&lt;/p&gt;

&lt;h3 id=&#34;发布:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;发布&lt;/h3&gt;

&lt;p&gt;在本地自己偷着看有什么意思，发布到github上去吧。&lt;br /&gt;
1.生成静态页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo --theme=hugo-rapid-theme --buildDrafts --baseUrl=&amp;quot;http://youngspring1.github.io&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;这里的url要替换成你自己的。&lt;br /&gt;
&amp;emsp;所有的静态页面都会生成到public目录。&lt;/p&gt;

&lt;p&gt;2.创建Repository&lt;br /&gt;
&amp;emsp;在github上创建一个Repository，名为&amp;rdquo;youngspring1.github.io&amp;rdquo;。&lt;br /&gt;
&amp;emsp;同样，不认识的名字要替换成你自己的。&lt;/p&gt;

&lt;p&gt;3.提交&lt;br /&gt;
&amp;emsp;把public目录下的内容，全部提交到刚刚创建的Repository中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd public
$ git init
$ git remote add origin https://github.com/youngspring1/youngspring1.github.io.git
$ git add -A
$ git commit -m &amp;quot;first commit&amp;quot;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;在浏览器中访问&lt;a href=&#34;http://youngspring1.github.io&#34;&gt;http://youngspring1.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;原文作者&lt;a href=&#34;http://blog.coderzh.com&#34;&gt;coderzh&lt;/a&gt;搭建的中文的hugo站点：&lt;a href=&#34;http://www.gohugo.org/&#34;&gt;http://www.gohugo.org/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:1&#34;&gt;余果：&lt;a href=&#34;http://www.amazon.cn/Web全栈工程师的自我修养-余果/dp/B0141BI0D2/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1457233956&amp;amp;sr=1-1&#34;&gt;《Web全站工程师的自我修养》&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:2&#34;&gt;hugo主页：&lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:3&#34;&gt;hexo主页：&lt;a href=&#34;https://www.hexo.io&#34;&gt;https://www.hexo.io&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>first</title>
      <link>http://youngspring1.github.io/post/first/</link>
      <pubDate>Sun, 28 Feb 2016 22:12:26 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/first/</guid>
      <description>

&lt;h2 id=&#34;hello-hugo:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Hello Hugo&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;aaa&lt;/li&gt;
&lt;li&gt;bbb&lt;/li&gt;
&lt;li&gt;ccc&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://youngspring1.github.io/about/</link>
      <pubDate>Sun, 28 Feb 2016 22:11:12 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/about/</guid>
      <description>&lt;p&gt;不想只做码农的程序员一枚&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>