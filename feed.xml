<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>行行重行行</title>
    <link>http://youngspring1.github.io/</link>
    <description>Recent content on 行行重行行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 26 Mar 2016 08:44:24 +0800</lastBuildDate>
    <atom:link href="http://youngspring1.github.io/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>转：如何不做多任务工作 — 更简单理智地去工作</title>
      <link>http://youngspring1.github.io/post/2016-03-26-work-simpler/</link>
      <pubDate>Sat, 26 Mar 2016 08:44:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-26-work-simpler/</guid>
      <description>&lt;p&gt;转帖评论：&lt;/p&gt;

&lt;p&gt;没有所谓的多任务处理。&lt;br /&gt;
CPU也是一个个任务分时间段单独执行，或者在独立的核心上面分布处理的呢。&lt;br /&gt;
人类在多任务处理方面更加无能，就好比无法一边写代码，一边做饭。特别的，两个不同的任务之间切换的时候，人类需要更多的切换时间，想想你刚刚玩了一局精彩的游戏，至少要回味10分钟😄，才能投入到工作吧。&lt;/p&gt;

&lt;p&gt;因此减少任务的切换，是一个解决方案。&lt;br /&gt;
也就是说，留出大段不受打扰的时间。
写代码是一种需要精力高度集中的工作，有时看上去我的手指都没有动，一行代码都没有写，事实上，我在脑海中搭建巴别塔呢，这时候，如果来一个人问我一个问题，那么，不管我的巴别塔盖了100层还是50层，一会儿我都要重新从地面开始搭建555。所以如果你作为一个程序员，工作的时候常常不受打扰，珍惜这份工作吧。&lt;br /&gt;
这也是为什么，我工作的时候常常戴着耳塞，因为这样就把全世界关掉了呀。&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;出处：微信公众号“聪明人的个人发展”，译者“晓飞”
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;你同时忙着两个项目，而老板又在桌上放了两个新工作需求。你正打着电话，此时又来了三封电邮。你正试图按时下班，以便在回家路上为晚餐买些食材。你的黑莓手机没电了，而另一个手机也是如此。你的同事过来索要某份信息数据，而你的博客订阅器里还有100多条未读信息。&lt;/p&gt;

&lt;p&gt;你如同马戏团里的杂耍人一样，处理着多项任务。祝贺你如此能干，多任务处理者。&lt;/p&gt;

&lt;p&gt;在这个即时科技时代，我们都被过量信息和占用个人时间的各种需求所轰炸。这也是GTD管理系统为何在信息世界如此流行的部分原因 — 这个系统的设计目的就是为了做出快速决定，并让个人的所有生活需求保持秩序井然。但即便在使用GTD管理系统，我们有时仍会被各种事情弄得不堪重负，自己的管理系统也开始分崩离析。&lt;/p&gt;

&lt;p&gt;Life Hack网站最近发布了一篇《如何处理多任务》的文章，它是篇针对多任务工作的本质，以及如何在多任务工作的同时，仍能一次专注于一项任务的好文章。&lt;/p&gt;

&lt;p&gt;但我这篇文章是《如何不做多任务工作》— 指导你为了身心健康，怎样尽可能简单地去工作。&lt;/p&gt;

&lt;p&gt;首先，以下是不做多任务工作的简短理由：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;由于人们需要为处理每项新任务转换工作状态，然后又要切换回先前任务的工作状态，多任务工作并不高效。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多任务工作更加复杂，因此更容易制造压力和犯错。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多任务工作繁忙疯狂，而且在这个已经显得混乱的世界里，我们需要掌控内心恐惧，找寻一点理智和沉静心态的绿洲。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面就是如何不做多任务工作的一些建议：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先，请根据你的实际情形，为不同的工作内容（即电话、电脑、杂事、家事、等候事项等）设定待做事项列表。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为即时记录需要完成的事项，准备一种记录工具（比如一本笔记本）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;准备一个实物收件箱和电邮收件箱（收件箱数量要尽可能少），以使你收到的所有东西都能汇集到一个地方（实物收件箱用于收纳纸张物品，电邮收件箱用于存放数字信息）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以时间块的方式计划当天生活，并在中间为紧急事项预留空白时段。取决于哪种做法对自己最适用，你可以尝试一小时长度的时间块，或半小时长度的时间块。或试试这种：40分钟长度的时间块，中间留出20分钟处理各种杂事。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;早晨第一件事，就是处理个人最重要任务（蓝色字体可点击）。在最重要任务完成前，别干其他任何事情。做完首个任务后休息一会儿，再开始完成下一个最重要任务。如果你能在上午做完2-3个最重要任务，当天剩余时间便无比轻松自在。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在一个时间块内处理某项任务时，请关闭其他所有分心事物。关掉邮箱，如果可以就断掉互联网。关闭手机。假如可能就努力别接电话。专注于那项任务，在不去担心其他任何事情的情况下，努力将它完成。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;若你感到有查看电邮或转换到其他任务上的冲动，请阻止自己。做做深呼吸。重新专注于自我。回到你手头的那项任务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果在工作时收到其他东西，请把它们放进收件箱，或在记录系统里做好笔记。随后回归你的手头任务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当完成手头任务后，请不时处理一下你的笔记和收件箱，将新任务添加到待做事项列表，并在需要时重新制定日程安排。按照定期和预先设定的时间间隔处理个人邮件和其他收件箱。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;有时干扰事项会非常紧急，以致于你无法将它推迟到完成手头任务后再做处理。在此情形下，请努力记下当前的工作进度（若有时间请写下进度笔记），把跟那项任务相关的所有文件或笔记内容放在一起（也许可以放进“行动”文件夹或项目文件夹）。然后，当你回归那项任务时，便可拿出对应文件夹，查看先前笔记来确定自己暂停工作的地方。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;请做做深呼吸，伸伸四肢，时不时休息一下。好好享受生活。出门走走，欣赏自然美景。让自己保持理智状态。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Leo Babauta（里奥·巴伯塔）&lt;br /&gt;
2007.02.19&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;感谢Leo公开放弃自己博客内容（zenhabits.net）的版权&lt;br /&gt;
&lt;a href=&#34;http://zenhabits.net/how-not-to-multitask-work-simpler-and/#rd?sukey=a76cdd086edb4fce38bde6191fdb1ccc2a5900824eda91c2970e203265a37440c95c66d0f3c39f4c65e24b9867312dc3&#34;&gt;阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shiny Server インストール手順</title>
      <link>http://youngspring1.github.io/post/2016-03-26-shinyserver-jp/</link>
      <pubDate>Sat, 26 Mar 2016 08:08:31 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-26-shinyserver-jp/</guid>
      <description>

&lt;p&gt;Rは、統計に対して、とても便利ですが、ユーザに向けインタフェースはそんなに良くないと思います。&lt;br /&gt;
Shiny Serverは、Webサービスのように、ユーザの入力から、Rで計算して、ブラウザで結果を表示するサーバです。&lt;br /&gt;
インストール手順は、下記の通りです。&lt;br /&gt;
環境は、イントネットに接続できないCentOS 6.5 x64です。&lt;/p&gt;

&lt;h4 id=&#34;1-ソースからrのインストール:16be4caf9550ae37fbcf4bfe15c6e5b2&#34;&gt;1.ソースからRのインストール&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/r --enable-R-shlib 
make 
make install 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意1：PATHは、ファイル「/etc/profile」で設定してください。&lt;br /&gt;
注意2：Rは、他のコンポに依頼します。下記のコマンドは、実行することが必要かもしれません。エラーメッセージにより確認してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install gcc-gfortran 
yum install readline-devel 
yum install libXt-devel 
yum install gcc-c++ glibc-headers
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-xvfbのインストール:16be4caf9550ae37fbcf4bfe15c6e5b2&#34;&gt;2.Xvfbのインストール&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;yum install Xvfb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;説明：絵の作るのは、デフォルトが X11ですが、いろいろな問題があります。最後、Xvfbになりました。&lt;/p&gt;

&lt;h4 id=&#34;3-shinyのインストール:16be4caf9550ae37fbcf4bfe15c6e5b2&#34;&gt;3.Shinyのインストール&lt;/h4&gt;

&lt;h5 id=&#34;3-1-shiny-libのインストール:16be4caf9550ae37fbcf4bfe15c6e5b2&#34;&gt;3.1 Shiny libのインストール&lt;/h5&gt;

&lt;p&gt;Rのコンソールで、Shiny libをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&#39;shiny&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他のlibに依頼しますが、もしサーバは、いんとねっとに接続できないなら、インストールファイルをダウンロードして、サーバに置いて、ファイルからインストールします。&lt;br /&gt;
Rのコンソールから、quit()して、下記のようなコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;R CMD INSTALL XXXXX.tar.gz 
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-2-shiny-serverのインストール:16be4caf9550ae37fbcf4bfe15c6e5b2&#34;&gt;3.2 Shiny Serverのインストール&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;yum install --nogpgcheck shiny-server-1.4.2.786-rh5-x86_64.rpm 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ファイルは、下記のパスです：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/shiny-server/shiny-server.conf 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認のために、Shiny libの10個の例を、shiny-serverのサーバディレクトリにコピーします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -R /opt/r/lib64/R/library/shiny/examples/* /srv/shiny-server/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記により、すべてのAPPは、ディレクトリ「/srv/shiny-server/」に置きます。そして、ブラウザでアクセスできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:3838/目录名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それ以外、起動・停止コマンド：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;start shiny-server 
stop shiny-server 
restart shiny-server 
status shiny-server 
reload shiny-server #サービスを中止しないように、更新内容をロード
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ホーンページを確認しますか：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:3838/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画面を表示できますが、絵は誤りがありそうです。&lt;/p&gt;

&lt;h4 id=&#34;4-絵の作り:16be4caf9550ae37fbcf4bfe15c6e5b2&#34;&gt;4.絵の作り&lt;/h4&gt;

&lt;h5 id=&#34;4-1-xvfbの起動:16be4caf9550ae37fbcf4bfe15c6e5b2&#34;&gt;4.1 Xvfbの起動&lt;/h5&gt;

&lt;p&gt;X11を使ったら、エラー「can&amp;rsquo;t start PNG device」になります。&lt;br /&gt;
そのために、X11の代わりに，Xvfbを使います。&lt;br /&gt;
Xvfbを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Xvfb :3 -screen 1 1280x1024x24
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4-1-設定:16be4caf9550ae37fbcf4bfe15c6e5b2&#34;&gt;4.1 設定&lt;/h5&gt;

&lt;p&gt;ui.Rには、下記の内容を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sys.setenv(DISPLAY = &amp;quot;:3.1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例を確認しませんか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:3838/index.html 
http://localhost:3838/01_hello/ 
http://localhost:3838/02_text/
http://localhost:3838/03_reactivity/
http://localhost:3838/04_mpg/
http://localhost:3838/05_sliders/
http://localhost:3838/06_tabsets/
http://localhost:3838/07_widgets/
http://localhost:3838/08_html/
http://localhost:3838/09_upload/
http://localhost:3838/10_download/
http://localhost:3838/11_timer/
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;参照：&lt;a href=&#34;https://www.rstudio.com/products/shiny/shiny-server2/&#34;&gt;https://www.rstudio.com/products/shiny/shiny-server2/&lt;/a&gt;&lt;br /&gt;
中国語版：&lt;a href=&#34;http://youngspring1.github.io/post/2016-03-25-shinyserver/&#34;&gt;http://youngspring1.github.io/post/2016-03-25-shinyserver/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shiny Server 安装步骤</title>
      <link>http://youngspring1.github.io/post/2016-03-25-shinyserver/</link>
      <pubDate>Fri, 25 Mar 2016 20:00:38 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-25-shinyserver/</guid>
      <description>

&lt;p&gt;R语言非常适合用于统计相关的运算。但是在用户交互方面不够友好。&lt;br /&gt;
Shiny Server是RStudio推出的，一个Web服务。它可以接受用户的输入，使用R语言进行计算，最终展示计算结果。这一切都在浏览器上完成。&lt;br /&gt;
总之非常实用，现在整理下我自己的安装手册。&lt;/p&gt;

&lt;h4 id=&#34;1-从代码安装r:c33352843d2370512fb8e3c681b7c165&#34;&gt;1.从代码安装R&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/r --enable-R-shlib 
make 
make install 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意1：PATH要设置这个文件，否则可能会找不到R ：/etc/profile&lt;br /&gt;
注意2：可能依赖其他包比如fortran，你可能还需要执行下面这些命令。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install gcc-gfortran 
yum install readline-devel 
yum install libXt-devel 
yum install gcc-c++ glibc-headers
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-安装xvfb:c33352843d2370512fb8e3c681b7c165&#34;&gt;2.安装Xvfb&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;yum install Xvfb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：绘制图形好像默认使用 X11，但是安装过程中遇到了各种麻烦，最后尝试了这个，能够正常显示。&lt;/p&gt;

&lt;h4 id=&#34;3-安装shiny:c33352843d2370512fb8e3c681b7c165&#34;&gt;3.安装Shiny&lt;/h4&gt;

&lt;h5 id=&#34;3-1-安装shiny:c33352843d2370512fb8e3c681b7c165&#34;&gt;3.1 安装Shiny&lt;/h5&gt;

&lt;p&gt;R命令行下面安装Shiny的包。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&#39;shiny&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装过程中，会安装其他依赖的包。&lt;br /&gt;
如果你跟我一样，服务器不能连网络，那就必须下载好压缩包，再传到服务器上，从本地安装。&lt;br /&gt;
但是不在R命令行下，而是还要quit()退出来。&lt;br /&gt;
安装的命令长这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;R CMD INSTALL XXXXX.tar.gz 
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-2-安装shiny-server:c33352843d2370512fb8e3c681b7c165&#34;&gt;3.2 安装Shiny Server&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;yum install --nogpgcheck shiny-server-1.4.2.786-rh5-x86_64.rpm 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置文件路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/shiny-server/shiny-server.conf 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以把shiny包里面自带的10个例子，都拷贝到shiny-server的目录下去。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -R /opt/r/lib64/R/library/shiny/examples/* /srv/shiny-server/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是的，你以后所有的APP都要在/srv/shiny-server/目录下，然后在浏览器中通过这样的方式来访问：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:3838/目录名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外，启动／停止等命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;start shiny-server 
stop shiny-server 
restart shiny-server 
status shiny-server 
reload shiny-server #不中断服务的前提下 更新加载配置项
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时可以看下首页：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:3838/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;页面能够显示，但是绘图的部分好像报错了。&lt;/p&gt;

&lt;h4 id=&#34;4-绘图引擎:c33352843d2370512fb8e3c681b7c165&#34;&gt;4.绘图引擎&lt;/h4&gt;

&lt;h5 id=&#34;4-1-启动xvfb:c33352843d2370512fb8e3c681b7c165&#34;&gt;4.1 启动Xvfb&lt;/h5&gt;

&lt;p&gt;各种泪流满面啊，九牛二虎啊。之前安装一堆东西，企图使用X11，会报错：can&amp;rsquo;t start PNG device。&lt;br /&gt;
后来放弃X11，使用Xvfb。需要启动Xvfb。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Xvfb :3 -screen 1 1280x1024x24
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4-1-设置:c33352843d2370512fb8e3c681b7c165&#34;&gt;4.1 设置&lt;/h5&gt;

&lt;p&gt;ui.R需要加入下面这一行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sys.setenv(DISPLAY = &amp;quot;:3.1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问示例试试：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:3838/index.html 
http://localhost:3838/01_hello/ 
http://localhost:3838/02_text/
http://localhost:3838/03_reactivity/
http://localhost:3838/04_mpg/
http://localhost:3838/05_sliders/
http://localhost:3838/06_tabsets/
http://localhost:3838/07_widgets/
http://localhost:3838/08_html/
http://localhost:3838/09_upload/
http://localhost:3838/10_download/
http://localhost:3838/11_timer/
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;参照：&lt;a href=&#34;https://www.rstudio.com/products/shiny/shiny-server2/&#34;&gt;https://www.rstudio.com/products/shiny/shiny-server2/&lt;/a&gt;&lt;br /&gt;
日文版：&lt;a href=&#34;http://youngspring1.github.io/post/2016-03-26-shinyserver-jp/&#34;&gt;http://youngspring1.github.io/post/2016-03-26-shinyserver-jp/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>data.table 教程3（校对中）</title>
      <link>http://youngspring1.github.io/post/2016-03-22-datatable3/</link>
      <pubDate>Tue, 22 Mar 2016 23:58:42 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-22-datatable3/</guid>
      <description>

&lt;p&gt;目录：&lt;br /&gt;
1) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt;&lt;br /&gt;
2) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-21-datatable2/&#34;&gt;语义引用&lt;/a&gt;&lt;br /&gt;
3) 主键、基于快速二分法搜索的subset&lt;br /&gt;
4) [二次索引和自动索引]()&lt;br /&gt;
5) Efficient reshaping using data.tables&lt;/p&gt;

&lt;p&gt;原文地址：&lt;br /&gt;
1) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-intro-vignette.html&#34;&gt;Introduction to data.table&lt;/a&gt;&lt;br /&gt;
2) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html&#34;&gt;Reference semantics&lt;/a&gt;&lt;br /&gt;
3) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-keys-fast-subset.html&#34;&gt;Keys and fast binary search based subsets&lt;/a&gt;&lt;br /&gt;
4) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-secondary-indices-and-auto-indexing.html&#34;&gt;Secondary indices and auto indexing&lt;/a&gt;&lt;br /&gt;
5) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reshape.html&#34;&gt;Efficient reshaping using data.tables&lt;/a&gt;&lt;br /&gt;
6) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-faq.html&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本教程主要提供给那些已经熟悉data.table的语法、懂得subset行select列、知道如何添加／更新／删除列的人员学习。如果你对这些不熟悉，请学习上面两讲 &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt; 和 &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-21-datatable2/&#34;&gt;语义引用&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;数据:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;数据&lt;/h2&gt;

&lt;p&gt;我们继续使用上一讲中使用的航班信息flights。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights &amp;lt;- fread(&amp;quot;https://raw.githubusercontent.com/wiki/arunsrinivasan/    flights/NYCflights14/flights14.csv&amp;quot;)
flights
#         year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight
#      1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1
#      2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3
#      3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21
#      4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29
#      5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117
#     ---                                                                                      
# 253312: 2014    10  31     1459         1     1747       -30         0      UA  N23708   1744
# 253313: 2014    10  31      854        -5     1147       -14         0      UA  N33132   1758
# 253314: 2014    10  31     1102        -8     1311        16         0      MQ  N827MQ   3591
# 253315: 2014    10  31     1106        -4     1325        15         0      MQ  N511MQ   3592
# 253316: 2014    10  31      824        -5     1045         1         0      MQ  N813MQ   3599
#         origin dest air_time distance hour min
#      1:    JFK  LAX      359     2475    9  14
#      2:    JFK  LAX      363     2475   11  57
#      3:    JFK  LAX      351     2475   19   2
#      4:    LGA  PBI      157     1035    7  22
#      5:    JFK  LAX      350     2475   13  47
#     ---                                       
# 253312:    LGA  IAH      201     1416   14  59
# 253313:    EWR  IAH      189     1400    8  54
# 253314:    LGA  RDU       83      431   11   2
# 253315:    LGA  DTW       75      502   11   6
# 253316:    LGA  SDF      110      659    8  24
dim(flights)
# [1] 253316     17
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;介绍:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;在这一讲，我们会：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 介绍“主键”的概念，在参数i里面，设置并使用主键进行基于快速二分法搜索的subset。
* 学习如何将基于主键的subset，与参数i和by相结合，就像以前做的一样。
* 学习另外两个有用的参数 mult 和 nomatch
* 最后总结一下主键的优越性：基于快速二分法搜索的subset的表现，并和传统的vector scan approach对比。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-主键:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;1.主键&lt;/h2&gt;

&lt;h4 id=&#34;a-什么是主键:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;a) 什么是主键&lt;/h4&gt;

&lt;p&gt;在&lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt;里，我们学习了如何在参数i里指定逻辑表达式和行号subset行，以及如何使用 order().在这一讲，我们会学习如何使用主键subset行，而且这难以置信的快。&lt;br /&gt;
但首先，我们从data.frame开始。所有的data.frame都有一个行名的属性。看下面这个data.frame DF。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set.seed(1L)
DF = data.frame(ID1 = sample(letters[1:2], 10, TRUE), 
                ID2 = sample(1:3, 10, TRUE),
                val = sample(10), 
                stringsAsFactors = FALSE,
                row.names = sample(LETTERS[1:10]))
DF
#   ID1 ID2 val
# C   a   3   5
# D   a   1   6
# E   b   2   4
# G   a   1   2
# B   b   1  10
# H   a   2   8
# I   b   1   9
# F   b   2   1
# J   a   3   7
# A   b   2   3

rownames(DF)
#  [1] &amp;quot;C&amp;quot; &amp;quot;D&amp;quot; &amp;quot;E&amp;quot; &amp;quot;G&amp;quot; &amp;quot;B&amp;quot; &amp;quot;H&amp;quot; &amp;quot;I&amp;quot; &amp;quot;F&amp;quot; &amp;quot;J&amp;quot; &amp;quot;A&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以用行名来subset一行，就像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DF[&amp;quot;C&amp;quot;, ]
#   ID1 ID2 val
# C   a   3   5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;行名，或多或少，算是一个data.frame的索引。然而，&lt;br /&gt;
1. 每行都有且只有一个行名。
但是，一个人可能有两个名字，比如名字和中间名。当编纂电话簿的时候，这就非常有用。
2. 而且行名必须是独一无二的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rownames(DF) = sample(LETTERS[1:5], 10, TRUE)
# Warning: non-unique values when setting &#39;row.names&#39;: &#39;C&#39;, &#39;D&#39;
# Error in `row.names&amp;lt;-.data.frame`(`*tmp*`, value = value): duplicate &#39;row.names&#39; are not allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面我们来看看data.table吧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT = as.data.table(DF)
DT
#     ID1 ID2 val
#  1:   a   3   5
#  2:   a   1   6
#  3:   b   2   4
#  4:   a   1   2
#  5:   b   1  10
#  6:   a   2   8
#  7:   b   1   9
#  8:   b   2   1
#  9:   a   3   7
# 10:   b   2   3

rownames(DT)
#  [1] &amp;quot;1&amp;quot;  &amp;quot;2&amp;quot;  &amp;quot;3&amp;quot;  &amp;quot;4&amp;quot;  &amp;quot;5&amp;quot;  &amp;quot;6&amp;quot;  &amp;quot;7&amp;quot;  &amp;quot;8&amp;quot;  &amp;quot;9&amp;quot;  &amp;quot;10&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 行名被重置了。
* data.table从来不使用行名。既然data.table集成了data.frame，那它还是有行名这个属性的，但是从来不使用。马上我们就知道为什么了。
如果想保持行名，在调用 as.data.table()的时候指定 keep.rownames = TRUE，这回创建一个叫做 rn的列，并且将列名赋值给这一列。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而在data.table里，我们使用主键。主键是更有效的行名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;主键及其特性
* 我们可以对多个列设置主键，这些列可能是不同的类型－integer, numeric, character, factor, integer64等等。但还不支持list和complex。
* 不强制唯一性，也就是说，不同列的主键可以是一样的。既然行可以通过主键排序，那么排序的时候，具有同样主键的一些行，会被排在一起。
* 设置主键这个过程分两步：
  a.根据指定的列，对data.table重新排序，而且总是按升序排列。
  b.对于data.table，通过设置一个叫做 sorted 的属性，来把那些列标记为主键列。
  既然是排序，一个data.table最多只能有一个主键，因为它不能按照两种方法排序。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在教程接下来的部分，我们一直都是用航班信息 flights 来讲解。&lt;/p&gt;

&lt;h3 id=&#34;b-设置-获取-使用主键:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;b) 设置／获取／使用主键&lt;/h3&gt;

&lt;p&gt;－如何将 origin列设置为主键&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setkey(flights, origin)
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
# 2: 2014     1   1     1655        -5     2003       -17         0      AA  N5CFAA    172    EWR
# 3: 2014     1   1     1611       191     1910       185         0      AA  N471AA    300    EWR
# 4: 2014     1   1     1449        -1     1753        -2         0      AA  N4WNAA    320    EWR
# 5: 2014     1   1      607        -3      905       -10         0      AA  N5DMAA   1205    EWR
# 6: 2014     1   1      949         4     1243       -17         0      AA  N491AA   1223    EWR
#    dest air_time distance hour min
# 1:  LAX      339     2454   18  24
# 2:  MIA      161     1085   16  55
# 3:  DFW      214     1372   16  11
# 4:  DFW      214     1372   14  49
# 5:  MIA      154     1085    6   7
# 6:  DFW      215     1372    9  49

## alternatively we can provide character vectors to the function &#39;setkeyv()&#39;
# setkeyv(flights, &amp;quot;origin&amp;quot;) # useful to program with
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 你可以给函数setkey() 传入列名作为参数，不需要引号。这在交互式使用的时候特别方便。
* 换一种方式，你可以给函数setkeyv() 传一个字符型的向量，这个向量里保存的是列名。这在把列作为参数传给一个新创建的函数，来设置主键的时候特别方便。
* 注意，我们不需要将结果赋值给一个变量。这是因为，setkey() 和 setkeyv()可以直接更新输入的data.table，就和上一讲中的操作符&amp;quot;:=&amp;quot;一样。它们没有返回值。
* 现在这个data.table已经按照我们提供的 origin列重新排序了。虽然是重新排序，但我们只需要请求和data.table的行数等长的一列这么大的内存空间。你看，又节省内存开销了。
* 你也可以在创建data.table的时候，调用函数data.table() 的参数 key=，直接设置主键，参数key的值是列名的字符型向量。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set* and :=:
在data.table里，操作符&amp;quot;:=&amp;quot;和所有的以set开头函数（比如setkey,setorder,setname等）一样，它们都会更新输入的原数据。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦将某一列设置成data.table的主键，就可以在参数i里指定 .()来subset那些主键了。回忆一下，.()就是 list()的别名。&lt;/p&gt;

&lt;p&gt;－使用主键origin 来subset所有origin是&amp;rdquo;JFK&amp;rdquo;的行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[.(&amp;quot;JFK&amp;quot;)]
#        year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
#     1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
#     2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
#     3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
#     4: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
#     5: 2014     1   1     2133        -2       37       -18         0      AA  N323AA    185    JFK
#    ---                                                                                             
# 81479: 2014    10  31     1705        -4     2024       -21         0      UA  N596UA    512    JFK
# 81480: 2014    10  31     1827        -2     2133       -37         0      UA  N568UA    514    JFK
# 81481: 2014    10  31     1753         0     2039       -33         0      UA  N518UA    535    JFK
# 81482: 2014    10  31      924        -6     1228       -38         0      UA  N512UA    541    JFK
# 81483: 2014    10  31     1124        -6     1408       -38         0      UA  N590UA    703    JFK
#        dest air_time distance hour min
#     1:  LAX      359     2475    9  14
#     2:  LAX      363     2475   11  57
#     3:  LAX      351     2475   19   2
#     4:  LAX      350     2475   13  47
#     5:  LAX      338     2475   21  33
#    ---                                
# 81479:  SFO      337     2586   17   5
# 81480:  SFO      344     2586   18  27
# 81481:  LAX      320     2475   17  53
# 81482:  SFO      343     2586    9  24
# 81483:  LAX      323     2475   11  24

## alternatively
# flights[J(&amp;quot;JFK&amp;quot;)] (or) flights[list(&amp;quot;JFK&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 因为已经将主键设置为 origin列了，所以只要直接指定&amp;quot;JFK&amp;quot;就可以了。这里 .()用来在data.table的主键（也就是flights 的 origin列）里，查找&amp;quot;JFK&amp;quot;。
* 首先，满足&amp;quot;JFK&amp;quot;条件的行的索引都被获取到。然后，这些行的哪些信息是必要的呢。既然参数j里没有指定任何表达式，这些行的所有列都被返回了。
* 如果主键是字符型的列，那么可以省略 .()，就像用行名subset一个data.frame的行的时候。
flights[&amp;quot;JFK&amp;quot;]              ## same as flights[.(&amp;quot;JFK&amp;quot;)]

* 我们可以根据需要指定多个值
flights[c(&amp;quot;JFK&amp;quot;, &amp;quot;LGA&amp;quot;)]    ## same as flights[.(c(&amp;quot;JFK&amp;quot;, &amp;quot;LGA&amp;quot;))]
这返回所有 origin列是“JFK” 或者 “LGA”的所有行。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－如何获得被设置为data.table的主键的那一列的列名
使用函数 key()。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;key(flights)
# [1] &amp;quot;origin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 函数 key() 返回主键列名的字符型向量。
* 如果data.table没有设置过主键，返回 NULL。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-主键和多个列:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;c) 主键和多个列&lt;/h4&gt;

&lt;p&gt;主键是更有效的行名。我们可以将多个列设置为主键，它们可以是不同的类型。
－如何将 origin列 和 dest列 都设置为主键&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setkey(flights, origin, dest)
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   2      724        -2      810       -25         0      EV  N11547   4373    EWR
# 2: 2014     1   3     2313        88        9        79         0      EV  N18120   4470    EWR
# 3: 2014     1   4     1526       220     1618       211         0      EV  N11184   4373    EWR
# 4: 2014     1   4      755        35      848        19         0      EV  N14905   4551    EWR
# 5: 2014     1   5      817        47      921        42         0      EV  N19966   4470    EWR
# 6: 2014     1   5     2301        66        2        62         0      EV  N19966   4682    EWR
#    dest air_time distance hour min
# 1:  ALB       30      143    7  24
# 2:  ALB       29      143   23  13
# 3:  ALB       32      143   15  26
# 4:  ALB       32      143    7  55
# 5:  ALB       26      143    8  17
# 6:  ALB       31      143   23   1

## or alternatively
# setkeyv(flights, c(&amp;quot;origin&amp;quot;, &amp;quot;dest&amp;quot;)) # provide a character vector of column names

key(flights)
# [1] &amp;quot;origin&amp;quot; &amp;quot;dest&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* data.table先按 origin列 排序，再按 dest列 排序。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－subset所有满足条件 origin是&amp;rdquo;JFK&amp;rdquo;、dest是&amp;rdquo;MIA&amp;rdquo;的行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[.(&amp;quot;JFK&amp;quot;, &amp;quot;MIA&amp;quot;)]
#       year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
#    1: 2014     1   1     1509        -1     1828       -17         0      AA  N5FJAA    145    JFK
#    2: 2014     1   1      917         7     1227        -8         0      AA  N5DWAA   1085    JFK
#    3: 2014     1   1     1227         2     1534        -1         0      AA  N635AA   1697    JFK
#    4: 2014     1   1      546         6      853         3         0      AA  N5CGAA   2243    JFK
#    5: 2014     1   1     1736         6     2043       -12         0      AA  N397AA   2351    JFK
#   ---                                                                                             
# 2746: 2014    10  31     1659        -1     1956       -22         0      AA  N5FNAA   2351    JFK
# 2747: 2014    10  31      826        -3     1116       -20         0      AA  N5EYAA   1085    JFK
# 2748: 2014    10  31      647         2      941       -17         0      AA  N5BTAA   1101    JFK
# 2749: 2014    10  31      542        -3      834       -12         0      AA  N3ETAA   2299    JFK
# 2750: 2014    10  31     1944        29     2232         4         0      AA  N5FSAA   2387    JFK
#       dest air_time distance hour min
#    1:  MIA      161     1089   15   9
#    2:  MIA      166     1089    9  17
#    3:  MIA      164     1089   12  27
#    4:  MIA      157     1089    5  46
#    5:  MIA      154     1089   17  36
#   ---                                
# 2746:  MIA      148     1089   16  59
# 2747:  MIA      146     1089    8  26
# 2748:  MIA      150     1089    6  47
# 2749:  MIA      150     1089    5  42
# 2750:  MIA      146     1089   19  44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这里发生了什么事？
* 理解内部的处理步骤很重要。首先，用&amp;quot;JFK&amp;quot;和第一个主键 origin列匹配；然后，在匹配上的这些行里，用“MIA”和第二个主键 dest列匹配，这样来获取所有符合这两个条件的行的索引。
* 既然我们没有指定参数j，那就会返回所有符合上面索引的行。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－subset所有仅仅满足条件dest是&amp;rdquo;MIA&amp;rdquo;的行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[.(unique(origin), &amp;quot;MIA&amp;quot;)]
#       year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
#    1: 2014     1   1     1655        -5     2003       -17         0      AA  N5CFAA    172    EWR
#    2: 2014     1   1      607        -3      905       -10         0      AA  N5DMAA   1205    EWR
#    3: 2014     1   1     1125        -5     1427        -8         0      AA  N3AGAA   1623    EWR
#    4: 2014     1   1     1533        43     1840        42         0      UA  N491UA    244    EWR
#    5: 2014     1   1     2130        60       29        49         0      UA  N476UA    308    EWR
#   ---                                                                                             
# 9924: 2014    10  31     1348       -11     1658        -8         0      AA  N3AMAA   2283    LGA
# 9925: 2014    10  31      950        -5     1257       -11         0      AA  N3LFAA   2287    LGA
# 9926: 2014    10  31      658        -2     1017        10         0      AA  N3HNAA   2451    LGA
# 9927: 2014    10  31     1913        -2     2212       -16         0      AA  N3LFAA   2455    LGA
# 9928: 2014    10  31     1530         1     1839       -11         0      US  N768US   1715    LGA
#       dest air_time distance hour min
#    1:  MIA      161     1085   16  55
#    2:  MIA      154     1085    6   7
#    3:  MIA      157     1085   11  25
#    4:  MIA      155     1085   15  33
#    5:  MIA      162     1085   21  30
#   ---                                
# 9924:  MIA      157     1096   13  48
# 9925:  MIA      150     1096    9  50
# 9926:  MIA      156     1096    6  58
# 9927:  MIA      156     1096   19  13
# 9928:  MIA      164     1096   15  30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这里发生了什么事？
* 回忆一下刚刚讲的处理步骤。首先，找到满足第一个主键origin列的条件的行；然后在这个结果中，找到满足第二个主键dest列是“MIA”的行。我们不能简单地事先跳过第一个主键列。因此，我们必须通过主键 origin列，获得它所有可能的取值。
* “MIA”会被自动补足成跟 unique(origin) 同样的长度，也就是3。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-和参数j-参数by一起使用:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;2. 和参数j、参数by一起使用&lt;/h2&gt;

&lt;p&gt;到目前为止，我们学习的都是同样的概念，也就是通过参数i取得行，只是使用了主键这种新的方法。那么同样的，我们在参数j和参数by里面使用主键，也没什么大惊小怪的。我们通过几个例子来说明。&lt;/p&gt;

&lt;h4 id=&#34;a-在参数j里面select:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;a) 在参数j里面select&lt;/h4&gt;

&lt;p&gt;－返回符合 origin = &amp;ldquo;LGA&amp;rdquo; 和 dest = &amp;ldquo;TPA&amp;rdquo;这两个条件的 arr_delay列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;key(flights)
# [1] &amp;quot;origin&amp;quot; &amp;quot;dest&amp;quot;
flights[.(&amp;quot;LGA&amp;quot;, &amp;quot;TPA&amp;quot;), .(arr_delay)]
#       arr_delay
#    1:         1
#    2:        14
#    3:       -17
#    4:        -4
#    5:       -12
#   ---          
# 1848:        39
# 1849:       -24
# 1850:       -12
# 1851:        21
# 1852:       -11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 通过基于主键的subset，我们获得了满足 origin == &amp;quot;LGA&amp;quot; 和 dest == “TPA”这两个条件的行索引。
* 现在我们已经获得了这些行的索引，而参数j只请求了 arr_delay列。那么我们简单地从这些行索引中选取 arr_delay列，就像我们在第一讲中做的那样。
* 同以前一样，我们也可以指定 with = FALSE：
flights[.(&amp;quot;LGA&amp;quot;, &amp;quot;TPA&amp;quot;), &amp;quot;arr_delay&amp;quot;, with=FALSE]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-chaining表达式:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;b) Chaining表达式&lt;/h4&gt;

&lt;p&gt;－在上面的基础上，将结果用chaining表达式按降序排列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[.(&amp;quot;LGA&amp;quot;, &amp;quot;TPA&amp;quot;), .(arr_delay)][order(-arr_delay)]
#       arr_delay
#    1:       486
#    2:       380
#    3:       351
#    4:       318
#    5:       300
#   ---          
# 1848:       -40
# 1849:       -43
# 1850:       -46
# 1851:       -48
# 1852:       -49
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-在参数j里运算:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;c) 在参数j里运算&lt;/h4&gt;

&lt;p&gt;－找出符合 origin = &amp;ldquo;LGA&amp;rdquo; 和 dest = &amp;ldquo;TPA&amp;rdquo;这两个条件的航班的最大到达延误时间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[.(&amp;quot;LGA&amp;quot;, &amp;quot;TPA&amp;quot;), max(arr_delay)]
# [1] 486
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 注意一下，这个结果(486)，就是b)的结果的第一行的值。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-在参数j里使用操作符-来sub-assign:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;d) 在参数j里使用操作符&amp;rdquo;:=&amp;ldquo;来sub-assign&lt;/h4&gt;

&lt;p&gt;我们已经在第二讲&lt;a href=&#34;http://youngspring1.github.io/post/2016-03-21-datatable2/&#34;&gt;语义引用&lt;/a&gt;里学习了几个例子了。现在来看看filghts里的 hours列。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get all &#39;hours&#39; in flights
flights[, sort(unique(hour))]
#  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，hour列有25种不同的取值。但是0点和24点应该是一样的，我们来把24点全部替换成0点。这次我们用主键来做。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setkey(flights, hour)
key(flights)
# [1] &amp;quot;hour&amp;quot;
flights[.(24), hour := 0L]
key(flights)
# NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们首先将 hour列设置为主键。这会将flights按照 hour列重新排序，并且将 hour列标记为主键。
* 现在我们用 .()标记对hour列来subset。我们subset所有值为24的行的索引。
* 对于这些行，我们将主键列的值替换为0.
* 既然我们替换了主键列的值，flights也不再按照 hour列排序了。因此，主键被自动去除了，它被设置为NULL。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，flights的hour列里，应该没有24了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[, sort(unique(hour))]
#  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;e-用参数by聚合:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;e) 用参数by聚合&lt;/h4&gt;

&lt;p&gt;我们先将 origin列 和 dest列设置为主键。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setkey(flights, origin, dest)
key(flights)
# [1] &amp;quot;origin&amp;quot; &amp;quot;dest&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－获取每个月从“JFK”起飞的航班的最大起飞延误时间，按月排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[&amp;quot;JFK&amp;quot;, max(dep_delay), keyby=month]
head(ans)
#    month   V1
# 1:     1  881
# 2:     2 1014
# 3:     3  920
# 4:     4 1241
# 5:     5  853
# 6:     6  798
key(ans)
# [1] &amp;quot;month&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们对主键 origin列进行subset，得到了所有起飞机场是“JFK”的行索引。
* 现在我们已经得到这些行的索引了，我们只需要两列－用来分组的month列，和用来计算每组最大值的dep_delay列。data.table的查询都被优化过了，因此在参数i取得的行的基础上，再subset这两列，效率和内存开销都很可观。
* 在subset的时候，我们按month分组，再计算dep_delay列的最大值。
* 我们使用参数keyby来自动将month设置为结果的主键。现在我们理解了为什么叫keyby吧。它使得结果不仅按month列排序，而且将month设置为主键。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-另外两个参数mult和nomatch:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;3. 另外两个参数mult和nomatch&lt;/h2&gt;

&lt;h4 id=&#34;a-参数mult:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;a) 参数mult&lt;/h4&gt;

&lt;p&gt;对于每次查询，我们可以通过参数mult，指定所有符合条件的行“all”都被返回，还是只返回第一行“first”或者最后一行“last”。默认是所有的行“all”。&lt;br /&gt;
－获取符合origin = &amp;ldquo;JFK&amp;rdquo; 且 dest = &amp;ldquo;MIA&amp;rdquo;的数据的第一行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[.(&amp;quot;JFK&amp;quot;, &amp;quot;MIA&amp;quot;), mult=&amp;quot;first&amp;quot;]
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      546         6      853         3         0      AA  N5CGAA   2243    JFK
#    dest air_time distance hour min
# 1:  MIA      157     1089    5  46
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－获取符合origin = &amp;ldquo;LGA&amp;rdquo;或&amp;rdquo;JFK&amp;rdquo;或&amp;rdquo;EWR&amp;rdquo; 且 dest = &amp;ldquo;XNA&amp;rdquo;的数据的最后一行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[.(c(&amp;quot;LGA&amp;quot;, &amp;quot;JFK&amp;quot;, &amp;quot;EWR&amp;quot;), &amp;quot;XNA&amp;quot;), mult=&amp;quot;last&amp;quot;]
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     5  23     1803       163     2003       148         0      MQ  N515MQ   3553    LGA
# 2:   NA    NA  NA       NA        NA       NA        NA        NA      NA      NA     NA    JFK
# 3: 2014     2   3     1208       231     1516       268         0      EV  N14148   4419    EWR
#    dest air_time distance hour min
# 1:  XNA      158     1147   18   3
# 2:  XNA       NA       NA   NA  NA
# 3:  XNA      184     1131   12   8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* JFK”, “XNA”不匹配flights的任何一条数据，因此返回 NA。
* 再强调一下，参数i里查询语句的第二个主键dest列，&amp;quot;XNA&amp;quot;会被自动补足成跟第一个主键的取值等长，也就是3。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-参数nomatch:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;b) 参数nomatch&lt;/h4&gt;

&lt;p&gt;我们可以通过参数nomatch，指定在没有找到符合条件的数据的情况下，是返回NA呢，还是跳过（不返回）。&lt;br /&gt;
－跟前一个例子一样，选取能找到的数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[.(c(&amp;quot;LGA&amp;quot;, &amp;quot;JFK&amp;quot;, &amp;quot;EWR&amp;quot;), &amp;quot;XNA&amp;quot;), mult=&amp;quot;last&amp;quot;, nomatch = 0L]
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     5  23     1803       163     2003       148         0      MQ  N515MQ   3553    LGA
# 2: 2014     2   3     1208       231     1516       268         0      EV  N14148   4419    EWR
#    dest air_time distance hour min
# 1:  XNA      158     1147   18   3
# 2:  XNA      184     1131   12   8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* nomatch的默认是是NA。设置 nomatch = 0L 跳过哪些不存在的数据。
* JFK”, “XNA”不匹配flights的任何一条数据，因此就被跳过了。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-二分法搜索-vs-向量扫描:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;4. 二分法搜索 vs 向量扫描&lt;/h2&gt;

&lt;p&gt;到目前为止，我们学习了如何设置和使用主键来subset。但是它的优点是什么呢？举个例子，除了这么做：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# key by origin,dest columns
flights[.(&amp;quot;JFK&amp;quot;, &amp;quot;MIA&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们还可以这样做：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; dest == &amp;quot;MIA&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个显而易见的优点是，看上去更短。但是它的优点可不只是这个，事实上，基于二分法搜索的subset非常快速。&lt;/p&gt;

&lt;h4 id=&#34;a-二分法搜索:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;a) 二分法搜索&lt;/h4&gt;

&lt;p&gt;为了说明，我们创建一个有两千万行、三列的样本数据，将它的主键设置为x列和y列。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set.seed(2L)
N = 2e7L
DT = data.table(x = sample(letters, N, TRUE), 
                y = sample(1000L, N, TRUE), 
                val=runif(N), key = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;))
print(object.size(DT), units=&amp;quot;Mb&amp;quot;)
# 381.5 Mb

key(DT)
# [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DT大约有 380 MB。这不算特别大，但是足够我们体现二分法搜索的优点了。&lt;br /&gt;
用第一讲&lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt;我们学过的知识，我们可以subset 那些 x = &amp;ldquo;g&amp;rdquo; 和 y = 877 的行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## (1) Usual way of subsetting - vector scan approach
t1 &amp;lt;- system.time(ans1 &amp;lt;- DT[x == &amp;quot;g&amp;quot; &amp;amp; y == 877L])
t1
#    user  system elapsed 
#   0.871   0.022   0.919
head(ans1)
#    x   y       val
# 1: g 877 0.3946652
# 2: g 877 0.9424275
# 3: g 877 0.7068512
# 4: g 877 0.6959935
# 5: g 877 0.9673482
# 6: g 877 0.4842585
dim(ans1)
# [1] 761   3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们用主键来试着做一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## (2) Subsetting using keys
t2 &amp;lt;- system.time(ans2 &amp;lt;- DT[.(&amp;quot;g&amp;quot;, 877L)])
t2
#    user  system elapsed 
#   0.001   0.000   0.002
head(ans2)
#    x   y       val
# 1: g 877 0.3946652
# 2: g 877 0.9424275
# 3: g 877 0.7068512
# 4: g 877 0.6959935
# 5: g 877 0.9673482
# 6: g 877 0.4842585
dim(ans2)
# [1] 761   3

identical(ans1$val, ans2$val)
# [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(2)比(1)快了460倍！&lt;/p&gt;

&lt;h4 id=&#34;b-为什么用主键subset能这么快:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;b) 为什么用主键subset能这么快?&lt;/h4&gt;

&lt;p&gt;为了理解这些，我们先看第一种方法(1)向量扫描。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;向量扫描
* 在所有两千条数据中，逐行搜索 x列里值为“g”的行。这会生成一个有两千行的逻辑向量，根据和x列的批评结果，它每个元素的取值可能是TRUE, FALSE 以及 NA。
* 相似的，在所有两千条数据中，逐行搜索 y列里值为“877”的行，再保存在另一个逻辑向量里面。
* 操作符&amp;quot;&amp;amp;&amp;quot;对上面两个逻辑向量进行“且”运算，返回结果为TRUE的行
这就是所谓的“向量扫描”。效率非常低，特别是数据量很大、需要重复subset的时候。因为它每次不得不对整个数据全盘扫描。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们开看看第二种方法(2)二分法搜索。回忆一下前面“a)什么是主键”里的定义，根据主键列重新排序。既然数据被排序了，我们就不需要再对整个数据进行扫描。我们用二分法搜索的时间开销是 O(log n)，而向量扫描的时间开销是 O(n)，其中n是data.table的行数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;二分法搜索
这里有一个简单的示例。看看下面这组排过序的数字：
1, 5, 10, 19, 22, 23, 30
假设我们希望找到数字1的位置，用二分法搜索（因为这组数字是排过序的），我们是这么做的：
* 从中间的数开始，它是19，不是1，而且 1&amp;lt;19。
* 既然我们要找的数字1小于19，那它应该排在19前面。所以我们可以无视19后面的那一半数据，因为它们都大于19.
* 现在我们的数据只剩下1, 5, 10。再找到中间的数5，它不是1，而且 1&amp;lt;5。
* 现在我们的数据只剩下1。符合条件。这就是我们要找的数。
相反的，向量扫描需要扫描所有的数字，在这个例子中是7。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显而易见的，我们每次搜索的时候，搜索量都是原先的一半。这就是为什么基于二分法搜索的subset是如此的快。&lt;br /&gt;
因为data.table的行在内存中是连续存储的，这种subset的操作也很节省缓存，这有利于处理速度。&lt;br /&gt;
另外，既然我们不需要创建超大（跟原数据有同样多的行）的逻辑向量，就能取得匹配的行的索引，这种subset也能节省内存。&lt;/p&gt;

&lt;h2 id=&#34;总结:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;在这一讲，我们学习了通过设置主键来subset行。设置主键使用了二分法搜索似的subset的操作变得惊人的快。特别的，我们学习了如何：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 设置主键，并使用主键subset行。
* 更快的在参数i里通过主键subset行的索引。
* 将主键和参数j、参数by一起使用。注意参数j和参数by的使用方法和以前一样。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们大概不需要用主键来进行聚合的操作，除非数据了极其巨大，使得我们需要重复地做很多次subset，这就会让效果变得很醒目。&lt;br /&gt;
然而，当连结两个data.table的时候，设置主键是必要的。这是下一讲的主题。&lt;br /&gt;
我们会详细讲解根据主键列来连结两个data.table。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R语言入门教程1（编写中）</title>
      <link>http://youngspring1.github.io/post/2016-03-22-R1/</link>
      <pubDate>Tue, 22 Mar 2016 23:20:42 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-22-R1/</guid>
      <description>

&lt;p&gt;最近用R语言改写一个现有的小工具，把学到的东西简单总结下。&lt;/p&gt;

&lt;p&gt;目录：&lt;br /&gt;
1) 数据结构&lt;br /&gt;
2) 输入输出&lt;br /&gt;
3) 图形初步&lt;br /&gt;
4) 基本数据管理&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;教程1介绍R语言中常用的几种数据结构。&lt;/p&gt;

&lt;h2 id=&#34;1-向量:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;1.向量&lt;/h2&gt;

&lt;h2 id=&#34;2-矩阵:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;2.矩阵&lt;/h2&gt;

&lt;h2 id=&#34;3-数组:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;3.数组&lt;/h2&gt;

&lt;h2 id=&#34;4-数据框:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;4.数据框&lt;/h2&gt;

&lt;h2 id=&#34;5-列表:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;5.列表&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>data.table 教程2（校对中）</title>
      <link>http://youngspring1.github.io/post/2016-03-21-datatable2/</link>
      <pubDate>Mon, 21 Mar 2016 19:56:45 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-21-datatable2/</guid>
      <description>

&lt;p&gt;目录：&lt;br /&gt;
1) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt;&lt;br /&gt;
2) 语义引用&lt;br /&gt;
3) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-22-datatable3/&#34;&gt;主键、基于二分法搜索的subset&lt;/a&gt;&lt;br /&gt;
4) [二次索引和自动索引]()&lt;br /&gt;
5) Efficient reshaping using data.tables&lt;/p&gt;

&lt;p&gt;原文地址：&lt;br /&gt;
1) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-intro-vignette.html&#34;&gt;Introduction to data.table&lt;/a&gt;&lt;br /&gt;
2) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html&#34;&gt;Reference semantics&lt;/a&gt;&lt;br /&gt;
3) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-keys-fast-subset.html&#34;&gt;Keys and fast binary search based subsets&lt;/a&gt;&lt;br /&gt;
4) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-secondary-indices-and-auto-indexing.html&#34;&gt;Secondary indices and auto indexing&lt;/a&gt;&lt;br /&gt;
5) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reshape.html&#34;&gt;Efficient reshaping using data.tables&lt;/a&gt;&lt;br /&gt;
6) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-faq.html&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本教程讨论data.table的语义引用，它允许通过引用来add/update/delete列，然后通过参数i和by结合。它主要给那些熟悉data.table语法、知道如何subset行／select列／分组的人使用。如果你对这些不熟悉，请学习上一讲 &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;数据:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;数据&lt;/h2&gt;

&lt;p&gt;我们继续使用上一讲中使用的航班信息flights。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights &amp;lt;- fread(&amp;quot;https://raw.githubusercontent.com/wiki/arunsrinivasan/    flights/NYCflights14/flights14.csv&amp;quot;)
flights
#         year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight
#      1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1
#      2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3
#      3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21
#      4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29
#      5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117
#     ---                                                                                      
# 253312: 2014    10  31     1459         1     1747       -30         0      UA  N23708   1744
# 253313: 2014    10  31      854        -5     1147       -14         0      UA  N33132   1758
# 253314: 2014    10  31     1102        -8     1311        16         0      MQ  N827MQ   3591
# 253315: 2014    10  31     1106        -4     1325        15         0      MQ  N511MQ   3592
# 253316: 2014    10  31      824        -5     1045         1         0      MQ  N813MQ   3599
#         origin dest air_time distance hour min
#      1:    JFK  LAX      359     2475    9  14
#      2:    JFK  LAX      363     2475   11  57
#      3:    JFK  LAX      351     2475   19   2
#      4:    LGA  PBI      157     1035    7  22
#      5:    JFK  LAX      350     2475   13  47
#     ---                                       
# 253312:    LGA  IAH      201     1416   14  59
# 253313:    EWR  IAH      189     1400    8  54
# 253314:    LGA  RDU       83      431   11   2
# 253315:    LGA  DTW       75      502   11   6
# 253316:    LGA  SDF      110      659    8  24
dim(flights)
# [1] 253316     17
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;介绍:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;在这一讲，我们会：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 简要讨论“语义引用”，然后比较操作符“:=”的两种不同的形式。
* 学习如何在参数j里面使用操作符“:=”来add/update/delete列，如何与参数i和by相结合。
* 了解操作符“:=”的副作用，并学习如何用 copy() 来避免这些副作用。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-语义引用:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;1. 语义引用&lt;/h2&gt;

&lt;p&gt;到目前为止，我们学习到的所有的操作都会生成一个新的数据集。接下来，我们会学习如何在原来数据集的基础上，添加／更新／删除那些已经存在的列。&lt;/p&gt;

&lt;h4 id=&#34;a-背景:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;a) 背景&lt;/h4&gt;

&lt;p&gt;在学习语义引用之前，我们先来看下面这个data.frame：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DF = data.frame(ID = c(&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;c&amp;quot;), a = 1:6, b = 7:12, c=13:18)
DF
#   ID a  b  c
# 1  b 1  7 13
# 2  b 2  8 14
# 3  b 3  9 15
# 4  a 4 10 16
# 5  a 5 11 17
# 6  c 6 12 18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当我们执行下面的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DF$c &amp;lt;- 18:13               # (1) -- replace entire column
# or
DF$c[DF$ID == &amp;quot;b&amp;quot;] &amp;lt;- 15:13 # (2) -- subassign in column &#39;c&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在R语言V3.1之前的版本里，上面这两种方法都会导致对整个data.frame的深度拷贝&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e5b9ad2772afb60de67bb09a99ffa4e1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e5b9ad2772afb60de67bb09a99ffa4e1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。而且还会拷贝多次&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e5b9ad2772afb60de67bb09a99ffa4e1:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e5b9ad2772afb60de67bb09a99ffa4e1:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。为了提高效率避免冗余操作，data.tabel使用了操作符&amp;rdquo;:=&amp;ldquo;。R里面本来就有定义了这个操作符，但却没有使用&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e5b9ad2772afb60de67bb09a99ffa4e1:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e5b9ad2772afb60de67bb09a99ffa4e1:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;br /&gt;
在R语言V3.1之前的版本里，方法(1)只做影子拷贝，处理性能有了很大提升。然而，方法(2)还是会做深度拷贝。这就意味着，对于同样的查询语句，想要选取的列越多，需要做的深度拷贝就越多。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;影子拷贝 vs 深度拷贝
影子拷贝，只是一份指向列的指针向量的拷贝，它会随着data.frame或者data.table的变化而变化。但在内存里，数据不是真的被复制了。   
深度拷贝，正相反，它会复制整个数据，并且保存在内存里。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用操作符&amp;rdquo;:=&amp;ldquo;，不管在R语言的什么版本里，不管是方法(1)还是方法(2)，都不会再拷贝。这是因为，操作符&amp;rdquo;:=&amp;ldquo;通过引用更新列。&lt;/p&gt;

&lt;h4 id=&#34;b-操作符:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;b) 操作符“:=”&lt;/h4&gt;

&lt;p&gt;在参数j中，操作符“:=”有两种使用方法：&lt;br /&gt;
a.左右等式的形式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[, c(&amp;quot;colA&amp;quot;, &amp;quot;colB&amp;quot;, ...) := list(valA, valB, ...)]

# when you have only one column to assign to you 
# can drop the quotes and list(), for convenience
DT[, colA := valA]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b.函数形式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[, `:=`(colA = valA, # valA is assigned to colA
      colB = valB, # valB is assigned to colB
      ...
)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;上面的两个例子只是用来说明使用的形式，并不是实际可以运行的代码示例。我们会在下一节中，用航班信息flight的data.table来举例说明。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 形式(a)比较容易编码，特别是，事先不知道需要被赋值的列的时候。
* 相对而言，形式(b)更加趁手，如果你愿意追加点注释😄。
* 操作符“:=”没有返回值。
* 既然参数j里面可以使用操作符“:=”，那么，就像上一讲中学习到的内容，我们可以和参数i和参数by一起，做些聚合的运算。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面两种形式里，注意我们没有把运算的结果赋值给一个变量。因为完全没必要。我们直接更新data.table。让我们通过一些例子来说明。&lt;br /&gt;
在接下来的教程里，我们对航班信息flight，这个data.table来示例。&lt;/p&gt;

&lt;h2 id=&#34;2-添加-更新-删除列:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;2. 添加／更新／删除列&lt;/h2&gt;

&lt;h4 id=&#34;a-添加列:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;a) 添加列&lt;/h4&gt;

&lt;p&gt;－如何对每次航班，添加 speed 和 total delay 两列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[, `:=`(speed = distance / (air_time/60), # speed in km/hr
           delay = arr_delay + dep_delay)]       # delay in minutes
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
# 4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29    LGA
# 5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
# 6: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
#    dest air_time distance hour min    speed delay
# 1:  LAX      359     2475    9  14 413.6490    27
# 2:  LAX      363     2475   11  57 409.0909    10
# 3:  LAX      351     2475   19   2 423.0769    11
# 4:  PBI      157     1035    7  22 395.5414   -34
# 5:  LAX      350     2475   13  47 424.2857     3
# 6:  LAX      339     2454   18  24 434.3363     4

## alternatively, using the &#39;LHS := RHS&#39; form
# flights[, c(&amp;quot;speed&amp;quot;, &amp;quot;delay&amp;quot;) := list(distance/(air_time/60), arr_delay + dep_delay)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们不需要将结果赋值给 flights。
* flights 现在包含了刚刚追加的两列。这就是我们说的“添加列”。
* 我们用函数形式，这样就可以在旁边写注释了。当然也可以用等式的形式。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-更新列-sub-assign:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;b) 更新列（sub-assign）&lt;/h4&gt;

&lt;p&gt;现在留意一下 fligths 里的 hour列。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get all &#39;hours&#39; in flights
flights[, sort(unique(hour))]
#  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，hour列有25种不同的取值。但是0点和24点应该是一样的，我们来把24点全部替换成0点。&lt;br /&gt;
－将 hour=24 替换成0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# subassign by reference
flights[hour == 24L, hour := 0L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 就像在上一讲中学习的一样，我们可以使用参数i 和 参数j里的操作符“:=”一起使用。
* 只有满足了参数i 中指定的条件 hour == 24L 的那些列，它们的值会被替换成0。
* 操作符“:=”没有返回值。有时候需要查看运行的结果，我们可以在查询语句的最后加一对方括号[]，来达到这个目的。
flights[hour == 24L, hour := 0L][]
#         year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight
#      1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1
#      2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3
#      3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21
#      4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29
#      5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117
#     ---                                                                                      
# 253312: 2014    10  31     1459         1     1747       -30         0      UA  N23708   1744
# 253313: 2014    10  31      854        -5     1147       -14         0      UA  N33132   1758
# 253314: 2014    10  31     1102        -8     1311        16         0      MQ  N827MQ   3591
# 253315: 2014    10  31     1106        -4     1325        15         0      MQ  N511MQ   3592
# 253316: 2014    10  31      824        -5     1045         1         0      MQ  N813MQ   3599
#         origin dest air_time distance hour min    speed delay
#      1:    JFK  LAX      359     2475    9  14 413.6490    27
#      2:    JFK  LAX      363     2475   11  57 409.0909    10
#      3:    JFK  LAX      351     2475   19   2 423.0769    11
#      4:    LGA  PBI      157     1035    7  22 395.5414   -34
#      5:    JFK  LAX      350     2475   13  47 424.2857     3
#     ---                                                      
# 253312:    LGA  IAH      201     1416   14  59 422.6866   -29
# 253313:    EWR  IAH      189     1400    8  54 444.4444   -19
# 253314:    LGA  RDU       83      431   11   2 311.5663     8
# 253315:    LGA  DTW       75      502   11   6 401.6000    11
# 253316:    LGA  SDF      110      659    8  24 359.4545    -4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们再来看下 hour列。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# check again for &#39;24&#39;
flights[, sort(unique(hour))]
#  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-删除列:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;c) 删除列&lt;/h4&gt;

&lt;p&gt;－删除 delay列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[, c(&amp;quot;delay&amp;quot;) := NULL]
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
# 4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29    LGA
# 5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
# 6: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
#    dest air_time distance hour min    speed
# 1:  LAX      359     2475    9  14 413.6490
# 2:  LAX      363     2475   11  57 409.0909
# 3:  LAX      351     2475   19   2 423.0769
# 4:  PBI      157     1035    7  22 395.5414
# 5:  LAX      350     2475   13  47 424.2857
# 6:  LAX      339     2454   18  24 434.3363

## or using the functional form
# flights[, `:=`(delay = NULL)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 将一列赋值为 NULL，就会删除那一列。删除立即生效。
* 使用左右等式的形式的时候，除了指定列名，我们也可以指定列号。但还是忘记吧，指定列名是个好的编码习惯。
* 为了方便，如果只需要删除一列，可以去掉 c(&amp;quot;&amp;quot;)，只指定列名，像这样：
flights[, delay := NULL]
这和上面的方法是等效的。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-和分组:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;d) “:=”和分组&lt;/h4&gt;

&lt;p&gt;我们已经在b)里面学习了如何跟参数i 一起使用，现在我们来学习如何跟参数by 一起使用。
－如何追加一列，用来保存某对起飞／到达机场间的最快飞行速度&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[, max_speed := max(speed), by=.(origin, dest)]
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
# 4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29    LGA
# 5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
# 6: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
#    dest air_time distance hour min    speed max_speed
# 1:  LAX      359     2475    9  14 413.6490  526.5957
# 2:  LAX      363     2475   11  57 409.0909  526.5957
# 3:  LAX      351     2475   19   2 423.0769  526.5957
# 4:  PBI      157     1035    7  22 395.5414  517.5000
# 5:  LAX      350     2475   13  47 424.2857  526.5957
# 6:  LAX      339     2454   18  24 434.3363  518.4507
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们用操作符“:=”追加了一列 max_speed。
* 和上一讲学习到的内容一样，我们将所有数据进行分组。对于每组数据，计算最快速度。对于一对机场，这个最快速度是唯一的。循环复制这个值到一个list，直到跟该组数据的行数一样多。航班信息flights会被就地更新，不会因拷贝浪费内存空间。
* 和上一讲学习到的内容一样，我们也可以对参数by指定一个字符型的向量，形式是这样：
by = c(&amp;quot;origin&amp;quot;, &amp;quot;dest&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;e-和复数列:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;e) “:=”和复数列&lt;/h4&gt;

&lt;p&gt;－如何再追加两列，用于保存每个月的最大起飞延误时间dep_delay 和到达延误时间arr_delay&lt;br /&gt;
小提示：要用到上一讲学习到的 .SD&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;in_cols  = c(&amp;quot;dep_delay&amp;quot;, &amp;quot;arr_delay&amp;quot;)
out_cols = c(&amp;quot;max_dep_delay&amp;quot;, &amp;quot;max_arr_delay&amp;quot;)
flights[, c(out_cols) := lapply(.SD, max), by = month, .SDcols = in_cols]
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
# 4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29    LGA
# 5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
# 6: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
#    dest air_time distance hour min    speed max_speed max_dep_delay max_arr_delay
# 1:  LAX      359     2475    9  14 413.6490  526.5957           973           996
# 2:  LAX      363     2475   11  57 409.0909  526.5957           973           996
# 3:  LAX      351     2475   19   2 423.0769  526.5957           973           996
# 4:  PBI      157     1035    7  22 395.5414  517.5000           973           996
# 5:  LAX      350     2475   13  47 424.2857  526.5957           973           996
# 6:  LAX      339     2454   18  24 434.3363  518.4507           973           996
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 为了更好的可读性，我们使用了左右等式的形式。我们事先保存了输入的列名到变量in_cols，作为 .SDcols的参数。我们还事先保存了输出的列名到变量out_cols，作为左边的表达式。
* 注意一下，我们在c)里面讲过，如果只需要追加一列，那么可以省略双引号，只指定列名。但是这里我们需要指定 c(out_cols) 或者 (out_cols)。 
* 左右等式的形式，允许我们操作复数的列。在右边的表达式里，为了对指定在 .SDcols 里的列计算最大值，我们使用了R的基础函数 lapply()。这些我们在上一讲中都学习过了。它返回有两个元素的list，包含每组的 dep_delay 和 arr_delay 这两列的最大值。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在进行下一节的学习之前，让我们删除刚刚追加的几列：speed, max_speed, max_dep_delay 和 max_arr_delay。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# RHS gets automatically recycled to length of LHS
flights[, c(&amp;quot;speed&amp;quot;, &amp;quot;max_speed&amp;quot;, &amp;quot;max_dep_delay&amp;quot;, &amp;quot;max_arr_delay&amp;quot;) := NULL]
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
# 4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29    LGA
# 5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
# 6: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
#    dest air_time distance hour min
# 1:  LAX      359     2475    9  14
# 2:  LAX      363     2475   11  57
# 3:  LAX      351     2475   19   2
# 4:  PBI      157     1035    7  22
# 5:  LAX      350     2475   13  47
# 6:  LAX      339     2454   18  24
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-和copy:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;3. “:=”和copy()&lt;/h2&gt;

&lt;p&gt;操作符“:=”会更新原数据。和我们之前学过的功能不同，有时候，我们希望更新原数据。但有时候，我们不想更新原数据，这种情况下，我们可以用函数 copy()。&lt;/p&gt;

&lt;h4 id=&#34;a-的副作用:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;a) “:=”的副作用&lt;/h4&gt;

&lt;p&gt;如果我们想创建一个函数，用于返回每个月的最快速度。但是此时，我们也想对 flights 追加一列 speed。可以像下面这样做：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo &amp;lt;- function(DT) {
  DT[, speed := distance / (air_time/60)]
  DT[, .(max_speed = max(speed)), by=month]
}
ans = foo(flights)
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
# 4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29    LGA
# 5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
# 6: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
#    dest air_time distance hour min    speed
# 1:  LAX      359     2475    9  14 413.6490
# 2:  LAX      363     2475   11  57 409.0909
# 3:  LAX      351     2475   19   2 423.0769
# 4:  PBI      157     1035    7  22 395.5414
# 5:  LAX      350     2475   13  47 424.2857
# 6:  LAX      339     2454   18  24 434.3363
head(ans)
#    month max_speed
# 1:     1  535.6425
# 2:     2  535.6425
# 3:     3  549.0756
# 4:     4  585.6000
# 5:     5  544.2857
# 6:     6  608.5714
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 注意一个新的列 speed 被追加到 flight 里了。这时因为我们用了操作符“:=”。既然 DT 和flights都指向内存中同一个对象，对 DT 的操作，也会对 flights 生效。
* 返回值 ans 包含了每月的最快速度。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-函数copy:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;b) 函数copy()&lt;/h4&gt;

&lt;p&gt;在前面一节，我们利用了操作符“:=”的副作用来更新原数据。但是不会一直希望这样又是，我们希望给函数传递data.table参数，使用操作符“:=”的功能，但是不想改变原数据。我们可以用函数 copy() 来做到这一点。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;函数 copy() 对输入参数进行深度拷贝，因此对副本做的所有更新操作，都不会对原数据生效。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;函数 copy() 有两个不可或缺的特点：&lt;br /&gt;
1.和前一节内容的情形相反，我们可能不希望传递的参数被修改。举个例子，考虑前一节中，我们不想修改 flights的内容。&lt;br /&gt;
我们先删掉前一节中，追加的 speed列：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[, speed := NULL]   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，我们可以像下面这样做：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo &amp;lt;- function(DT) {
  DT &amp;lt;- copy(DT)                             ## deep copy
  DT[, speed := distance / (air_time/60)]    ## doesn&#39;t affect &#39;flights&#39;
  DT[, .(max_speed = max(speed)), by=month]
}
ans &amp;lt;- foo(flights)
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
# 4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29    LGA
# 5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
# 6: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
#    dest air_time distance hour min
# 1:  LAX      359     2475    9  14
# 2:  LAX      363     2475   11  57
# 3:  LAX      351     2475   19   2
# 4:  PBI      157     1035    7  22
# 5:  LAX      350     2475   13  47
# 6:  LAX      339     2454   18  24
head(ans)
#    month max_speed
# 1:     1  535.6425
# 2:     2  535.6425
# 3:     3  549.0756
# 4:     4  585.6000
# 5:     5  544.2857
# 6:     6  608.5714
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 使用函数 copy() 不会更新 flights。它现在不包含 speed列。
* 返回值 ans 包含了每月的最快速度。
然而，我们可以使用影子拷贝来代替深度拷贝，来大幅度提高这个操作的效率。事实上，我们希望在 Data.Table的V1.9.8的版本里提供这个功能。我们会在data.table的设计里面继续讨论这个内容。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Data.Table V1.9.8 相关资料：&lt;br /&gt;
&lt;a href=&#34;https://github.com/Rdatatable/data.table/issues/617&#34;&gt;Copy-on-:= at column level, DT[,list(&amp;hellip;)] shallow copy and add cols to shallow(DT, cols)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.当我们将列名保存在变量里的时候，比如：DT_n = names(DT)，然后再对 DT 添加／更新／删除列，操作符“:=”也会更新变量 DT_n，除非我们运行 copy(names(DT))。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT = data.table(x=1, y=2)
DT_n = names(DT)
DT_n
# [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot;

## add a new column by reference
DT[, z := 3]

## DT_n also gets updated
DT_n
# [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;

## use `copy()`
DT_n = copy(names(DT))
DT[, w := 4]

## DT_n doesn&#39;t get updated
DT_n
# [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;总结&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;操作符“:=”
* 操作符“:=”用于添加／更新／删除列。
* 我们也学习了如何跟参数i和参数by一起使用，就像在第一讲中学习的那样。同样，我们也可以使用 keyby，可以用方括号 [] 将操作连结起来，可以给参数by 指定表达式。
* 我们可以利用操作符“:=”更新原数据，也可以用函数 copy() 来避免更新原数据。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到目前为止，我们学习了好多参数j相关的知识，知道了参数i、参数j和参数by如何一起使用。下一讲[主键、基于二分法搜索的subset]()，我们将注意力回到参数i上，来做一些通过主键的超快速的排序。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e5b9ad2772afb60de67bb09a99ffa4e1:1&#34;&gt;&lt;a href=&#34;http://r.789695.n4.nabble.com/speeding-up-perception-td3640920.html#a3646694&#34;&gt;Speeding up perception&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e5b9ad2772afb60de67bb09a99ffa4e1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e5b9ad2772afb60de67bb09a99ffa4e1:2&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/23898969/is-data-really-copied-four-times-in-rs-replacement-functions&#34;&gt;Is data really copied four times in R&amp;rsquo;s replacement functions?&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e5b9ad2772afb60de67bb09a99ffa4e1:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e5b9ad2772afb60de67bb09a99ffa4e1:3&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/7033106/why-has-data-table-defined-rather-than-overloading&#34;&gt;Why has data.table defined := rather than overloading &amp;lt;-?&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e5b9ad2772afb60de67bb09a99ffa4e1:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>单车一周旅行计划</title>
      <link>http://youngspring1.github.io/post/2016-03-20-bike/</link>
      <pubDate>Sun, 20 Mar 2016 22:10:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-20-bike/</guid>
      <description>&lt;p&gt;D1：南京&amp;ndash;溧阳市  110km&lt;/p&gt;

&lt;p&gt;很容易&lt;/p&gt;

&lt;p&gt;D2：溧阳市&amp;ndash;安吉县 115km&lt;/p&gt;

&lt;p&gt;容易&lt;/p&gt;

&lt;p&gt;D3：安吉县&amp;ndash;太阳镇  105km&lt;/p&gt;

&lt;p&gt;如果走天荒坪，爬山，难&lt;/p&gt;

&lt;p&gt;如果绕过西天目，中等&lt;/p&gt;

&lt;p&gt;D4：太阳镇&amp;ndash;岛石镇 103km&lt;/p&gt;

&lt;p&gt;翻山，华浪线，难&lt;/p&gt;

&lt;p&gt;D5：岛石镇&amp;ndash;十字镇 130km&lt;/p&gt;

&lt;p&gt;走南极，宁国，中等&lt;/p&gt;

&lt;p&gt;（可以考虑走荆州公路提高难度）&lt;/p&gt;

&lt;p&gt;D6：十字镇&amp;ndash;南京  137km&lt;/p&gt;

&lt;p&gt;容易&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>转：某T的职级系统</title>
      <link>http://youngspring1.github.io/post/2016-03-15-career/</link>
      <pubDate>Tue, 15 Mar 2016 22:51:30 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-15-career/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;http://www.cyzone.cn/a/20140828/262150.html&#34;&gt;http://www.cyzone.cn/a/20140828/262150.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;腾讯的职级系统有26个职业通道，如果你是一个一张白纸只有素质没有任何职业能力的毕业生，可以从这个26个通道，比如行政、财务、设计、运维、开发、运营、产品…….的任何一个1-1级开始，修炼，打怪升级，直到千万年薪。如同一个完整的人生指引。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;横轴是26个职业通道，专业技能各不相同，纵轴是4个大层级。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以下是按照我的理解来写了。(直接抄原文会被企鹅摔着打的)。&lt;/p&gt;

&lt;p&gt;我觉得腾讯的职业四大层级，几乎就是人生发展的四大层级。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一层是动作执行层、第二层是任务执行层、第三层是战略管理层、第四层是战略决策层。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先说动作执行层。一个企业最多的就是这个层面的员工。或者每个人初入职场，都是从练好一个动作开始。比如，画原型，写代码，写稿子……&lt;/p&gt;

&lt;p&gt;而腾讯对动作执行层的要求是：按照品质要求，完成动作、优化效率。注意，没有品质要求的动作，毫无意义。用户体验的不是产品而是品质感。就像你去一个川餐馆吃鱼香肉丝，你感受到的是这家鱼香肉丝的品质。大厨的工作不单是保证把菜炒出来，更是要保证菜品在一个什么样的品质感里。所以麦当劳的桌子永远擦的干净，同样的人在另外一个餐馆未必达到这种清洁标准。因为麦当劳不是要求把桌子擦了，而是清晰地要求达到什么样的清洁品质。&lt;/p&gt;

&lt;p&gt;达成品质要求之后，在谈完成动作与优化效率。&lt;/p&gt;

&lt;p&gt;任务执行层。就是要把分配的任务及指标，拆解成动作。由不同人组合完成，或者一个团队次序完成。需要在整个过程中，控制人心，安排动作序列，并配置风险，保证完成任务，达成指标。几乎所有铁血创业者都是从这个层级冒出来的。&lt;/p&gt;

&lt;p&gt;战略管理层。就是大家永远不理解的那批副总。带兄弟痛快淋漓干活的都是总监。而副总，心累。他们需要根据战略决策，确定任务优先级，配置资源，鼓舞士气。保证战略方向不偏差。&lt;/p&gt;

&lt;p&gt;而最高的战略决策层，几乎就是个CEO的活。他需要有前瞻，推动相关资源方做出战略决策，并且获取战略资源。就像亮剑里的李云龙。在除了自己，什么都没有的情况，他可以沟通，说服。一个队伍打没了，马上再拉起一个队伍。只要他还要打下去。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四个层级的核心工作不同，对人的特性的核心需求也不同。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在动作执行层，才气很重要。&lt;/p&gt;

&lt;p&gt;在任务执行层，责任心，执行力的价值，远大于才气。甚至需要放弃自己的才气，把时间交给众多的兄弟，才能实现任务的完成。&lt;/p&gt;

&lt;p&gt;而一个人能否达到战略管理层，核心要考核的是：心力。心力是什么?就是无止无尽操心的能力。资源永远有限，战略常常在变，兄弟都是亲的，永远没人满意。所以，一堆人拉我去当副总，我都谢谢了。因为自己清楚，心力真心不足啊～&lt;/p&gt;

&lt;p&gt;战略决策层。愿力。其实我在《决策》那篇文章中谈过愿力的问题。没有愿景支撑的决策都是机会主义。一个人如果心中没有愿，那真是谁都帮不了他。看上去再大都是纸老虎。&lt;/p&gt;

&lt;p&gt;所以，人会在哪个层级呆着，度过一生，其实都是因为吃不了其他层级的苦。其实发展个人才气，在动作层呆着，是人生最舒适的选择。&lt;/p&gt;

&lt;p&gt;不过那些以才子自居的人，创业往往格外困难，因为在整个创业的战略确定到达成的过程里，最不值钱的，也就是才气。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>演化</title>
      <link>http://youngspring1.github.io/post/2016-03-15-evalution/</link>
      <pubDate>Tue, 15 Mar 2016 22:11:49 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-15-evalution/</guid>
      <description>&lt;p&gt;自古登堡以来，书籍因为其“不变”的特质，象征着稳定、专注、权威；而电子时代，amazon可以很方便地更新我手中kindle中的内容。&lt;br /&gt;
这是一个一直在变化的时代，我们也不用等待准备好了，才去做某件事情。&lt;br /&gt;
我们一直处在演化的过程中。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>data.table 教程1（校对中）</title>
      <link>http://youngspring1.github.io/post/2016-03-13-datatable1/</link>
      <pubDate>Sun, 13 Mar 2016 18:57:40 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-13-datatable1/</guid>
      <description>

&lt;p&gt;最近使用data.table这个增强包，来计算数据的聚合信息，比sql语句简单明了不是一点半点，于是想把data.table的资料翻译出来。&lt;/p&gt;

&lt;p&gt;目录：&lt;br /&gt;
1) data.table 介绍&lt;br /&gt;
2) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-21-datatable2/&#34;&gt;语义引用&lt;/a&gt;&lt;br /&gt;
3) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-22-datatable3/&#34;&gt;主键、基于二分法搜索的subset&lt;/a&gt;&lt;br /&gt;
4) [二次索引和自动索引]()&lt;br /&gt;
5) Efficient reshaping using data.tables&lt;/p&gt;

&lt;p&gt;原文地址：&lt;br /&gt;
1) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-intro-vignette.html&#34;&gt;Introduction to data.table&lt;/a&gt;&lt;br /&gt;
2) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html&#34;&gt;Reference semantics&lt;/a&gt;&lt;br /&gt;
3) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-keys-fast-subset.html&#34;&gt;Keys and fast binary search based subsets&lt;/a&gt;&lt;br /&gt;
4) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-secondary-indices-and-auto-indexing.html&#34;&gt;Secondary indices and auto indexing&lt;/a&gt;&lt;br /&gt;
5) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reshape.html&#34;&gt;Efficient reshaping using data.tables&lt;/a&gt;&lt;br /&gt;
6) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-faq.html&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本教程介绍data.table的语法，大概的形式，如何subset行，如何按列select／compute，如何分组聚合。熟悉data.frame的数据结构是有帮助的，不过不熟悉也没关系。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;使用data-table分析数据:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;使用data.table分析数据&lt;/h2&gt;

&lt;p&gt;支持操作数据的功能，例如subset、group、update、join等。&lt;br /&gt;
这些功能可以让我们：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 通过简洁一致的语法，实行想要的操作，达到目的。
* 从一系列函数到最终的分析，都没有将所有的操作都对应到函数的负担。能够流畅地执行分析。
* 精确地知道每步操作所需要的数据，内部自动优化操作，在运行速度和内存开销两方面都很有效果。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简要的讲，如果你对减小计算复杂度和计算时间有着迫切的需求，那么这个package就是为你量身打造的。data.table就是干这事儿的。我们通过这一系列教程，说明这些功能。&lt;/p&gt;

&lt;h2 id=&#34;数据:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;数据&lt;/h2&gt;

&lt;p&gt;在这个教程中，我们使用&lt;a href=&#34;https://github.com/arunsrinivasan/flights/wiki/NYC-Flights-2014-data&#34;&gt;NYC-flights14&lt;/a&gt;的数据。它包含了2014年纽约机场发出的所有航班信息。这份数据只有2014年1月到10月是公开的。&lt;br /&gt;
我们可以使用data.table的fread()函数，用下面的方式，快速直接读取航班数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights &amp;lt;- fread(&amp;quot;https://raw.githubusercontent.com/wiki/arunsrinivasan/    flights/NYCflights14/flights14.csv&amp;quot;)
flights
#         year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight
#      1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1
#      2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3
#      3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21
#      4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29
#      5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117
#     ---                                                                                      
# 253312: 2014    10  31     1459         1     1747       -30         0      UA  N23708   1744
# 253313: 2014    10  31      854        -5     1147       -14         0      UA  N33132   1758
# 253314: 2014    10  31     1102        -8     1311        16         0      MQ  N827MQ   3591
# 253315: 2014    10  31     1106        -4     1325        15         0      MQ  N511MQ   3592
# 253316: 2014    10  31      824        -5     1045         1         0      MQ  N813MQ   3599
#         origin dest air_time distance hour min
#      1:    JFK  LAX      359     2475    9  14
#      2:    JFK  LAX      363     2475   11  57
#      3:    JFK  LAX      351     2475   19   2
#      4:    LGA  PBI      157     1035    7  22
#      5:    JFK  LAX      350     2475   13  47
#     ---                                       
# 253312:    LGA  IAH      201     1416   14  59
# 253313:    EWR  IAH      189     1400    8  54
# 253314:    LGA  RDU       83      431   11   2
# 253315:    LGA  DTW       75      502   11   6
# 253316:    LGA  SDF      110      659    8  24
dim(flights)
# [1] 253316     17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既然整个教程我们都会使用这份数据，那你不妨先下载到你的电脑上，然后每次使用的时候再读取。&lt;/p&gt;

&lt;h2 id=&#34;介绍:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;在本章中，我们会学习下面两点：&lt;br /&gt;
1. 基础 － 什么是data.table，它的形式，如何subset行，如何select列，如何按列进行运算。&lt;br /&gt;
2. 聚合 － 按组聚合的效果。&lt;/p&gt;

&lt;h2 id=&#34;1-基础:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;1.基础&lt;/h2&gt;

&lt;h4 id=&#34;a-什么是data-table:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;a) 什么是data.table&lt;/h4&gt;

&lt;p&gt;data.table是R语言的一个包，它是对data.frames的增强。在上文（读取航班）“数据”的部分，我们通过函数fread()创建了一个data.table。我们也可以通过函数data.table()创建一个data.table，比如这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT = data.table(ID = c(&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;c&amp;quot;), a = 1:6, b = 7:12, c=13:18)
DT
#    ID a  b  c
# 1:  b 1  7 13
# 2:  b 2  8 14
# 3:  b 3  9 15
# 4:  a 4 10 16
# 5:  a 5 11 17
# 6:  c 6 12 18
class(DT$ID)
# [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们也可以通过as.data.table()将已经存在的对象转化成data.table。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注意：
* 不同于data.frames，字符型的列，不会被自动转化成因子。
* 行号后面有个冒号，用于隔开第一列的内容。
* 如果数据的条目超过了全局选项datatable.print.nrows所定义的数值（默认是100条），那么只会输出数据最开头和最末尾的5行。就如同上文（读取航班）“数据”的部分。

getOption(&amp;quot;datatable.print.nrows&amp;quot;)
# [1] 100

* data.table不能设置行的名称。我们会在第三讲中说明原因。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-形式-data-table增强了什么:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;b) 形式－data.table增强了什么&lt;/h4&gt;

&lt;p&gt;和data.frame相反，我们能做的可不仅仅局限于subset行或者select列。首先介绍下data.table的语法，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[i, j, by]

##   R:      i                 j        by
## SQL:  where   select | update  group by
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你有SQL语句的基础，那么你应该能马上明白data.table的语法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;语法是：
对于DT这个data.table，使用 i 来subset行，然后计算 j ，最后用 by 分组。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-subset行:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;c) subset行&lt;/h4&gt;

&lt;p&gt;－ 获取六月份所有从&amp;rdquo;JFK&amp;rdquo;机场起飞的航班&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L]
head(ans)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     6   1      851        -9     1205        -5         0      AA  N787AA      1    JFK
# 2: 2014     6   1     1220       -10     1522       -13         0      AA  N795AA      3    JFK
# 3: 2014     6   1      718        18     1014        -1         0      AA  N784AA      9    JFK
# 4: 2014     6   1     1024        -6     1314       -16         0      AA  N791AA     19    JFK
# 5: 2014     6   1     1841        -4     2125       -45         0      AA  N790AA     21    JFK
# 6: 2014     6   1     1454        -6     1757       -23         0      AA  N785AA    117    JFK
#    dest air_time distance hour min
# 1:  LAX      324     2475    8  51
# 2:  LAX      329     2475   12  20
# 3:  LAX      326     2475    7  18
# 4:  LAX      320     2475   10  24
# 5:  LAX      326     2475   18  41
# 6:  LAX      329     2475   14  54
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 通过data.frame的frame？，列可以像变量一样被引用。因此，我们不需要加上 flights$ 前缀，比如 flights$dest 和 flights$month，而是直接简单地引用 dest 和 month这两列。
* 满足 origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L 这两个条件的行会被抽出出来。既然我们没有指定其他的条件，一个包含原数据里面所有列的data.table会被返回。
* 语法里面[i,j,k]的逗号不是必须的，当然如果指定了逗号，比如 flights[dest == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L, ] 也是没问题的。但在data.frame里面，逗号却是必须的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 获取 flights 开头的两行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[1:2]
ans
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
#    dest air_time distance hour min
# 1:  LAX      359     2475    9  14
# 2:  LAX      363     2475   11  57
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们没有指定任何条件。行的索引已经自动提供给参数 i 了。因此，我们得到一个包含原数据 flight 里所有列的data.table（for 这些行的索引？）。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 排序（先按 origin列 的升序，再按 dest 的降序排列）
我们可以通过R语言的基础函数 order() 来完成这个功能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[order(origin, -dest)]
head(ans)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   5      836         6     1151        49         0      EV  N12175   4419    EWR
# 2: 2014     1   6      833         7     1111        13         0      EV  N24128   4419    EWR
# 3: 2014     1   7      811        -6     1035       -13         0      EV  N12142   4419    EWR
# 4: 2014     1   8      810        -7     1036       -12         0      EV  N11193   4419    EWR
# 5: 2014     1   9      833        16     1055         7         0      EV  N14198   4419    EWR
# 6: 2014     1  13      923        66     1154        66         0      EV  N12157   4419    EWR
#    dest air_time distance hour min
# 1:  XNA      195     1131    8  36
# 2:  XNA      190     1131    8  33
# 3:  XNA      179     1131    8  11
# 4:  XNA      184     1131    8  10
# 5:  XNA      181     1131    8  33
# 6:  XNA      188     1131    9  23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;内置的 order() 函数
* 我们可以对一个字符型的列，使用减号“-”，来实现降序排列。
* 另外，函数 order() 其实调用了data.table的快速基数排序函数 forder()，它比 base::order 快很多。这是一个说明它们基本区别的例子：

odt = data.table(col=sample(1e7))
(t1 &amp;lt;- system.time(ans1 &amp;lt;- odt[base::order(col)]))  ## uses order from base R
#    user  system elapsed 
#   8.610   0.056   8.708
(t2 &amp;lt;- system.time(ans2 &amp;lt;- odt[order(col)]))        ## uses data.table&#39;s forder
#    user  system elapsed 
#   0.526   0.024   0.553
(identical(ans1, ans2))
# [1] TRUE

order() 比 base::order 大约快了16倍。我们会在data.table的内部教程中讨论data.table快速排序的更多细节。
* 因此，使用我们熟悉的函数，就可以显著地提高分析效率。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-select列:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;d) select列&lt;/h4&gt;

&lt;p&gt;－ 选取 arr_delay 列，返回值是向量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, arr_delay]
head(ans)
# [1]  13  13   9 -26   1   0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 既然列可以作为变量被引用，我们可以直接引用我们想选取的列。
* 既然我们想选取所有的行，我们毋需指定参数 i。
* 返回了所有行的 arr_delay 列。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 选取 arr_delay 列，返回值是data.table&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, list(arr_delay)]
head(ans)
#    arr_delay
# 1:        13
# 2:        13
# 3:         9
# 4:       -26
# 5:         1
# 6:         0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们用 list() 把列名 arr_delay 包围起来，它可以确保返回值是data.table。正如前面一个例子，如果不这样做，返回值就是一个向量。
* data.table也允许用 .() 来包围列名，它是 list() 的别名，它们的效果是同样的。教程后面会使用 .() 来说明。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;只要参数 j 返回一个list，这个list的每一个元素都会被转换成结果data.table的一列。你马上就会发现，这个功能是多么强大。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 选取 arr_delay 列和 dep_delay 列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, .(arr_delay, dep_delay)]
head(ans)
#    arr_delay dep_delay
# 1:        13        14
# 2:        13        -3
# 3:         9         2
# 4:       -26        -8
# 5:         1         2
# 6:         0         4

## alternatively
# ans &amp;lt;- flights[, list(arr_delay, dep_delay)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 使用 .() 或者 list() 都可以。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 选取 arr_delay 列和 dep_delay 列，并把列名改为 delay_arr 和 delay_dep
既然 .() 是 list() 的别名，那么我们可以在创建 list 的时候对列命名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, .(delay_arr = arr_delay, delay_dep = dep_delay)]
head(ans)
#    delay_arr delay_dep
# 1:        13        14
# 2:        13        -3
# 3:         9         2
# 4:       -26        -8
# 5:         1         2
# 6:         0         4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就是这样。&lt;/p&gt;

&lt;h4 id=&#34;e-在参数j里运算:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;e) 在参数j里运算&lt;/h4&gt;

&lt;p&gt;－ 有多少航班完全没有延误&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, sum((arr_delay + dep_delay) &amp;lt; 0)]
ans
# [1] 141814
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;刚刚发生了什么？
* 参数 j 能做的，可不只是选取列这么简单，它能处理表达式，比如对列进行计算。这没什么大惊小怪的，因为列可以作为变量被引用嘛。所以，我们可以对这些变量调用函数。我们刚刚就是对两列求和(sum)了。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;f-在参数i里选取-在参数j里运算:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;f) 在参数i里选取，在参数j里运算&lt;/h4&gt;

&lt;p&gt;－ 在六月份，从&amp;rdquo;JFK&amp;rdquo;机场起飞的航班中，计算起飞和到达的平均延误时间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L, 
           .(m_arr=mean(arr_delay), m_dep=mean(dep_delay))]
ans
#       m_arr    m_dep
# 1: 5.839349 9.807884
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们首先在i参数里，找到所有符合 origin (机场)是&amp;quot;JFK&amp;quot;，并且 month (月份)是 6 这样条件的行。此时，我们还没有subset整个data.table。
* 现在，我们看看参数j，它只使用了两列。我们需要分别计算这两列的平均值 mean()。这个时候，我们才subset那些符合i参数里条件的列，然后计算它们的平均值。
因为这三个参数（i，j和by）都被指定在同一个方括号中，data.table能同时接受这三个参数，并在计算之前，选取最优的计算方法，而不是分步骤计算。所以，我们可以避免对整个data.table计算，同时，在计算速度和内存使用量这两方面，取得最优的效果。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 在六月份，从&amp;rdquo;JFK&amp;rdquo;机场起飞的航班一共有多少&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L, length(dest)]
ans
# [1] 8422
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;函数 length() 需要一个参数。我们只需要知道，结果里有多少行数据。我们可以使用任何一列作为函数 length() 的参数。&lt;br /&gt;
这一类的操作特别频繁，特别是在下一节里，当我们需要分组的时候，会讲到这个特别的符号 .N。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;特别的符号 .N 
.N 是一个内建的变量，它表示当前的分组中，对象的数目。在下一节，当它和 by 一起使用的时候，我们会发现它特别有用。还没有涉及到分组的时候，它只是简单地返回行的数目。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以，我们可以用 .N 来完成这个任务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L, .N]
ans
# [1] 8422
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 再说一遍，首先在i参数里，找到所有符合 origin (机场)是&amp;quot;JFK&amp;quot;，并且 month (月份)是 6 这样条件的行。   
* 在参数j里，我们只指定了 .N，其他什么也没指定。所以实际上我们什么也没做。我们只是返回了符合条件的行的数目（就是行的 length长度）。   
* 注意，我们没有用 list() 或者 .() 包围 .N，所以返回值是个向量。
我们也可以这样完成这个任务 nrow(flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L])。但是，这会从整个data.table里面subset符合条件的行，然后用 nrow() 返回行的数目，这是没有必要的，而且效率低下。我们会在 data.table的设计 这个教程里面说明这一点和其他的优化方法。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;g-太棒了-但我应该如何用参数j里面的名字引用列-就像在data-frame那样:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;g) 太棒了！但我应该如何用参数j里面的名字引用列（就像在data.frame那样）&lt;/h4&gt;

&lt;p&gt;你可以使用 with = FALSE 来引用列名。&lt;br /&gt;
－ 用data.frame的方式，选取 arr_delay 和 dep_delay 两列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;), with=FALSE]
head(ans)
#    arr_delay dep_delay
# 1:        13        14
# 2:        13        -3
# 3:         9         2
# 4:       -26        -8
# 5:         1         2
# 6:         0         4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个参数叫做 with，是根据 R里面的函数 with() 演变而来的。假设你有一个data.frame叫做 DF，想要subset所有符合 x&amp;gt;1 的行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DF = data.frame(x = c(1,1,1,2,2,3,3,3), y = 1:8)

## (1) normal way
DF[DF$x &amp;gt; 1, ] # data.frame needs that &#39;,&#39; as well
#   x y
# 4 2 4
# 5 2 5
# 6 3 6
# 7 3 7
# 8 3 8

## (2) using with
DF[with(DF, x &amp;gt; 1), ]
#   x y
# 4 2 4
# 5 2 5
# 6 3 6
# 7 3 7
# 8 3 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 在上面的 (2) using with里面，使用 with()，我们像变量一样使用DF的x列。
因此，在data.table里，我们设置 with=FALSE，使得我们不能再像变量一样引用列了，这被保存在“data.frame mode”中。
* 我们也可以使用 - 或者 ! 来排除列。比如：
## not run

# returns all columns except arr_delay and dep_delay
ans &amp;lt;- flights[, !c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;), with=FALSE]
# or
ans &amp;lt;- flights[, -c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;), with=FALSE]

* R语言从V1.9.5版开始，可以指定开始和结束的列名，比如通过指定 year:day 来选择前三列。
## not run

# returns year,month and day
ans &amp;lt;- flights[, year:day, with=FALSE]
# returns day, month and year
ans &amp;lt;- flights[, day:year, with=FALSE]
# returns all columns except year, month and day
ans &amp;lt;- flights[, -(year:day), with=FALSE]
ans &amp;lt;- flights[, !(year:day), with=FALSE]

这在交互式的工作中特别方便。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with=FALSE 是data.table的默认值，因为我们可以通过参数j表达式，来做更多的事，特别是接下来一节我们要讲到的，和 by 的联合。&lt;/p&gt;

&lt;h2 id=&#34;2-聚合:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;2.聚合&lt;/h2&gt;

&lt;p&gt;在前面一节，我们已经了解了参数i和j，知道了data.table的基本语法。在这一节，我们学习如何跟 by 相结合，做一些分组的操作。先来看看几个例子。&lt;/p&gt;

&lt;h4 id=&#34;a-用by分组:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;a) 用by分组&lt;/h4&gt;

&lt;p&gt;－ 如何获取每个机场起飞的航班数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, .(.N), by=.(origin)]
ans
#    origin     N
# 1:    JFK 81483
# 2:    LGA 84433
# 3:    EWR 87400

## or equivalently using a character vector in &#39;by&#39;
# ans &amp;lt;- flights[, .(.N), by=&amp;quot;origin&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们知道 .N 表示当前的分组中，对象的数目。先按照 origin 列分组，再用 .N 获取每组的数目。
* 通过 head(flights)，我们可以看到结果里面，机场是按照“JFK”, “LGA” 然后 “EWR” 的顺序排列的。原始数据里，被分组的那一列变量的顺序，也体现在结果里面。   
* 既然我们没有在参数j里面指定列名，那这一列就自然是 N 了。
* by 也接受一个包含列名的字符向量作为参数。这在写代码的时候特别有用，比如设计一个函数，它的参数是要被分组的列。
* 当参数j和by里面只有一列，我们可以省略 .()，这实在很方便。刚刚的任务我们可以这样做：
ans &amp;lt;- flights[, .N, by=origin]
ans
#    origin     N
# 1:    JFK 81483
# 2:    LGA 84433
# 3:    EWR 87400

只要允许，我们就会使用这种方便的形式。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何获取美航（carrier code代码是“AA”）在每个机场起飞的航班数
航空公司代码“AA”代表美航。每个航空公司的代码都是唯一的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by=origin]
ans
#    origin     N
# 1:    JFK 11923
# 2:    LGA 11730
# 3:    EWR  2649
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们首先通过参数i，指定表达式 carrier == &amp;quot;AA&amp;quot;，选取符合条件的行。
* 对于这些行，我们再按 origin 分组，获取每组的数目。再次声明，实际上没有列被重新创建，因为参数j表达式不需要获取列，因此在计算速度和内存使用量这两方面，取得最优的效果。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何获取美航在所有机场的起／降的数目&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by=.(origin,dest)]
head(ans)
#    origin dest    N
# 1:    JFK  LAX 3387
# 2:    LGA  PBI  245
# 3:    EWR  LAX   62
# 4:    JFK  MIA 1876
# 5:    JFK  SEA  298
# 6:    EWR  MIA  848

## or equivalently using a character vector in &#39;by&#39;
# ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by=c(&amp;quot;origin&amp;quot;, &amp;quot;dest&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 参数by 可以接受多个列。我们可以指定所有我们想分组的列。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何获取美航在所有机场的起／降的平均延误时间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, 
    .(mean(arr_delay), mean(dep_delay)), 
    by=.(origin, dest, month)]
ans
#      origin dest month         V1         V2
#   1:    JFK  LAX     1   6.590361 14.2289157
#   2:    LGA  PBI     1  -7.758621  0.3103448
#   3:    EWR  LAX     1   1.366667  7.5000000
#   4:    JFK  MIA     1  15.720670 18.7430168
#   5:    JFK  SEA     1  14.357143 30.7500000
#  ---                                        
# 196:    LGA  MIA    10  -6.251799 -1.4208633
# 197:    JFK  MIA    10  -1.880184  6.6774194
# 198:    EWR  PHX    10  -3.032258 -4.2903226
# 199:    JFK  MCO    10 -10.048387 -1.6129032
# 200:    JFK  DCA    10  16.483871 15.5161290
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们没有在参数j表达式中指定列名，它们会自动命名为(V1, V2)。    * 再次声明，原数据里面的顺序，会反映在结果中。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可是，如果我们想让结果按照 origin, dest 和 month 排序呢？&lt;/p&gt;

&lt;h4 id=&#34;b-参数keyby:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;b) 参数keyby&lt;/h4&gt;

&lt;p&gt;data.table本身就被设计成能保持原数据的顺序。在一些情况下，必须保持原来的顺序。但是，有时我们希望自动根据分组的变量排序。&lt;/p&gt;

&lt;p&gt;－ 如何按照分组的变量排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, 
    .(mean(arr_delay), mean(dep_delay)), 
    keyby=.(origin, dest, month)]
ans
#      origin dest month         V1         V2
#   1:    EWR  DFW     1   6.427673 10.0125786
#   2:    EWR  DFW     2  10.536765 11.3455882
#   3:    EWR  DFW     3  12.865031  8.0797546
#   4:    EWR  DFW     4  17.792683 12.9207317
#   5:    EWR  DFW     5  18.487805 18.6829268
#  ---                                        
# 196:    LGA  PBI     1  -7.758621  0.3103448
# 197:    LGA  PBI     2  -7.865385  2.4038462
# 198:    LGA  PBI     3  -5.754098  3.0327869
# 199:    LGA  PBI     4 -13.966667 -4.7333333
# 200:    LGA  PBI     5 -10.357143 -6.8571429
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们做的，只是把 by 改为了 keyby。这会自动的将结果按照升序排列。注意 keyby() 在完成操作后生效，例如，在计算结果后再排序。   
keys：实际上 keyby 做的不只是排序。它在排序之后，设置一个叫做sorted的属性。我们会在下一教程学习更多关于 keys的内容。   
现在，你需要知道的，就是使用 keyby 自动排序。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-chaining表达式:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;c) chaining表达式&lt;/h4&gt;

&lt;p&gt;让我们再来考虑下“获取美航在所有机场的起／降的数目”的问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by = .(origin, dest)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何让 ans 按origin的升序、按dest的降序排列
我们可以将中间结果保存为一个临时变量，再对这个变量使用 order(origin, -dest) 排序。这看上去还挺简洁明了的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- ans[order(origin, -dest)]
head(ans)
#    origin dest    N
# 1:    EWR  PHX  121
# 2:    EWR  MIA  848
# 3:    EWR  LAX   62
# 4:    EWR  DFW 1618
# 5:    JFK  STT  229
# 6:    JFK  SJU  690
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 回忆一下，我们在函数 order()中，对一个字符型的列使用 &amp;quot;-&amp;quot; 来降序排列。由于data.table的内部查询优化(internal query optimisation)，这样做是可行的。
* 再回忆一下 order(...)已经通过data.table内部的快速基数排序函数 forder()优化过了。那么，我们可以继续使用熟悉的R的基础函数，而不是考虑使用data.table提供的速度快内存消耗少的排序方法。我们会在data.table internals的教程中说明更多细节。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这么做会生成一个临时变量，然后再修改这个临时变量。其实我们可以通过添加chaining表达式，避免生成临时变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by=.(origin, dest)][order(origin, -dest)]
head(ans, 10)
#     origin dest    N
#  1:    EWR  PHX  121
#  2:    EWR  MIA  848
#  3:    EWR  LAX   62
#  4:    EWR  DFW 1618
#  5:    JFK  STT  229
#  6:    JFK  SJU  690
#  7:    JFK  SFO 1312
#  8:    JFK  SEA  298
#  9:    JFK  SAN  299
# 10:    JFK  ORD  432
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们可以一个接一个地添加表达式，做一系列操作，就像这样：DT[...][...][...]。
* 或者你可以换行写：
DT[...
 ][...
 ][...
 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-by表达式:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;d) by表达式&lt;/h4&gt;

&lt;p&gt;－ 参数by也可以接受表达式吗？还是只能指定列&lt;br /&gt;
当然可以接受表达式。举个例子，如果我们想要知道，有多少航班起飞延误但却提前／准时到达的，有多少航班起飞和到达都延误了……&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, .N, .(dep_delay&amp;gt;0, arr_delay&amp;gt;0)]
ans
#    dep_delay arr_delay      N
# 1:      TRUE      TRUE  72836
# 2:     FALSE      TRUE  34583
# 3:     FALSE     FALSE 119304
# 4:      TRUE     FALSE  26593
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 最后一行，满足 dep_delay &amp;gt; 0 = TRUE 且 arr_delay &amp;gt; 0 = FALSE 的条件。我们知道有26593次航班起飞延误但却提前／准时到达了。
* 注意，我们没有在by表达式里面指定任何列名。然而结果里面，列名还是自动的生成了。
* 我们可以在表达式里面指定其他的列，比如：DT[, .N, by=.(a, b&amp;gt;0)]。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;e-在参数j里面指定多个列:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;e) 在参数j里面指定多个列&lt;/h4&gt;

&lt;p&gt;－ 必须分别对每列指定 mean() 函数吗
当然不必分别对每列输入 mean(myCol) 了。要是我们有100列要计算平均值，不就惨了吗。&lt;br /&gt;
如何高效地计算呢。记不记得这个小贴士-“只要参数j 返回一个list，这个list的每一个元素都会被转换成结果data.table的一列。”假设我们分组的时候，可以像变量一样，引用每个分组的数据，那么就可以循环对所有的列应用函数 lapply() ，而不需要学习新的函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;特殊的语法 .SD:
data.table提供一个特殊的语法，形式是 .SD。它是 Subset of Data 的缩写。它自身就是一个data.table，包含通过by 分组后的每一组。
回忆一下，一个data.table本质上是一个list，它们的列包含的元素个数都相同（其实就是行数）。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们用之前的一个data.table DT来看看 .SD 是如何使用的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT
#    ID a  b  c
# 1:  b 1  7 13
# 2:  b 2  8 14
# 3:  b 3  9 15
# 4:  a 4 10 16
# 5:  a 5 11 17
# 6:  c 6 12 18

DT[, print(.SD), by=ID]
#    a b  c
# 1: 1 7 13
# 2: 2 8 14
# 3: 3 9 15
#    a  b  c
# 1: 4 10 16
# 2: 5 11 17
#    a  b  c
# 1: 6 12 18
# Empty data.table (0 rows) of 1 col: ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* .SD 包含除了分组依据的那一列以外的所有列。
* 返回值依旧保持了原数据的顺序。首先打印出来的是 ID=“b” 的数据，然后是 ID=“a” 的，最后是  ID=“c” 的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了对复数的列进行计算，我们可以简单地使用函数 lapply()。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[, lapply(.SD, mean), by=ID]
#    ID   a    b    c
# 1:  b 2.0  8.0 14.0
# 2:  a 4.5 10.5 16.5
# 3:  c 6.0 12.0 18.0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* .SD 分别包含了ID是 a、b、c的所有行，它们分别对应了各自的组。我们应用函数 lapply() 对每列计算平均值。
* 每一组返回包含三个平均数的list，这些构成了最终返回的data.table。
* 既然函数 lapply() 返回 list，我们就不需要在外面多加 .() 了。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;差不多可以了，再补充一点。在 flights 这个 data.table里面，我们执行计算 arr_delay 和 dep_delay 这两列的平均值。但是，.SD 默认包含用于分组的所有列的平均值。&lt;/p&gt;

&lt;p&gt;－如何指定希望计算平均值的列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.SDcols
使用参数 .SDcols。它接受列名或者列索引。比如，.SDcols = c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;)能确保.SD之包含 arr_delay 和 dep_delay 这两列。
和 with = FALSE 一样，我们也可以使用 - 或者 ! 来移除列。比如，我们指定 !(colA:colB) 或者 -(colA:colB)表示移除从 colA 到 colB 的所有列。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在让我们试着用 .SD 和 .SDcols 来获取 arr_delay 和 dep_delay 这两列的平均值，并且按照 origin, dest 和 month 来分组。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[carrier == &amp;quot;AA&amp;quot;,                     ## Only on trips with carrier &amp;quot;AA&amp;quot;
        lapply(.SD, mean),                   ## compute the mean
        by=.(origin, dest, month),           ## for every &#39;origin,dest,month&#39;
        .SDcols=c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;)] ## for just those specified in .SDcols
#      origin dest month  arr_delay  dep_delay
#   1:    JFK  LAX     1   6.590361 14.2289157
#   2:    LGA  PBI     1  -7.758621  0.3103448
#   3:    EWR  LAX     1   1.366667  7.5000000
#   4:    JFK  MIA     1  15.720670 18.7430168
#   5:    JFK  SEA     1  14.357143 30.7500000
#  ---                                        
# 196:    LGA  MIA    10  -6.251799 -1.4208633
# 197:    JFK  MIA    10  -1.880184  6.6774194
# 198:    EWR  PHX    10  -3.032258 -4.2903226
# 199:    JFK  MCO    10 -10.048387 -1.6129032
# 200:    JFK  DCA    10  16.483871 15.5161290
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;f-对每组subset-sd:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;f) 对每组subset .SD&lt;/h4&gt;

&lt;p&gt;－ 如何返回每个月的前两行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, head(.SD, 2), by=month]
head(ans)
#    month year day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1:     1 2014   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2:     1 2014   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3:     2 2014   1      859        -1     1226         1         0      AA  N783AA      1    JFK
# 4:     2 2014   1     1155        -5     1528         3         0      AA  N784AA      3    JFK
# 5:     3 2014   1      849       -11     1306        36         0      AA  N784AA      1    JFK
# 6:     3 2014   1     1157        -3     1529        14         0      AA  N787AA      3    JFK
#    dest air_time distance hour min
# 1:  LAX      359     2475    9  14
# 2:  LAX      363     2475   11  57
# 3:  LAX      358     2475    8  59
# 4:  LAX      358     2475   11  55
# 5:  LAX      375     2475    8  49
# 6:  LAX      368     2475   11  57
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* .SD 包含了每组的所有行。我们可以简单的subset各组数据的前两行。
* 对每组数据，head(.SD, 2)返回的data.table同时也是个list。所以不需要用 .() 包围起来。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;g-为什么参数j这么灵活:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;g) 为什么参数j这么灵活&lt;/h4&gt;

&lt;p&gt;这样，我们有了符合R语言风格的语法，我们也使用R语言里面既存的函数定义，而不是定义新的函数。我们用教程一开始创建的DT来说明。&lt;/p&gt;

&lt;p&gt;－如何保存按照ID分组后数据中的 a列和 b列 的信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT
#    ID a  b  c
# 1:  b 1  7 13
# 2:  b 2  8 14
# 3:  b 3  9 15
# 4:  a 4 10 16
# 5:  a 5 11 17
# 6:  c 6 12 18

DT[, .(val = c(a,b)), by=ID]
#     ID val
#  1:  b   1
#  2:  b   2
#  3:  b   3
#  4:  b   7
#  5:  b   8
#  6:  b   9
#  7:  a   4
#  8:  a   5
#  9:  a  10
# 10:  a  11
# 11:  c   6
# 12:  c  12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 就这样，不需要特殊的语法。我们需要知道的，就是用函数 c() 指定需要连结的向量。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何将刚刚的数据，作为一列返回&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[, .(val = list(c(a,b))), by=ID]
#    ID         val
# 1:  b 1,2,3,7,8,9
# 2:  a  4, 5,10,11
# 3:  c        6,12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们首先用 c(a,b) 连结了每组的值，然后用 list() 包围起来。那么对于每组数据，我们返回一个所有连结后的值的 list。
* 注意，那些逗号都是用来辅助显示的。一个list中的元素可以包含任何对象。在这个例子里，每个元素是一个向量，它们的长度都不相同。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦你对参数j的用法产生了兴趣，你会发现语法是多么强大。理解这些的一个有效的方法就是，在 print() 的帮助下，多多使用。&lt;br /&gt;
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## (1) look at the difference between
DT[, print(c(a,b)), by=ID]
# [1] 1 2 3 7 8 9
# [1]  4  5 10 11
# [1]  6 12
# Empty data.table (0 rows) of 1 col: ID

## (2) and
DT[, print(list(c(a,b))), by=ID]
# [[1]]
# [1] 1 2 3 7 8 9
# 
# [[1]]
# [1]  4  5 10 11
# 
# [[1]]
# [1]  6 12
# Empty data.table (0 rows) of 1 col: ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在(1)里面，每组返回一个向量，它们的长度分别是6，4，2.但是(2)里面，每组返回一个长度都为1的list，它们的第一个元素包含了长度为6，4，2的向量。因此，(1)的结果的长度是6+4+2=12，(2)的结果的长度是1+1+1=3。&lt;/p&gt;

&lt;h2 id=&#34;总结:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;data.table的语法形式是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[i, j, by]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定参数i：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 类似于data.frame，我们可以subset行，除非不需要重复地使用 DT$，既然我们能将列当做变量来引用。 
* 我们可以使用order()排序。为了得到更快速的效果，order()函数内部使用了data.table的快速排序。 
我们可以通过参数i做更多的事，得到更快速的选取和连结。我们可以在教程“Keys and fast binary search based subsets”和“Joins and rolling joins”中学到这些。 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定参数j：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 以data.table的形式选取列：DT[, .(colA, colB)]。
* 以data.frame的形式选取列：DT[, c(&amp;quot;colA&amp;quot;, &amp;quot;colB&amp;quot;), with=FALSE]。
* 按列进行计算：DT[, .(sum(colA), mean(colB))]。
* 如果需要：DT[, .(sA =sum(colA), mB = mean(colB))]。
* 和i共同使用：DT[colA &amp;gt; value, sum(colB)]。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定参数by：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 通过by，我们可以指定列，或者列名，甚至表达式，进行分组。参数j可以很灵活地配置参数i和by实现强大的功能。
* by可以指定多个列，也可以指定表达式。
* 我们可以用 keyby，对分组的结果自动排序。
* 我们可以在参数j中指定 .SD 和 .SDcols，对复数的列进行操作。例如：   
  1.把函数fun 应用到所有 .SDcols指定的列上，同时对参数by指定的列进行分组：DT[, lapply(.SD, fun), by=., .SDcols=...]。 
  2.返回每组册前两行：DT[, head(.SD, 2), by=.]。
  3.三个参数联合使用：DT[col &amp;gt; val, head(.SD, 1), by=.]。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;小提示：&lt;br /&gt;
只要j返回一个list，这个list的每个元素都会是结果data.table的一列。&lt;/p&gt;

&lt;p&gt;下一讲，我们学习如何用reference来add／update／delete某一列，如何通过i和by合并它们。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>写给大家看的设计书</title>
      <link>http://youngspring1.github.io/post/2016-03-12-designer/</link>
      <pubDate>Sat, 12 Mar 2016 21:56:16 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-12-designer/</guid>
      <description>

&lt;p&gt;即使不是设计师，如果懂一点设计，做出来的产品会更明确和清晰。&lt;br /&gt;
况且，一个现代人，总会有书面形式的表达，此时知晓一些设计原则，对文档非常有帮助。&lt;/p&gt;

&lt;p&gt;这本设计书，就是写给设计师以外的人看的。&lt;br /&gt;
The Non-Designer&amp;rsquo;s Design Book&lt;/p&gt;

&lt;p&gt;在看这本书以前，对于日常能见到的海报、传单、商品包装、图书封面，我都不甚在意；看完这本书之后，同样还是对于这些常见信息的展示形式，有了新的认识。&lt;br /&gt;
也就是说，能明确地说出来，这个传单，遵循了什么样的规则，所以产生了什么样的效果。而那个海报，如果稍微如何如何修改一下，或许能够变得更好。&lt;/p&gt;

&lt;h2 id=&#34;四大设计原则:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;四大设计原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;亲密性&lt;/li&gt;
&lt;li&gt;对齐&lt;/li&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;li&gt;对比&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;书上介绍了很多没有遵循这些原则的实例，然后告诉我们应该如何修改这些实例。&lt;br /&gt;
通过实例，能够更容易掌握下面这些干巴巴的定义。&lt;/p&gt;

&lt;h4 id=&#34;亲密性:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;亲密性&lt;/h4&gt;

&lt;p&gt;彼此相关的信息，应当归并在一起，形成一个视觉单元，而不是多个孤立的元素。&lt;br /&gt;
这有助于组织信息，减少混乱，为读者提供清晰的结构。&lt;/p&gt;

&lt;h4 id=&#34;对齐:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对齐&lt;/h4&gt;

&lt;p&gt;每个元素都应当于页面上的另一个元素有视觉的联系。&lt;br /&gt;
以此建立一种清晰、精巧而且清爽的外观。&lt;/p&gt;

&lt;h4 id=&#34;重复:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;重复&lt;/h4&gt;

&lt;p&gt;同一类元素应当以同样的颜色、形状、材质、空间关系、线宽、字体、大小和图片来重复出现。&lt;br /&gt;
既能增加条理性，还可以加强统一性。&lt;/p&gt;

&lt;h4 id=&#34;对比:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对比&lt;/h4&gt;

&lt;p&gt;不同类别的元素，应当截然不同。&lt;/p&gt;

&lt;h2 id=&#34;颜色:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;颜色&lt;/h2&gt;

&lt;p&gt;介绍了调色板里面各种颜色的关系，以及“亮色“和“暗色”的对比，“暖色”和“冷色”的对比，“纸”和“显示屏”的对比。&lt;/p&gt;

&lt;h2 id=&#34;字体:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;字体&lt;/h2&gt;

&lt;p&gt;介绍了不同字体的来源和对比，非常有启发。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/写给大家看的设计书-威廉姆斯/dp/B018KMT5WI/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1457794020&amp;amp;sr=1-1&#34;&gt;写给大家看的设计书&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R语言中的class()、mode()和typeof()的区别</title>
      <link>http://youngspring1.github.io/post/2016-03-08-r-class/</link>
      <pubDate>Tue, 08 Mar 2016 22:52:12 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-08-r-class/</guid>
      <description>

&lt;p&gt;今天对R语言中的这三个函数产生了疑惑，为什么有时候它们的运行结果一样，有时候却又不一样？&lt;/p&gt;

&lt;h3 id=&#34;定义:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;定义&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;mode&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;The (Storage) Mode of an Object&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;Get or set the type or storage mode of an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;The Type of an Object&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;typeof determines the (R internal) type or storage mode of any object&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;Object Classes&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;R possesses a simple generic function mechanism which can be used for an object-oriented style of programming.&lt;br /&gt;
&amp;emsp;Method dispatch takes place based on the class of the first argument to the generic function.&lt;/p&gt;

&lt;h3 id=&#34;解释:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;解释&lt;/h3&gt;

&lt;p&gt;在R里面，每一个对象都有一个mode和一个class。&lt;br /&gt;
前者表示对象在内存中是如何存储的。 (numeric, character, list and function)&lt;br /&gt;
后者表示对象的抽象类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d &amp;lt;- data.frame(V1=c(1,2))
class(d)
# [1] &amp;quot;data.frame&amp;quot;
mode(d)
# [1] &amp;quot;list&amp;quot;
typeof(d)
# list

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面的例子，我们可以知道，data frame这种类型，在内存中作为list被存储，但是它们被包装成data frame。&lt;br /&gt;
对于某个函数的参数，它的类型是data frame，却不能说是list。&lt;/p&gt;

&lt;p&gt;再来看mode和typeof。&lt;br /&gt;
mode和typeof通常返回同样的值，但也有例外。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typeof(c(1,2))
# [1] &amp;quot;double&amp;quot;
mode(c(1,2))
# [1] &amp;quot;numeric&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;历史原因啦。R语言由S语言发展而来。&lt;br /&gt;
mode，为了和S语言兼容，返回R的对象的模式。&lt;br /&gt;
typeof是R语言特有的，返回一个R的对象的类型。（哎呀，解释不清楚啦）&lt;/p&gt;

&lt;h3 id=&#34;参考:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&#34;http://stackoverflow.com/questions/6258004/r-types-and-classes-of-variables&#34;&gt;http://stackoverflow.com/questions/6258004/r-types-and-classes-of-variables&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&#34;http://stats.stackexchange.com/questions/3212/mode-class-and-type-of-r-objects&#34;&gt;http://stats.stackexchange.com/questions/3212/mode-class-and-type-of-r-objects&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>大部分时候都是目光短浅的动物</title>
      <link>http://youngspring1.github.io/post/2016-03-08-thought/</link>
      <pubDate>Tue, 08 Mar 2016 22:42:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-08-thought/</guid>
      <description>&lt;p&gt;大部分时候都是目光短浅的动物，只能看到眼前一小块；要是再远一点，便如同迷雾般不可捉摸。&lt;br /&gt;
写代码的时候，不时需要打印出一些debug信息，这样才能确认正确；见过有牛人，一次写完代码，最后调试一遍，通过。&lt;br /&gt;
看不到利好，往往不敢继续。所以需要给自己的甜头，引诱自己继续前行。&lt;br /&gt;
在普通人看不到任何收益的情况下，还能继续做，要么眼光比别人更长远，要么是因为情怀。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今天吃饭看见一个老太太，一个人点了份寿司，安安静静的吃完，离开。面容好平静。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>敦煌旅行计划</title>
      <link>http://youngspring1.github.io/post/2016-03-06-plan/</link>
      <pubDate>Sun, 06 Mar 2016 23:39:55 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-plan/</guid>
      <description>

&lt;h3 id=&#34;day1-南京-兰州:4d92112643788221cfde671ff2b890a2&#34;&gt;Day1:南京－兰州&lt;/h3&gt;

&lt;p&gt;正宁路夜市（小吃）：到达的当晚可以逛。&lt;br /&gt;
永昌路夜市（杂货）：返程有空就逛，连着正宁路夜市。&lt;br /&gt;
中山铁桥：清朝。&lt;br /&gt;
省博：返程住兰州，有空逛，大约半天。&lt;/p&gt;

&lt;h3 id=&#34;day2-兰州-武威-张掖:4d92112643788221cfde671ff2b890a2&#34;&gt;Day2:兰州－武威－张掖&lt;/h3&gt;

&lt;p&gt;武威旧称凉州，西夏文化，特色小吃：拨鱼儿、面片、三套车。&lt;br /&gt;
张掖&lt;br /&gt;
&amp;emsp;丹霞景区（40元），最好早晨或者傍晚去，雨后更佳。&lt;br /&gt;
&amp;emsp;大佛寺（41元），西夏国寺，卧佛。&lt;br /&gt;
&amp;emsp;甘州美食广场。&lt;/p&gt;

&lt;h3 id=&#34;day3-张掖-嘉峪关-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day3:张掖－嘉峪关－敦煌&lt;/h3&gt;

&lt;p&gt;嘉峪关&lt;br /&gt;
&amp;emsp;关城、第一城、悬壁长城三景区联票，但距离较远。&lt;br /&gt;
&amp;emsp;镜铁市场的眼镜烧烤有名。&lt;br /&gt;
瓜洲&lt;br /&gt;
&amp;emsp;榆林窟，有空就去。&lt;/p&gt;

&lt;h3 id=&#34;day4-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day4:敦煌&lt;/h3&gt;

&lt;p&gt;敦煌市区以及莫高窟&lt;br /&gt;
&amp;emsp;鸣沙山月牙泉（120元）傍晚去。&lt;br /&gt;
&amp;emsp;市博。&lt;br /&gt;
&amp;emsp;沙洲市场（敦煌夜市）。&lt;br /&gt;
东线：莫高窟。&lt;/p&gt;

&lt;h3 id=&#34;day5-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day5:敦煌&lt;/h3&gt;

&lt;p&gt;敦煌周边&lt;br /&gt;
西线：&lt;br /&gt;
&amp;emsp;西北：玉门关（90km 40元）、雅丹魔鬼城（80km 80元）&lt;br /&gt;
&amp;emsp;西南：西千佛洞（35km）、阳关（70km 50元包含博物馆）&lt;/p&gt;

&lt;h3 id=&#34;day6-敦煌-青海湖-兰州:4d92112643788221cfde671ff2b890a2&#34;&gt;Day6:敦煌－青海湖－兰州&lt;/h3&gt;

&lt;h3 id=&#34;day7-兰州-南京:4d92112643788221cfde671ff2b890a2&#34;&gt;Day7:兰州－南京&lt;/h3&gt;

&lt;h3 id=&#34;路线备忘:4d92112643788221cfde671ff2b890a2&#34;&gt;路线备忘&lt;/h3&gt;

&lt;p&gt;G30 丝绸之路：兰州－武威－张掖－酒泉－瓜洲：1000km&lt;br /&gt;
S314 瓜洲－敦煌：120km&lt;br /&gt;
G215-G315-G25 敦煌－青海湖－兰州&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>20160306 碎碎念</title>
      <link>http://youngspring1.github.io/post/2016-03-06-ssn/</link>
      <pubDate>Sun, 06 Mar 2016 15:04:54 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-ssn/</guid>
      <description>&lt;p&gt;我有一个小侄子，吃饭时必须要拿iPad播放光头强，才能吃得下。&lt;br /&gt;
我以为只有小孩才会这样。&lt;br /&gt;
结果现在发现所有人吃饭都看着手机。&lt;br /&gt;
简直和筷子一样不可或缺。&lt;br /&gt;
下次我给大家表演一下，吃饭without手机。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>