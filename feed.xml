<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>行行重行行</title>
    <link>http://youngspring1.github.io/</link>
    <description>Recent content on 行行重行行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 04 Sep 2016 10:30:23 +0800</lastBuildDate>
    <atom:link href="http://youngspring1.github.io/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>银河历险记3</title>
      <link>http://youngspring1.github.io/post/2016/2016-09-04-samorost3/</link>
      <pubDate>Sun, 04 Sep 2016 10:30:23 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-09-04-samorost3/</guid>
      <description>&lt;p&gt;一不小心试玩了游戏“银河历险记3”，突然觉得，开发游戏和之前做过的许多事情有很多相似之处。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/IMG_0208.PNG&#34; alt=&#34;samorost3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(只说解谜类的游戏，动作／策略类的游戏不了解。)&lt;/p&gt;

&lt;p&gt;首先，要有个好故事。&lt;br /&gt;
等等，我说的是电影吗？不只是电影，就连写PPT的时候，大家强调最多的就是，你要讲一个圆满的故事！游戏也是同样的。故事有起因，地球危险／公主被俘／有个梦想…然后主人公就打点行装上路，一路通过重重关卡，终于拯救了地球／救下公主／实现梦想。&lt;/p&gt;

&lt;p&gt;乱入：金字塔原理。&lt;br /&gt;
金字塔原理是指，任何一个目标，都可以拆分成几个互不重合的小目标。在项目管理中常常被用到。游戏也是这样，实现最终的目标，可以拆分成任务1-2-3，这三个小目标完成了，最终目标就完成了。&lt;/p&gt;

&lt;p&gt;其次，要足够简单。&lt;br /&gt;
解谜类游戏，如果太难的话，可玩性就小了。任何一个普通人，不需要文字说明，就能理解任何一个关卡的目标，如果能达到这样的效果最好，最多看一眼游戏自带的攻略说明（千万不要有文字！）。如果牵涉到什么背景知识、专业术语，那就失败了。&lt;/p&gt;

&lt;p&gt;乱入：伏笔。&lt;br /&gt;
为后面的关卡埋下伏笔，也是挺有意思的。&lt;/p&gt;

&lt;p&gt;最后，漂亮的画面和配乐。&lt;br /&gt;
要让玩家觉得玩游戏时享受，而不是痛苦。&lt;/p&gt;

&lt;p&gt;越说越觉得开发游戏和做其他项目一样嘛……&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>有顶天家族 第二代的归来</title>
      <link>http://youngspring1.github.io/post/2016/2016-08-28-utyouten/</link>
      <pubDate>Sun, 28 Aug 2016 09:21:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-08-28-utyouten/</guid>
      <description>

&lt;p&gt;昨天主动断网一天，竟然在逛街＋看电影之后，把去年买的一本小说，半猜半读地看完了。看来断网／关手机／关电脑是第一生产力啊。&lt;br /&gt;
看书的时候，想着故事中的人物，他们逛过的街／乘坐的电车／看到的风景，我也在京都亲历过，这种身临其境的想象，觉得特别奇妙。&lt;br /&gt;
祝早日动漫化，早日出中译版，早日出第三部大结局（大概又要等五年？）&lt;/p&gt;

&lt;h2 id=&#34;没有什么比有趣更重要啊:a84e1d07b2c13580fc6a36f776c57d13&#34;&gt;没有什么比有趣更重要啊，&lt;/h2&gt;

&lt;h2 id=&#34;因为我身上也流淌着傻瓜的血呢:a84e1d07b2c13580fc6a36f776c57d13&#34;&gt;因为我身上也流淌着傻瓜的血呢。&lt;/h2&gt;

&lt;p&gt;没有故事概览，就不能证明我读完了。现在也没有出中文版呢。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第二代的归来&lt;br /&gt;
天狗赤玉老师的儿子（第二代）从英国回来，打扮和生活都是十足的英国绅士，而且不承认自己是天狗。降落的时候散落的行李大部分都找回来，唯独不见了手枪。赤玉老师找第二代决斗，但是他自己一点法力都没有了，儿子都不屑跟他动手。&lt;/li&gt;
&lt;li&gt;南禅寺玉澜&lt;br /&gt;
象棋大会复活。南禅寺玉澜跟下鸭矢二郎对弈，结果作为棋子的矢三郎和金阁银阁引发的骚乱终止了棋局。这之后，玉澜和矢一郎的婚事也浮出水面。他们还发现了父亲的秘密象棋房间，其入口是父亲遗物棋盘的一点，而另外一个入口竟然是赤玉老师的壁橱。&lt;/li&gt;
&lt;li&gt;幻术师天满屋&lt;br /&gt;
矢三郎被幻术师天满屋的幻术骗到了。同时在菖蒲池画伯家，和淀川教授、天满屋吃了顿饭。回家的路上矢三郎又折回去，看到了画伯画的地狱图，天满屋曾经被寿老人流放其间。矢三郎变成恶鬼，找天满屋报被骗之仇，发现手枪在天满屋手里，又败在天满屋手下，幸好弁天及时回国救下矢三郎。&lt;/li&gt;
&lt;li&gt;大文字纳凉船大战&lt;br /&gt;
京都每年8月16日举办&lt;a href=&#34;https://www.kyokanko.or.jp/okuribi/&#34;&gt;五山送火&lt;/a&gt;活动，在周围的山上分别烧出“大”、“妙法”、船形图案、“大”、鸟居图案，真是好想去看呢。不过在下界很难看全五处图案，聪明的狸猫会派出可以飞的船，一家人在天上看。。。前年，下鸭家的飞船“万福丸”被夷川家的烟花炸毁了，去年向弁天借的飞行茶室也坠毁了，于是只能使用矢二郎变的叡山电车＋飞行茶室引擎作为纳凉飞船上天。这次弁天来到电车的屋顶，第二代在夷川家的船上，他们一言不合就撕逼，弁天被打败了。&lt;/li&gt;
&lt;li&gt;有马地狱&lt;br /&gt;
矢三郎去有马温泉找淀川教授，掉入地狱图中，被弁天救了出来。意外发现夷川早云企图加入星期五俱乐部，结果弁天献上飞行茶室引擎，矢三郎加入了星期五俱乐部。因为只有这一个名额，夷川早云气得不行，找寿老人理论。寿老人放出天满屋，天满屋开枪打死夷川早云。&lt;/li&gt;
&lt;li&gt;夷川家的后代
夷川早云的葬礼后，他的大儿子夷川吴一郎回来继承家业，划拨了一个实验室给矢四郎作电气研究。矢二郎服用了外婆的灵药后，能够变为人形，出门旅行。&lt;/li&gt;
&lt;li&gt;天狗的血，傻瓜的血&lt;br /&gt;
又到了选伪右卫门的日子，这次的候选人只有矢一郎一个人，简直是势在必得啊。结果夷川电气白兰地实验室发生爆炸，金阁银阁在现场搜出了手枪，带到了选举现场。矢一郎气得离场，遇到了星期五俱乐部，和寿老人的电车一起，又回到了选举现场。同时回来的，还有矢二郎和真正的吴一郎。假的吴一郎是夷川早云扮的，而且金阁银阁搜到的手枪只是个玩具。夷川早云知道天满屋开枪打海星之后，和天满屋拼命，一起掉进了地狱图。星期五俱乐部今年又没能吃上狸猫火锅。一切都澄清了之后，矢一郎还是被选为伪右卫门，新年过后，和玉澜结婚了。海星还活着。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160828-utyouten-title.jpg&#34; alt=&#34;title&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160828_utyouten-content.jpg&#34; alt=&#34;content&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016八月 关西印象</title>
      <link>http://youngspring1.github.io/post/2016/2016-08-14-kansai/</link>
      <pubDate>Sun, 14 Aug 2016 19:41:01 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-08-14-kansai/</guid>
      <description>

&lt;p&gt;先上琵琶湖花火大会的视频解馋（其实是用来测试网络有没有翻墙）&lt;br /&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//player.vimeo.com/video/178788751&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://7xrjai.com1.z0.glb.clouddn.com/2016%E7%90%B5%E7%90%B6%E6%B9%96%E8%8A%B1%E7%81%AB%E5%A4%A7%E4%BC%9A.m4v&#34;&gt;墙内直达链接&lt;/a&gt;或者&lt;a href=&#34;http://player.youku.com/player.php/sid/XMTY4NDUyMTY1Ng==/v.swf&#34;&gt;优酷链接&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;关西印象:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;关西印象&lt;/h1&gt;

&lt;h3 id=&#34;衣:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;衣&lt;/h3&gt;

&lt;p&gt;网上说旅游景点看到穿ゆかた的都是外国人来体验的，我看到的却不是这样。盛装浴衣出来游玩的，反而大部分都是说日语的。跟平日的穿着不一样，出来游玩的心情大概也会不一样。&lt;br /&gt;
平日的话，路上见到的大约跟中国类似。正装很常见，而且大夏天的穿正装，竟然看不出来热。。。&lt;/p&gt;

&lt;h3 id=&#34;食:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;食&lt;/h3&gt;

&lt;p&gt;这次一个人，所以没有体验怀石料理，下次吧。&lt;br /&gt;
吃的基本上都是当地人比较多的定食店，点菜要么是在机器，要么是自取，不会日语也可以，非常方便。印象最深的是“松屋”快餐店，基本上30秒内上菜，速度堪比F1换胎工。&lt;br /&gt;
遍地都是自动售货机，可以买到饮料、香烟和冰淇淋。&lt;br /&gt;
遍地都是24小时便利店，可以买到日常用的和吃的。&lt;/p&gt;

&lt;h3 id=&#34;住:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;住&lt;/h3&gt;

&lt;p&gt;坐电车和压马路时看到的大多是单门独院的住宅，用于出租的集合住宅更少。这一点非常羡慕。&lt;br /&gt;
每家每户都有自己的风格和设计，住着这样的房子，应该幸福感爆棚吧。&lt;/p&gt;

&lt;h3 id=&#34;行:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;行&lt;/h3&gt;

&lt;p&gt;电车非常发达，基本哪里都可以去。而且换乘非常方便，线路时刻都是设计好的，刚好可以到站就换乘另外一趟车。&lt;br /&gt;
最慢的那种电车，只有一节或者两节车厢，可以从路边直接走到站台上。在下车的时候刷卡，第一次坐的时候非常惊奇。&lt;br /&gt;
路上的老人很多。&lt;/p&gt;

&lt;h1 id=&#34;景区:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;景区&lt;/h1&gt;

&lt;h3 id=&#34;岚山:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;岚山&lt;/h3&gt;

&lt;p&gt;坐一节车厢的电车，到岚山，去看了天龙寺、常寂光寺、二尊院、落柿舍、渡月桥。&lt;/p&gt;

&lt;h3 id=&#34;西北:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;西北&lt;/h3&gt;

&lt;p&gt;仁和寺、龙安寺、金阁寺&lt;/p&gt;

&lt;h3 id=&#34;东北:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;东北&lt;/h3&gt;

&lt;p&gt;上贺茂神社，下鸭神社、鞍马寺、贵船神社、比叡山延历寺&lt;/p&gt;

&lt;h3 id=&#34;东山:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;东山&lt;/h3&gt;

&lt;p&gt;清水寺、八坂神社、岡山公园、知恩院、青莲院、南禅寺、禅林寺、银阁寺&lt;/p&gt;

&lt;h3 id=&#34;宇治:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;宇治&lt;/h3&gt;

&lt;p&gt;平等院、宇治上神社&lt;/p&gt;

&lt;h3 id=&#34;奈良:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;奈良&lt;/h3&gt;

&lt;p&gt;法隆寺、唐招提寺、药师寺
奈良公园、东大寺、春日大社、国立奈良博物馆、兴福寺&lt;/p&gt;

&lt;h3 id=&#34;大阪:66a20a1b18f5b2a06185ad3f2ae31f36&#34;&gt;大阪&lt;/h3&gt;

&lt;p&gt;道顿堀、心斋桥&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>动作执行层和任务执行层</title>
      <link>http://youngspring1.github.io/post/2016/2016-07-30-confusing/</link>
      <pubDate>Sat, 30 Jul 2016 14:51:22 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-07-30-confusing/</guid>
      <description>

&lt;p&gt;之前的转帖&lt;a href=&#34;http://youngspring1.github.io/post/2016/2016-03-15-career/&#34;&gt;职级系统&lt;/a&gt;，现在感受更加深刻了。&lt;/p&gt;

&lt;h4 id=&#34;动作执行层:6495a2b8d9538cee1b4b537108fefa7b&#34;&gt;动作执行层&lt;/h4&gt;

&lt;p&gt;动作执行层简直是最幸福最舒服的，把上级安排的任务按时保质地完成，最多优化成果、提高效率，其他什么都不需要操心。&lt;br /&gt;
在这个层次上，才气（技术）最重要，而且很大程度上可以按照自己的意愿发展才气。&lt;/p&gt;

&lt;h4 id=&#34;任务执行层:6495a2b8d9538cee1b4b537108fefa7b&#34;&gt;任务执行层&lt;/h4&gt;

&lt;p&gt;现在可以接触到这个层次。&lt;br /&gt;
任务执行层就苦逼了。需要将客户的任务拆解成动作，分配给动作执行层，还要将状况反馈给自己的上级。&lt;br /&gt;
有更苦逼的吗？有哇，有时候任务执行层，也要承担动作执行层的一部分动作。&lt;br /&gt;
还有更苦逼一点的吗？有哇，你来管理多个项目。&lt;br /&gt;
在这个层次上，需要千方百计压抑自己的才气，才气的发挥都留给动作执行层；安排动作，配置风险，管理团队成员的情绪；最大化责任心……无穷无尽的操心啊。&lt;br /&gt;
需要像一台虚拟平台的host一样，虚拟出各种角色（客户、上级、下级），考虑他们的所思所想，还要在这些角色之间随意切换！&lt;br /&gt;
如果吃不了这个层次的苦，就只有一辈子待在动作执行层了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;前几天有小朋友问我markdown里面能不能放视频，试了一下，youtube不行，vimeo可以。&lt;br /&gt;
嗯嗯，最近听这首：&lt;br /&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//player.vimeo.com/video/176835820&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;是的，vimeo也需要翻墙才能播放。我贴心地提供了一个墙内的链接&lt;a href=&#34;http://7xrjai.com1.z0.glb.clouddn.com/%E5%A4%A7%E9%B1%BC%E6%B5%B7%E6%A3%A0.mp4&#34;&gt;大鱼海棠钢琴曲&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>最长公共子串(Longest Common Substring)</title>
      <link>http://youngspring1.github.io/post/2016/2016-07-18-LCS/</link>
      <pubDate>Mon, 18 Jul 2016 18:45:09 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-07-18-LCS/</guid>
      <description>&lt;p&gt;对两个字符串，找到它们的最长公共子串(Longest Common Substring)。&lt;/p&gt;

&lt;p&gt;今天面试中把一个小妹妹坑惨了。&lt;br /&gt;
于是试着自己写出来。&lt;br /&gt;
本来想两个循环暴力找，但是觉得写不下去了。后来想了一个理解起来更简单的方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;拿str1跟str2比较。&lt;/li&gt;
&lt;li&gt;拿str1的最长的两个子串跟str2比较。&lt;/li&gt;
&lt;li&gt;拿str1的次长的三个子串跟str2比较。&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;python代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;str1=&amp;quot;entertenmant&amp;quot;
str2=&amp;quot;experting&amp;quot;

length1 = len(str1)
length2 = len(str2)
if str1 == str2:
	print(&amp;quot;common string:&amp;quot; + str1)
else:
	found = False
	for del_len in range(1,length1):
		for begin_index in range(0, del_len+1):
			end_index = begin_index + (length1 - del_len)
			checkstr = str1[begin_index: end_index]
			if str2.count(checkstr) &amp;gt; 0:
				print(&amp;quot;find &amp;quot; + checkstr + &amp;quot; in str2. break.&amp;quot;)
				found = True
				break
		if found:
			break

	print(&amp;quot;common string:&amp;quot; + checkstr)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过这样的复杂度还是至少O(n^3)吧，肉眼可见的两个for循环，再加上一个count函数。&lt;br /&gt;
网上搜了有更普遍的方法，周末细看。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个想法</title>
      <link>http://youngspring1.github.io/post/2016/2016-07-16-thoughts/</link>
      <pubDate>Sat, 16 Jul 2016 23:21:40 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-07-16-thoughts/</guid>
      <description>&lt;p&gt;作为一个个体，而且是处在这个发展中的世界潮流的个体，如果能看得清自身成功的原因，哪些是自身的努力和天赋，哪些是所处的时代和平台提供的，哪些缺点被平台弥补和遮掩了，哪些是运气，是非常难得的。&lt;br /&gt;
譬如说，和父母辈相比，不管是生活理念和状态，的确是和他们在不一样的世界中；但有可能造成这样状况，主要的原因是整个世界的发展趋势，次要的原因才是自己的努力。我们现在刷微博朋友圈，和他们看电视并没有本质的区别。&lt;br /&gt;
而如果能够意识到并且驾驭潮流和趋势，就更难得了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一张图看懂开源软件许可证区别</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-21-lisence/</link>
      <pubDate>Tue, 21 Jun 2016 22:43:57 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-21-lisence/</guid>
      <description>&lt;p&gt;妈妈再也不担心非法使用别人的代码了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160621-OPLicenses2.jpg&#34; alt=&#34;开源软件许可证区别&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIT:The Analytics Edge 笔记10－数据收集</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-20-R10/</link>
      <pubDate>Mon, 20 Jun 2016 09:10:39 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-20-R10/</guid>
      <description>

&lt;p&gt;汇总了一下，MIT课程 &lt;a href=&#34;https://courses.edx.org/courses/course-v1:MITx+15.071x_3+1T2016/info&#34;&gt;15.071x The Analytics Edge&lt;/a&gt; 里面，收集到的数据，以及它们的来源。&lt;br /&gt;
你也可以在 &lt;a href=&#34;https://courses.edx.org/courses/course-v1:MITx+15.071x_3+1T2016/a36e4c3815534ee5965d96974a0ec06a/&#34;&gt;这个页面&lt;/a&gt; 下载到所有跟课程相关的CSV数据、课件、R脚本。&lt;/p&gt;

&lt;h3 id=&#34;unit1:7d081d68d33a6cb2f2159d016a647e43&#34;&gt;Unit1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WHO的世界健康数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/WHO.csv&#34;&gt;WHO.csv&lt;/a&gt;&lt;br /&gt;
来自 &lt;a href=&#34;http://apps.who.int/gho/data/node.main&#34;&gt;Global Health Observatory Data Repository&lt;/a&gt;&lt;br /&gt;
可以按照主题、分类、指标、国家来获取。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;USDA的食物数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/USDA.csv&#34;&gt;USDA.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;https://ndb.nal.usda.gov&#34;&gt;USDA National Nutrient Database for Standard Reference&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;芝加哥的犯罪数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/mvtWeek1.csv&#34;&gt;mvtWeek1.csv&lt;/a&gt;&lt;br /&gt;
数据由FBI统计，由&lt;a href=&#34;https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-present/ijzp-q8t2&#34;&gt;cityofchicago&lt;/a&gt;公开&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;New York Stock Exchange (NYSE)的股价数据&lt;br /&gt;
IBM历史股价 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/IBMStock.csv&#34;&gt;IBMStock.csv&lt;/a&gt;&lt;br /&gt;
通用电气历史股价 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/GEStock.csv&#34;&gt;GEStock.csv&lt;/a&gt;&lt;br /&gt;
宝洁历史股价 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/ProcterGambleStock.csv&#34;&gt;ProcterGambleStock.csv&lt;/a&gt;&lt;br /&gt;
可口可乐历史股价 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/CocaColaStock.csv&#34;&gt;CocaColaStock.csv&lt;/a&gt;&lt;br /&gt;
波恩历史股价 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/BoeingStock.csv&#34;&gt;BoeingStock.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://www.infochimps.com&#34;&gt;infochimps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;美国人口普查数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/CPSData.csv&#34;&gt;CPSData.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://thedataweb.rm.census.gov/ftp/cps_ftp.html&#34;&gt;Current Population Survey (CPS)&lt;/a&gt;&lt;br /&gt;
另付CPSData里面的地区代码 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/MetroAreaCodes.csv&#34;&gt;MetroAreaCodes.csv&lt;/a&gt; 和 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/CountryCodes.csv&#34;&gt;CountryCodes.csv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit2:7d081d68d33a6cb2f2159d016a647e43&#34;&gt;Unit2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;影响酒价格的因素&lt;br /&gt;
&lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/wine.csv&#34;&gt;wine.csv&lt;/a&gt; 和 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/wine_test.csv&#34;&gt;wine_test.csv&lt;/a&gt;&lt;br /&gt;
来自研究论文 &lt;a href=&#34;http://www.liquidasset.com/winedata.html&#34;&gt;Liquid Assets&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;棒球比赛数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/baseball.csv&#34;&gt;baseball.csv&lt;/a&gt;&lt;br /&gt;
来自 &lt;a href=&#34;http://www.baseball-reference.com&#34;&gt;baseball-reference&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;篮球比赛数据&lt;br /&gt;
&lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/NBA_train.csv&#34;&gt;NBA_train.csv&lt;/a&gt; 和 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/NBA_test.csv&#34;&gt;NBA_test.csv&lt;/a&gt;&lt;br /&gt;
来自 &lt;a href=&#34;http://www.basketball-reference.com&#34;&gt;basketball-reference&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;1983-2008全球气候变化状况 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/climate_change.csv&#34;&gt;climate_change.csv&lt;/a&gt;&lt;br /&gt;
其中，温度(Temp)数据来自 &lt;a href=&#34;http://www.cru.uea.ac.uk/cru/data/temperature/&#34;&gt;Climatic Research Unit at the University of East Anglia&lt;/a&gt;&lt;br /&gt;
大气成分(CO2, N2O, CH4, CFC.11, CFC.12)数据来自 &lt;a href=&#34;http://www.esrl.noaa.gov/gmd/ccgg/data-products.html&#34;&gt;ESRL/NOAA Global Monitoring Division&lt;/a&gt;&lt;br /&gt;
颗粒物(Aerosols)数据来自 &lt;a href=&#34;http://data.giss.nasa.gov/modelforce/strataer/&#34;&gt;Godard Institute for Space Studies at NASA&lt;/a&gt;&lt;br /&gt;
TSI(total solar irradiance)数据来自 &lt;a href=&#34;http://solarisheppa.geomar.de/solarisheppa/cmip5&#34;&gt;SOLARIS-HEPPA project website&lt;/a&gt;&lt;br /&gt;
multivariate El Nino Southern Oscillation index (MEI)数据来自 &lt;a href=&#34;http://www.esrl.noaa.gov/psd/enso/mei/table.html&#34;&gt;ESRL/NOAA Physical Sciences Division&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Programme for International Student Assessment (PISA)国际留学生评价程序&lt;br /&gt;
&lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/pisa2009train.csv&#34;&gt;pisa2009train.csv&lt;/a&gt; 和 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/pisa2009test.csv&#34;&gt;pisa2009test.csv&lt;/a&gt;&lt;br /&gt;
这些数据来自美国国家教育统计中心的文件 &lt;a href=&#34;http://nces.ed.gov/pubsearch/pubsinfo.asp?pubid=2011038&#34;&gt;2009 PISA Public-Use Data Files&lt;/a&gt;。&lt;br /&gt;
注意，使用这些数据的时候，你要遵守 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/NCES_Data_Use_Agreement.txt&#34;&gt; NCES data use agreement&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;流感趋势数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/FluTrain.csv&#34;&gt;FluTrain.csv&lt;/a&gt;&lt;br /&gt;
我们可以使用 &lt;a href=&#34;http://www.google.com/trends/&#34;&gt;Google Trends&lt;/a&gt; 来观察人们都在搜索什么内容。如果搜索流感信息的人很多，那么可能就要爆发流感啦！是否真的爆发流感呢，&lt;a href=&#34;http://www.cdc.gov/flu/weekly/fluactivitysurv.htm&#34;&gt;U.S. Centers for Disease Control and Prevention&lt;/a&gt;会公开influenza-like illness (ILI)这样的信息。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;美国各州信息&lt;br /&gt;
&lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/statedata.csv&#34;&gt;statedata.csv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;现代汽车 Hyundai Elantra 在美国的销售状况&lt;br /&gt;
&lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/elantra.csv&#34;&gt;elantra.csv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit3:7d081d68d33a6cb2f2159d016a647e43&#34;&gt;Unit3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;病人信息 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/framingham.csv&#34;&gt;framingham.csv&lt;/a&gt;&lt;br /&gt;
数据来自这项研究 &lt;a href=&#34;https://biolincc.nhlbi.nih.gov/static/studies/teaching/framdoc.pdf&#34;&gt;BioLINCC&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;总统大选数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/PollingData.csv&#34;&gt;PollingData.csv&lt;/a&gt;&lt;br /&gt;
上面的CSV可能有些问题，你也许想使用这份处理过后的 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/PollingData_Imputed.csv&#34;&gt;PollingData_Imputed.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://www.realclearpolitics.com&#34;&gt;RealClearPolitics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;流行歌曲数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/songs.csv&#34;&gt;songs.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;https://en.wikipedia.org/wiki/Billboard_Hot_100&#34;&gt;Wikipedia&lt;/a&gt;, &lt;a href=&#34;http://www.billboard.com&#34;&gt;Billboard.com&lt;/a&gt;, 和 &lt;a href=&#34;http://echonest.com&#34;&gt;EchoNest&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;罪犯假释数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/parole.csv&#34;&gt;parole.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://www.icpsr.umich.edu/icpsrweb/NACJD/series/38/studies/26521?archive=NACJD&amp;amp;sortBy=7&#34;&gt;United States 2004 National Corrections Reporting Program&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;借款人信用数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/loans.csv&#34;&gt;loans.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;https://www.lendingclub.com/info/download-data.action&#34;&gt;LendingClub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit4:7d081d68d33a6cb2f2159d016a647e43&#34;&gt;Unit4&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;美国最高法院斯蒂文森大法官判例数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/stevens.csv&#34;&gt;stevens.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://wusct.wustl.edu/data.php&#34;&gt;Supreme Court Forecasting Project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;病人信息 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/ClaimsData.csv.zip&#34;&gt;ClaimsData.csv.zip&lt;/a&gt;（这个有点大，解压后17M，慎重下载）&lt;br /&gt;
数据来自 &lt;a href=&#34;https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/DE_Syn_PUF.html&#34;&gt;DE-SynPUF dataset&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;波士顿房价数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/boston.csv&#34;&gt;boston.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://archive.ics.uci.edu/ml/datasets/Housing&#34;&gt;UCI Machine Learning Repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;投票动机数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/gerber.csv&#34;&gt;gerber.csv&lt;/a&gt;&lt;br /&gt;
数据来自研究项目 &lt;a href=&#34;http://web.calstatela.edu/faculty/blawson/gerber%20green%20larimer%202008.pdf&#34;&gt;2008 research paper&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字母识别数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/letters_ABPR.csv&#34;&gt;letters_ABPR.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://archive.ics.uci.edu/ml/datasets/Letter+Recognition&#34;&gt;UCI Machine Learning Repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;人口普查数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/census.csv&#34;&gt;census.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://archive.ics.uci.edu/ml/datasets/Adult&#34;&gt;UCI Machine Learning Repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit5:7d081d68d33a6cb2f2159d016a647e43&#34;&gt;Unit5&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;邮件数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/energy_bids.csv&#34;&gt;energy_bids.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://trec-legal.umiacs.umd.edu&#34;&gt;TREC Legal Track&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;wiki页面&lt;a href=&#34;https://en.wikipedia.org/wiki/Language&#34;&gt;Language&lt;/a&gt;的编辑日志 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/wiki.csv&#34;&gt;wiki.csv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;医院处方数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/clinical_trial.csv&#34;&gt;clinical_trial.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://www.ncbi.nlm.nih.gov/pubmed&#34;&gt;Pubmed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;垃圾邮件数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/emails.csv&#34;&gt;emails.csv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit6:7d081d68d33a6cb2f2159d016a647e43&#34;&gt;Unit6&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://files.grouplens.org/datasets/movielens/ml-100k/u.item&#34;&gt;电影信息页面&lt;/a&gt;&lt;br /&gt;
你需要自己保存和解析。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;单词出现频率数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/dailykos.csv&#34;&gt;dailykos.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;https://www.dailykos.com&#34;&gt;Daily Kos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;航空旅客里程数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/AirlinesCluster.csv&#34;&gt;AirlinesCluster.csv&lt;/a&gt;&lt;br /&gt;
数据来自书籍 &lt;a href=&#34;http://www.dataminingbook.com&#34;&gt;Data Mining for Business Intelligence&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;股票涨跌数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/StocksCluster.csv&#34;&gt;StocksCluster.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://www.infochimps.com/datasets/nasdaq-exchange-daily-1970-2010-open-close-high-low-and-volume&#34;&gt;infochimps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit7:7d081d68d33a6cb2f2159d016a647e43&#34;&gt;Unit7&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;罪犯地点数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/mvt.csv&#34;&gt;mvt.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://gis.chicagopolice.org&#34;&gt;芝加哥警察局&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;谋杀案件数据 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/murders.csv&#34;&gt;murders.csv&lt;/a&gt;&lt;br /&gt;
数据由FBI统计，公开于&lt;a href=&#34;https://en.wikipedia.org/wiki/Gun_violence_in_the_United_States_by_state&#34;&gt;WIKI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MIT留学生信息 &lt;a href=&#34;https://d37djvu3ytnwxt.cloudfront.net/asset-v1:MITx+15.071x_3+1T2016+type@asset+block/intlall.csv&#34;&gt;intlall.csv&lt;/a&gt;&lt;br /&gt;
数据来自 &lt;a href=&#34;http://web.mit.edu/iso/&#34;&gt;MIT International Students Office&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MIT:The Analytics Edge 笔记09－整数优化</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-20-R09/</link>
      <pubDate>Mon, 20 Jun 2016 09:10:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-20-R09/</guid>
      <description>

&lt;p&gt;MIT课程 &lt;a href=&#34;https://courses.edx.org/courses/course-v1:MITx+15.071x_3+1T2016/info&#34;&gt;15.071x The Analytics Edge&lt;/a&gt; 第九单元的学习记录。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;integer-optimization:2434367f671f708106a85f2a67d5fdf5&#34;&gt;Integer Optimization&lt;/h2&gt;

&lt;p&gt;第九单元的主题是整数优化。&lt;/p&gt;

&lt;h3 id=&#34;1-理论:2434367f671f708106a85f2a67d5fdf5&#34;&gt;1.理论&lt;/h3&gt;

&lt;h4 id=&#34;整数优化:2434367f671f708106a85f2a67d5fdf5&#34;&gt;整数优化&lt;/h4&gt;

&lt;p&gt;整数优化，即所有解都是整数。&lt;br /&gt;
它们有可能是0或者1。这适用于回答是Yes／No的情况。&lt;br /&gt;
它们有可能是1，2，3……这适用于回答是具体的数值的情况。&lt;/p&gt;

&lt;h3 id=&#34;2-实战:2434367f671f708106a85f2a67d5fdf5&#34;&gt;2.实战&lt;/h3&gt;

&lt;p&gt;做法和线性优化是一样的。只是在条件里面要加一个Integer／Binary的限制。所以就不细讲了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIT:The Analytics Edge 笔记08－线性优化</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-19-R08/</link>
      <pubDate>Sun, 19 Jun 2016 09:28:58 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-19-R08/</guid>
      <description>

&lt;p&gt;MIT课程 &lt;a href=&#34;https://courses.edx.org/courses/course-v1:MITx+15.071x_3+1T2016/info&#34;&gt;15.071x The Analytics Edge&lt;/a&gt; 第八单元的学习记录。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;linear-optimization:b27ba36c9adad52060ae60e72a6ed77d&#34;&gt;Linear Optimization&lt;/h2&gt;

&lt;p&gt;第八单元的主题是线性优化。&lt;/p&gt;

&lt;h3 id=&#34;1-理论:b27ba36c9adad52060ae60e72a6ed77d&#34;&gt;1.理论&lt;/h3&gt;

&lt;h4 id=&#34;线性优化:b27ba36c9adad52060ae60e72a6ed77d&#34;&gt;线性优化&lt;/h4&gt;

&lt;p&gt;线性优化，其实是用Excel／LibreOffice求解一个简单的多元1次多项式的最大值。&lt;br /&gt;
使用LibreOffice是这样做的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在单元格中填写多项式和约束条件。&lt;/li&gt;
&lt;li&gt;选取Tools-&amp;gt;Solver，指定多项式，以及各种约束条件，当然也要选择［Linear Solver］这个方法。&lt;/li&gt;
&lt;li&gt;点击［Solve］就可以得到结果啦。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在Excel中，需要在&lt;code&gt;option&lt;/code&gt; - &lt;code&gt;addin&lt;/code&gt; - &lt;code&gt;Excel addin&lt;/code&gt; 选择加载&lt;code&gt;solver addin&lt;/code&gt;，这样才会在data菜单栏中显示出&lt;code&gt;solver&lt;/code&gt;按钮。&lt;/p&gt;

&lt;h4 id=&#34;sensitivity-analysis:b27ba36c9adad52060ae60e72a6ed77d&#34;&gt;sensitivity analysis&lt;/h4&gt;

&lt;p&gt;sensitivity analysis用来展示，结果是如何随数据（变量／约束条件）的变化而变化的。&lt;br /&gt;
shadow prices：表示当需求增加时，将（总量增加量／需求增量）的值定义为影子价格。&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160624-R08-sensitive.png&#34; alt=&#34;sensitivity analysis&#34; /&gt;
如图，纵坐标和横坐标表示两种不同的需求。暗红色阴影表示可能的取值范围。&lt;br /&gt;
如果不断提高需求R，从100到125到150，影子价格都保持不变；但是如果需求提高到170，影子价格就会发生变化。&lt;br /&gt;
如果不短提高需求D，从150到100，影子价格都为0，总量也不变。&lt;/p&gt;

&lt;p&gt;影子价格有可能在需求增加的一个范围内保持不变。也有可能一直为0。&lt;/p&gt;

&lt;h3 id=&#34;2-实战:b27ba36c9adad52060ae60e72a6ed77d&#34;&gt;2.实战&lt;/h3&gt;

&lt;p&gt;当然，用R也能解决这样的问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 先安装pkg
install.packages(&amp;quot;lpSolveAPI&amp;quot;)
library(lpSolveAPI)

# 创建模型
# 说明：
# 第一个参数是约束条件的个数。
# one capacity constraint: 载客量有一个最大值（飞机座位数）
# two demand constraints : 每种票价的数目（regular seats／discount seats）都有一个最大值
# 所以这个参数的取值是3
# 第二个参数是变量的个数。
# decision variables : 我们有两种票价（regular seats／discount seats）
# 所以这个参数的取值是2

AirlineSimple = make.lp(3,2)
# 创建出来的AirlineSimple是这样子的：
Model name: 
            C1    C2         
Minimize     0     0         
R1           0     0  free  0
R2           0     0  free  0
R3           0     0  free  0
Kind       Std   Std         
Type      Real  Real         
Upper      Inf   Inf         
Lower        0     0         

# 那下面我们就来指定多项式和约束条件
# 最终的效果是这样的：
# max         617*R + 238*D
# subject to    1*R +   1*D &amp;lt;= 166
#               1*R +   0*D &amp;lt;= 100
#               0*R +   1*D &amp;lt;= 150  

# 特别注意：执行顺序，set.objfn()不能放在前面，我被坑了。。。
# 指定约束条件（跟效果竖着对比着看）
set.column(AirlineSimple, 1, c(1,1,0))
set.column(AirlineSimple, 2, c(1,0,1))
set.constr.type(AirlineSimple, c(&amp;quot;&amp;lt;=&amp;quot;,&amp;quot;&amp;lt;=&amp;quot;,&amp;quot;&amp;lt;=&amp;quot;))
set.rhs(AirlineSimple, c(166,100,150))
# 指定两个变量的参数
set.objfn(AirlineSimple, c(617,238))
# 默认的是最小值，我们改为最大值
lp.control(AirlineSimple,sense=&#39;max&#39;)

# 这样就创建好了：
Model name: 
            C1    C2         
Maximize   617   238         
R1           1     1  &amp;lt;=  166
R2           1     0  &amp;lt;=  100
R3           0     1  &amp;lt;=  150
Kind       Std   Std         
Type      Real  Real         
Upper      Inf   Inf         
Lower        0     0

# 变量的取值是上面最后两行Upper和Lower，可以通过函数set.bounds()来修改

# 现在可以来运行了
# 如果正确运行，返回值是0
solve(AirlineSimple)
# 查看取得的最大值
get.objective(AirlineSimple)
# 查看取最大值时，两个变量的取值
get.variables(AirlineSimple)

# JFK 从DFW中转，到LAX的场景
# 有8个约束条件，6个变量：
AirlineConnecting = make.lp(8,6)
set.column(AirlineConnecting, 1, c(1,1,1,0,0,0,0,0))
set.column(AirlineConnecting, 2, c(1,1,0,1,0,0,0,0))
set.column(AirlineConnecting, 3, c(1,0,0,0,1,0,0,0))
set.column(AirlineConnecting, 4, c(1,0,0,0,0,1,0,0))
set.column(AirlineConnecting, 5, c(0,1,0,0,0,0,1,0))
set.column(AirlineConnecting, 6, c(0,1,0,0,0,0,0,1))
set.constr.type(AirlineConnecting, rep(&amp;quot;&amp;lt;=&amp;quot;,8))
set.rhs(AirlineConnecting, c(166,166,80,120,75,100,60,110))
set.objfn(AirlineConnecting, c(428,190,642,224,512,190))
lp.control(AirlineConnecting,sense=&#39;max&#39;)

# 模型稍微有点大
Model name: 
        C1    C2    C3    C4    C5    C6         
Maximize   428   190   642   224   512   190         
R1           1     1     1     1     0     0  &amp;lt;=  166
R2           1     1     0     0     1     1  &amp;lt;=  166
R3           1     0     0     0     0     0  &amp;lt;=   80
R4           0     1     0     0     0     0  &amp;lt;=  120
R5           0     0     1     0     0     0  &amp;lt;=   75
R6           0     0     0     1     0     0  &amp;lt;=  100
R7           0     0     0     0     1     0  &amp;lt;=   60
R8           0     0     0     0     0     1  &amp;lt;=  110
Kind       Std   Std   Std   Std   Std   Std         
Type      Real  Real  Real  Real  Real  Real         
Upper      Inf   Inf   Inf   Inf   Inf   Inf         
Lower        0     0     0     0     0     0

solve(AirlineConnecting)
get.objective(AirlineConnecting)
get.variables(AirlineConnecting)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>乌托邦</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-17-life/</link>
      <pubDate>Fri, 17 Jun 2016 21:22:08 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-17-life/</guid>
      <description>&lt;p&gt;今天早上读到&lt;a href=&#34;http://www.jiemian.com/article/209404.html&#34;&gt;两个乌托邦人&lt;/a&gt;这篇文章，下面这段很有感触。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;赛斯的故事是关于一个人寻找到自己在这世界上的位置。我想起来老舍说，每人在这世间，就像八百尊罗汉，各有各的位置。你实在不能像对桌上的尘土一样，随手拿抹布就把我抹掉了。太平洋也真是座温情的海洋。它允许一个奇葩，这样合理地长大，实现梦想，拥有书、拥有沿海顶楼的好风光、拥有盛满三文鱼的冰箱。这无限孤独又无限美满的人生。

每当我怀疑，我的人生究竟有没有意义的时候，我就会想想赛斯这奇葩。我会诧异如何从一开始每个人想要的都只不过是一个幸福的人生。结果走着走着，就变成了一个“独上高楼、高处不胜寒”的人生，变成了“十年生死两茫茫”的人生，变成了日复一日、年复一年，期待着总有一天能够赢取回报、得偿所愿，然后再终于快乐起来的人生。

我们等下去的时候，他蹦跶着跳进海里捞螃蟹，不知不觉就跑远了。我有些羡慕。

我逐渐发觉心理学以平均值导出关于人性若干结论的好笑之处：人与人之间的差异如此巨大，使得一千个人与一个人的样本，距离真理都同样远。曾有一万人的数据表明勤奋带来成功，再加上三百回研究支持金钱与幸福的钟型曲线关系，可世上奇葩那样多，这些适用于群体的结论就必定不可能与任何一个个体完美匹配。这便是人类群体与小白鼠的区别，而赛斯最早看清。

他让我看到，这样活过一生也OK。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个人非常立体的生活，在不那么熟悉的眼里都被扁平化了。好比看一场比赛的直播，过程惊心动魄，这是亲身体验；而晚间新闻中，却只有几句湖带过，这是别人眼里的我。更加可怕的是，普通人的一生，投影到历史上，简直微不足道。所以，还是把自己的生活过精彩吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016六月 孔庙泰山行记</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-17-taishan/</link>
      <pubDate>Fri, 17 Jun 2016 20:53:25 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-17-taishan/</guid>
      <description>

&lt;h4 id=&#34;孔庙孔府孔林:93cd1a03fb24cb10fd9ad355849ea278&#34;&gt;孔庙孔府孔林&lt;/h4&gt;

&lt;p&gt;可能是宗教建筑意外，中国唯一历经各朝战火却能幸存的建筑了。建筑从宋到民国，并且在末尾一个小型的博物馆中看到了乙瑛碑，意外收获。&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160611_sankong.jpg&#34; alt=&#34;三孔邮戳&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;泰山:93cd1a03fb24cb10fd9ad355849ea278&#34;&gt;泰山&lt;/h4&gt;

&lt;p&gt;传统的红门线路，2个多小时到南天门。虽然不是特别辛苦，但是人挤人真的很无聊，而且并没有多少风景可以看。&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160617-taishan.JPG&#34; alt=&#34;五岳独尊&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;泰山石刻:93cd1a03fb24cb10fd9ad355849ea278&#34;&gt;泰山石刻&lt;/h4&gt;

&lt;p&gt;在岱庙见到了向往已久的李斯泰山石刻（仅存9个字），以及明朝的临摹（还有十几个字），原件据说是清朝时从山顶的水池中找到的。真是唏嘘历史的变迁。&lt;/p&gt;

&lt;h4 id=&#34;日常生活:93cd1a03fb24cb10fd9ad355849ea278&#34;&gt;日常生活&lt;/h4&gt;

&lt;p&gt;沉醉于旅途中这样的瞬间，窥见别人的日常生活。许久没有品尝到的人间烟火。&lt;br /&gt;
另外一个捷径是逛当地的菜市场，婺源清华镇、绩溪、大同、苏州……明显能感受到勃勃的生机。&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160610_band.jpg&#34; alt=&#34;日常生活&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>训练专注力</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-15-focus/</link>
      <pubDate>Wed, 15 Jun 2016 20:28:54 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-15-focus/</guid>
      <description>

&lt;h4 id=&#34;1-专注的状态:067ea3473217959ce25f78341d81828e&#34;&gt;1.专注的状态&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;流体验，指的是当人完全专注地投入一项事业中时，可以从中体验到的极度的快乐。沉浸在这种快乐当中的感受与一般的高兴不同，它是一种难得的高峰体验。人们在这时注意力会完全集中在当下的事物上，感觉不到自我的存在，感觉时间在不知不觉中飞逝，创造力和灵感得到激发，内心非常专注而平静，没有任何冲突，并且从自己所从事的事物中获得极大的满足。所谓的“废寝忘食”，就是沉浸在心流体验中的人们会出现的忘我状态。经常拥有这种高峰体验，会让人的内心得到升华，工作和生活进入到更高的境界，也是人充分实现自身潜能的一个重要途径。

这种高峰体验的出现又一些必要条件：首先就是需要人能毫无杂念地投入，全神贯注；另外，需要所做的事情和个人的能力很好地匹配，若是太过简单，人容易感觉无聊，太过复杂，人则容易感觉受挫；第三，人需要能在这个过程中不断地取得进展，比较明确的目标和及时的反馈都很重要，可以帮助人不断地调整自己的行动。有趣的是，人通常都是在非常积极地为事物努力的时候才会体验到这种极度的快乐。如果只是从事一些被动的活动，比如看电视等，哪怕它们会让人愉快，也不会激发心流。除此之外，精力涣散和心不在焉也会减少人们从事某项事物中获得的乐趣。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-进入状态-保持状态:067ea3473217959ce25f78341d81828e&#34;&gt;2.进入状态／保持状态&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;程序员们都知道，任务切换需要耗费许多额外的花销，通俗地来讲，首先需要保存当前上下文以便下次能够顺利切换回来，然后要加载目标任务的上下文。如果一个系统不停地在多个任务之间来回倒腾，就会耗费大量的时间在上下文切换上，无形中浪费很多的时间。

相比之下，如果只做一件任务，就不会有此损失。这就是为什么专注的人比不专注的人时间利用效率高得多的原因。任务切换的暗时间看似非常不明显，甚至很多人认为“多任务”是件很好的事情（有时候的确是），但日积月累起来就会发现，消耗在切换上的时间越来越多。

另外，大脑开始一件任务的时候必须要有一定时间来“热身”，这个时间因人而异，并且可以通过练习来改变。举个例子，你看了一会书之后，忽然感到一阵无聊，忍不住打开浏览器，十分钟后你想起来还要继续看书，但要回复到当时理想的状态，却需要一段时间来努力去集中精力，把记忆中相关的知识全都激活起来，从而才能进入“状态”，因为你上了十分钟网之后这些记忆已经被抑制了。如果这个“热身”状态需要一刻钟，那么看似十分钟的上网闲逛其实就花费了二十五分钟。

如果阅读的例子还不够生动，对于程序员来说其实有更好的例子：你写程序写得正high，忽然被叫去开了一通会，写到一半的代码搁在那儿。等你开完会回来你需要多久能够重新进入状态？又或者，你正在调试程序，你已经花了二十分钟的时间把与这个bug可能相关的代码前前后后都理解了一遍，心中构建了一个大致的地图，就在这时，呃，你又被叫去开了个会(:D)，开完会回来，可想而知，得花上一些时间来回想一下刚刚弄清的东西了。

迅速进入状态的能力是可以锻炼的，根据我个人的经验，至少可以缩短到3-5分钟。但要想完全进入状态，却是很难在这么短的时间实现的。所谓完全进入状态，举个例子：你看了3个小时的书，或者调试了半个小时的程序之后，往往满脑子都是相关的东西，所有这些知识都处在活跃状态，换言之你大脑中所有相关的记忆神经网络都被激活了，要达到这样一种忘记时间流逝的“沉浸”状态（心理学上叫做“流体验”），不是三两分钟的事情。而一旦这种状态被破坏，无形间效率就会大打折扣。这也是为什么我总是倾向于创造大块的时间来阅读重要的东西，因为这样有利于“沉浸”进去，使得新知识可以和大脑中与其相关的各种既有的知识充分融合，关联起来，后者对于深刻的记忆非常有帮助。

要充分利用暗时间，不仅要能够迅速进入状态，另一个很重要的习惯就是能够保持状态多久（思维体力）。

能够迅速进入专注状态，以及能够长期保持专注状态，是高效学习的两个最重要习惯。
值得庆幸的是，专注力和耐力与才能不同，可以通过训练于后天获得可以不断提升其资质。只要每天坐在书桌前，训练将意识倾注于一点，自然就能掌握。这同前面写过的强化肌肉的做法十分相似。每天不间断地写作集中意识去工作，这些非做不可----将这样的信息持续不断地传递给身体系统，让它牢牢地记住，再悄悄移动刻度，一点一点将极限值将上提升，注意不让身体发觉。这跟每天坚持慢跑，强化肌肉，逐步打造出跑步者的体型，乃是异曲同工。给它刺激，持续。再给它刺激，持续。这一过程当然需要耐心，不过一定会得到相应的回报。

优秀的侦探小说家雷蒙德.钱德勒在私信中说过：“哪怕没有什么东西可写，我私吞也肯定在书桌前坐上好几个小时，独自一人集中精力。”他这么做是为了什么，我完全能理解。钱德勒通过这么做，来提高职业作家必需的膂力，静静地提高士气。这样一种日常训练对他必不可缺。

我认为写作长篇小说是一种体力劳动。写文章属于脑力劳动，然而写出一本大部头来，更近于体力劳动。诚然，写书并不需要举起沉重的物体，也不需要飞速地奔来跑去，高高地蹿上跳下。世间的很多人似乎只看到表面，将作家的工作视为宁静而更改的书斋劳动，以为有了足以端起一只咖啡杯的力量，就能写小说了。试它一试，立即就会明白，写小说并非那么安逸的工作。坐在书桌前，将神经如同激光束一般集于一点，动用想象力，从“无”的地平线上催生出故事来，挑选出一个个正确的词语，让所有的流程准确无误----这样一种工作，与一般人想象的相比，更为长久地需要远为巨大的能量。这固然不必运动身体，劳筋动骨的劳动却在体内热火朝天地展开。固然，思索问题的是脑子，小说家却需披挂着叫“故事”的全副装备，动用全身进行思考，这要求作家彻底地驱使----在许多时候是奴役----肢体能力。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-排除干扰:067ea3473217959ce25f78341d81828e&#34;&gt;3.排除干扰&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;干吗还会欣羡我能坐稳在咖啡馆里呢？到咖啡馆原本就为着隔离而来，隔离自己的家，隔离善良的声音，隔离掉所有熟悉、舒适、温暖的东西；正在写长篇的小说家林俊颖一人独居，如今却也冲出到咖啡馆来，他笑着说，书架一直在那里叫你，你一碰到困难，借口翻翻资料，寻找感觉，接下来你就发现自己又埋进某本书、某部小说里两小时了。所以，所有像回事的作家最终几乎都在早上书写，趁着整个世界才刚醒来，还跟你暂时处在一种相互隔离的状态，你还有能力把它当在外头——就连海明威这种浮夸好热闹的人都告诉我们，在早晨进入写作之前，不做其他任何有企图心的事；纳博科夫一致工作到下午，知道黄昏散步时才找报纸看，才放世界溜进来；在淡水写作的舞鹤甚至不读报，他只在喂食镇上街猫时顺便瞄一眼头条，知道没发生战争，末日还没来就可以了。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-养成习惯:067ea3473217959ce25f78341d81828e&#34;&gt;4.养成习惯&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;书中主人翁流落赌城，在绝望时刻偶然从一个老头手上得到一个必然赢钱的赌方，但这个最后一定大赢的赌方非常诡异非常磨人，它必须先挨过一定阶段的输钱，只能输不能赢，而且明知是输亦一步也不能省——写小说的格林迷朱天心尤其喜欢这个例子，她在新小说顺利开笔之前，一样总要经历这同样的短则数日长可数星期的枯坐思索（在小说题材乃至内容已经完全锁定备妥的情况下），明明知道一定空手而回仍得每天带着书、草稿本和笔到写作的咖啡馆报到，她出门时的口头禅便是：“去输钱”。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>善哉行</title>
      <link>http://youngspring1.github.io/post/2016/2016-06-06-lonely/</link>
      <pubDate>Mon, 06 Jun 2016 22:46:00 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-06-06-lonely/</guid>
      <description>

&lt;h2 id=&#34;善哉行:fc69331b0f799d0bad7de7a3734ff807&#34;&gt;善哉行&lt;/h2&gt;

&lt;h4 id=&#34;曹丕:fc69331b0f799d0bad7de7a3734ff807&#34;&gt;曹丕&lt;/h4&gt;

&lt;p&gt;上山采薇，薄暮苦饥。&lt;/p&gt;

&lt;p&gt;溪谷多风，霜露沾衣。&lt;/p&gt;

&lt;p&gt;野雉群雊，猿猴相追。&lt;/p&gt;

&lt;p&gt;还望故乡，郁何垒垒！&lt;/p&gt;

&lt;p&gt;高山有崖，林木有枝。&lt;/p&gt;

&lt;p&gt;忧来无方，人莫之知。&lt;/p&gt;

&lt;p&gt;人生如寄，多忧何为？&lt;/p&gt;

&lt;p&gt;今我不乐，岁月如驰。&lt;/p&gt;

&lt;p&gt;汤汤川流，中有行舟。&lt;/p&gt;

&lt;p&gt;随波转薄，有似客游。&lt;/p&gt;

&lt;p&gt;策我良马，被我轻裘。&lt;/p&gt;

&lt;p&gt;载驰载驱，聊以忘忧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIT:The Analytics Edge 笔记07－可视化</title>
      <link>http://youngspring1.github.io/post/2016/2016-05-24-R07/</link>
      <pubDate>Tue, 24 May 2016 09:18:29 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016/2016-05-24-R07/</guid>
      <description>

&lt;p&gt;MIT课程 &lt;a href=&#34;https://courses.edx.org/courses/course-v1:MITx+15.071x_3+1T2016/info&#34;&gt;15.071x The Analytics Edge&lt;/a&gt; 第七单元的学习记录。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;visualization:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;Visualization&lt;/h2&gt;

&lt;p&gt;第七单元的主题是可视化。&lt;/p&gt;

&lt;h3 id=&#34;1-简介:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;1.简介&lt;/h3&gt;

&lt;p&gt;plot和ggplot2的比较&lt;br /&gt;
plot：只有简单的点和线，不容易添加其他元素。&lt;br /&gt;
ggplot2：引入图层，很容易添加其他元素&lt;/p&gt;

&lt;h4 id=&#34;ggplot2:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;ggplot2&lt;/h4&gt;

&lt;p&gt;ggplot2三要素：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data&lt;br /&gt;
数据，使用data.frame。&lt;/li&gt;
&lt;li&gt;Aesthetic mapping&lt;br /&gt;
指定如何将 data.frame里的变量映射到图形属性上。比如，颜色，形状，比例，x／y坐标，分组等等。&lt;/li&gt;
&lt;li&gt;Geometric objects&lt;br /&gt;
决定数据以什么样的形式显示。比如，点，线，箱线图，条形图，多边形等等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;结合下面这条命令，参数WHO就是提供数据的data.frame，参数aes()就是Aesthetic mapping，后面用加号连结的类似geom_point()就是Geometric objects。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 形式
# ggplot(data = NULL, mapping = aes(), ..., environment = parent.frame())
# 例子
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = Region)) + geom_point()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ase()即可以作为ggplot()的参数，又可以作为geom_XXXX()的参数&lt;/p&gt;

&lt;h4 id=&#34;aesthetic-mapping:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;Aesthetic mapping&lt;/h4&gt;

&lt;p&gt;坐标相关&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aes(x, y, xmin, xmax, ymin, ymax, xend, yend)
# 当然就是x，y坐标分别指定data.frame的某一列
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：坐标相关的，一般作为ggplot()的参数，其他的都可以作为geom()的参数。&lt;/p&gt;

&lt;h4 id=&#34;geometric-objects:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;Geometric objects&lt;/h4&gt;

&lt;p&gt;颜色相关&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aes(colour, fill, alpha)
# colour 颜色
# fill   填充指标，data.frame的某一列。也类似于分类，比如该列有两个因子，那么会用两种不同的颜色填充
# alpha  透明度，0到1之间的小数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分组相关&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aes(group)
# group 分组指标，可以指定为1，那所有数据都在1组。也可以指定data.frame的某一列
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;形态相关&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aes(linetype, size, shape)
# linetype 即lty，线段的类型
# size     点的大小，线的粗细。指定整数数值。
# shape    图形的类型
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图形的类型，即geom_point(shape = n)中n的取值&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160524-shapes.png&#34; alt=&#34;shapes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;线段的类型，即geom_point(lty = n)中n的取值&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160524-line-types.png&#34; alt=&#34;line-types&#34; /&gt;&lt;/p&gt;

&lt;p&gt;描绘形状&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;geom_point()  点
geom_line()   线
geom_tile()   条形图
geom_bar()    直方图
geom_ploygen()多边形
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：&lt;br /&gt;
binwidth = 5 :粒度？&lt;br /&gt;
geom_bar(stat=&amp;ldquo;identity&amp;rdquo;) :use the value of the y variable as is&lt;br /&gt;
geom_histogram(position = &amp;ldquo;identity&amp;rdquo;) :not to stack the histograms&lt;/p&gt;

&lt;h3 id=&#34;2-实战:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;2.实战&lt;/h3&gt;

&lt;h4 id=&#34;绘图:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;绘图&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# Read in data
WHO = read.csv(&amp;quot;WHO.csv&amp;quot;)
str(WHO)

# Plot from Week 1
plot(WHO$GNI, WHO$FertilityRate)

# Let&#39;s redo this using ggplot 
# Install and load the ggplot2 library:
install.packages(&amp;quot;ggplot2&amp;quot;)
library(ggplot2)

# Create the ggplot object with the data and the aesthetic mapping:
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))

# Add the geom_point geometry
scatterplot + geom_point()

# Make a line graph instead:
scatterplot + geom_line()

# Switch back to our points:
scatterplot + geom_point()

# Redo the plot with blue triangles instead of circles:
scatterplot + geom_point(color = &amp;quot;blue&amp;quot;, size = 3, shape = 17) 

# Another option:
scatterplot + geom_point(color = &amp;quot;darkred&amp;quot;, size = 3, shape = 8) 

# Add a title to the plot:
scatterplot + geom_point(colour = &amp;quot;blue&amp;quot;, size = 3, shape = 17) + ggtitle(&amp;quot;Fertility Rate vs. Gross National Income&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;分组:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;分组&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 因子，以颜色区分  
# Color the points by region: 
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = Region)) + geom_point()

# 数值，以颜色深浅区分
# Color the points according to life expectancy:
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = LifeExpectancy)) + geom_point()
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;拟合:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;拟合&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# Is the fertility rate of a country was a good predictor of the percentage of the population under 15?
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()

# Let&#39;s try a log transformation:
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point()

# Simple linear regression model to predict the percentage of the population under 15, using the log of the fertility rate:
mod = lm(Under15 ~ log(FertilityRate), data = WHO)
summary(mod)

# Add this regression line to our plot:
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() +  stat_smooth(method = &amp;quot;lm&amp;quot;)

# 99% confidence interval
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = &amp;quot;lm&amp;quot;, level = 0.99)

# No confidence interval in the plot
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE)

# Change the color of the regression line:
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = &amp;quot;lm&amp;quot;, colour = &amp;quot;orange&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;热力图:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;热力图&lt;/h4&gt;

&lt;p&gt;热力图（数据越多颜色越深）的效果，依靠scale_fill_gradient()来实现，可以通过low和high指定深浅区域的颜色，然后自动形成渐变效果。旁边的图例通过参数guide = &amp;ldquo;legend&amp;rdquo;来指定。&lt;br /&gt;
最终的命令如下，如何生成数据的，就不啰嗦了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Change the color scheme
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name=&amp;quot;Total MV Thefts&amp;quot;, low=&amp;quot;white&amp;quot;, high=&amp;quot;red&amp;quot;) + theme(axis.title.y = element_blank())
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;地理热力图:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;地理热力图&lt;/h4&gt;

&lt;p&gt;顾名思义，地理热力图就是在地图上显示热力图。&lt;br /&gt;
包map内置了美国地图、世界地图、法国地图、意大利地图等。地图的原理跟图片类似，图片就是按照某个粒度分成很多个像素点，然后保存像素点的颜色信息；地图就是按照经纬度分成很多点，保存每个点的信息（比如这个点位于哪个州，这样就形成一个美国地图）。
对比刚才的 ggplot() + geom_tile() + scale_fill_gradient()&lt;br /&gt;
我们现在使用 ggmap() + geom_point() + scale_fill_gradient()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Install and load two new packages:
install.packages(&amp;quot;maps&amp;quot;)
install.packages(&amp;quot;ggmap&amp;quot;)
library(maps)
library(ggmap)

# Load a map of Chicago into R:
chicago = get_map(location = &amp;quot;chicago&amp;quot;, zoom = 11)

# Look at the map
ggmap(chicago)

# Plot the first 100 motor vehicle thefts:
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))

# Round our latitude and longitude to 2 digits of accuracy, and create a crime counts data frame for each area:
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))

str(LatLonCounts)

# Convert our Longitude and Latitude variable to numbers:
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))

# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))

# Change the color scheme:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_colour_gradient(low=&amp;quot;yellow&amp;quot;, high=&amp;quot;red&amp;quot;)

# We can also use the geom_tile geometry
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill=&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;云图:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;云图&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 先准备下数据，我们需要很多单词。
# 跟文本处理类似，依旧使用tweets推文，只是我们这次不抽取词干。
library(tm)
tweets = read.csv(&amp;quot;tweets.csv&amp;quot;, stringsAsFactors=FALSE)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(&amp;quot;english&amp;quot;))
frequencies = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(frequencies))

# 我们需要的单词就是列名
colnames(allTweets)
# 我们需要的另一个指标是单词的频率
colSums(allTweets)

# 现在加载wordcloud这个包
library(wordcloud)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, .25))

# 参数 scale 指定了文字的大小
# scale=c(2, .25) 表示出现频率最高的单词，显示的字号为2，出现频率最小的单词，显示的字号为0.25
wordcloud(colnames(allTweets), colSums(allTweets))
# 等效于
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(4, 0.5))

# min.freq
# 只显示出现频率大于指定值的单词

# max.words
# 最多只显示指定数目的单词

# random.order == FALSE
# 最先显示出现频率最高的单词

# rot.per = 0.5
# 有一半的单词垂直显示。默认值是0.1。

# random.color == TRUE
# 使用随机颜色
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;颜色&lt;br /&gt;
包RColorBrewer支持下面这些调色板，可以输入 display.brewer.all() 看到下面这张图。&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160606-brewer.all.png&#34; alt=&#34;brewer.all&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ibrary(RColorBrewer)
display.brewer.all()

# 像这样使用
colors=brewer.pal(9, &amp;quot;Blues&amp;quot;)[5:9]
wordcloud(colnames(allTweets), colSums(allTweets), colors)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;保存:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;保存&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# Save our plot:
fertilityGNIplot = scatterplot + geom_point(colour = &amp;quot;blue&amp;quot;, size = 3, shape = 17) + ggtitle(&amp;quot;Fertility Rate vs. Gross National Income&amp;quot;)
pdf(&amp;quot;MyPlot.pdf&amp;quot;)
print(fertilityGNIplot)
dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;附录:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;附录&lt;/h3&gt;

&lt;h6 id=&#34;r中星期的显示:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;R中星期的显示&lt;/h6&gt;

&lt;p&gt;在中文系统上，weekdays()返回的结果是 “星期二 星期六 星期日 星期三 星期四 星期五 星期一”，如果希望输出的结果是“Friday    Monday  Saturday    Sunday  Thursday   Tuesday Wednesday”，应该怎么做？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Convert the Date variable to a format that R will recognize:
mvt$Date = strptime(mvt$Date, format=&amp;quot;%m/%d/%y %H:%M&amp;quot;)
mvt$Weekday = weekdays(mvt$Date)

table(mvt$Weekday)
星期二 星期六 星期日 星期三 星期四 星期五 星期一 
26791  27118  26316  27416  27319  29284  27397 

Sys.getlocale()
&amp;quot;zh_CN.UTF-8/zh_CN.UTF-8/zh_CN.UTF-8/C/zh_CN.UTF-8/zh_CN.UTF-8&amp;quot;
Sys.setlocale(&amp;quot;LC_TIME&amp;quot;, &amp;quot;en_US.UTF-8&amp;quot;)
&amp;quot;en_US&amp;quot;
Sys.getlocale()
&amp;quot;zh_CN.UTF-8/zh_CN.UTF-8/zh_CN.UTF-8/C/en_US.UTF-8/zh_CN.UTF-8&amp;quot;

table(mvt$Weekday)
Friday    Monday  Saturday    Sunday  Thursday   Tuesday Wednesday 
29284     27397     27118     26316     27319     26791     27416
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外注意到，不管是中文还是英文，都是按照字母表顺序排列的，不是按照实际中有意义的顺序排列的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WeekdayCounts = as.data.frame(table(mvt$Weekday))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c(&amp;quot;Sunday&amp;quot;, &amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Wednesday&amp;quot;, &amp;quot;Thursday&amp;quot;, &amp;quot;Friday&amp;quot;,&amp;quot;Saturday&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;factor转数字:8f9383a8559e56d2b013b78edf4886b3&#34;&gt;factor转数字&lt;/h6&gt;

&lt;p&gt;先把factor转成character，再转成数字&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Convert the second variable, Var2, to numbers and call it Hour:
DayHourCounts$Hour = as.numeric(as.character(DayHourCounts$Var2))
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;参考：&lt;br /&gt;
&lt;a href=&#34;http://www.cookbook-r.com/Graphs/Shapes_and_line_types/&#34;&gt;形状和线段的类型&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.cookbook-r.com/Graphs/Colors_(ggplot2)&#34;&gt;颜色&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>