<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>行行重行行</title>
    <link>http://youngspring1.github.io/</link>
    <description>Recent content on 行行重行行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <lastBuildDate>Tue, 22 Mar 2016 23:58:42 +0800</lastBuildDate>
    <atom:link href="http://youngspring1.github.io/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>data.table 教程3（翻译中）</title>
      <link>http://youngspring1.github.io/post/2016-03-22-datatable3/</link>
      <pubDate>Tue, 22 Mar 2016 23:58:42 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-22-datatable3/</guid>
      <description>

&lt;p&gt;目录：&lt;br /&gt;
1) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt;&lt;br /&gt;
2) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-21-datatable2/&#34;&gt;语义引用&lt;/a&gt;&lt;br /&gt;
3) Keys and fast binary search based subsets&lt;br /&gt;
4) Efficient reshaping using data.tables&lt;/p&gt;

&lt;p&gt;原文地址：&lt;br /&gt;
1) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-intro-vignette.html&#34;&gt;Introduction to data.table&lt;/a&gt;&lt;br /&gt;
2) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html&#34;&gt;Reference semantics&lt;/a&gt;&lt;br /&gt;
3) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-keys-fast-subset.html&#34;&gt;Keys and fast binary search based subsets&lt;/a&gt;&lt;br /&gt;
4) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reshape.html&#34;&gt;Efficient reshaping using data.tables&lt;/a&gt;&lt;br /&gt;
5) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-faq.html&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-keys:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;1. Keys&lt;/h2&gt;

&lt;h4 id=&#34;a-what-is-a-key:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;a) What is a key?&lt;/h4&gt;

&lt;h4 id=&#34;b-set-get-and-use-keys-on-a-data-table:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;b) Set, get and use keys on a data.table&lt;/h4&gt;

&lt;h4 id=&#34;c-keys-and-multiple-columns:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;c) Keys and multiple columns&lt;/h4&gt;

&lt;h2 id=&#34;2-combining-keys-with-j-and-by:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;2. Combining keys with j and by&lt;/h2&gt;

&lt;h4 id=&#34;a-select-in-j:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;a) Select in j&lt;/h4&gt;

&lt;h4 id=&#34;b-chaining:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;b) Chaining&lt;/h4&gt;

&lt;h4 id=&#34;c-compute-or-do-in-j:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;c) Compute or do in j&lt;/h4&gt;

&lt;h4 id=&#34;d-sub-assign-by-reference-using-in-j:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;d) sub-assign by reference using := in j&lt;/h4&gt;

&lt;h4 id=&#34;e-aggregation-using-by:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;e) Aggregation using by&lt;/h4&gt;

&lt;h2 id=&#34;3-additional-arguments-mult-and-nomatch:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;3. Additional arguments - mult and nomatch&lt;/h2&gt;

&lt;h4 id=&#34;a-the-mult-argument:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;a) The mult argument&lt;/h4&gt;

&lt;h2 id=&#34;4-binary-search-vs-vector-scans:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;4. binary search vs vector scans&lt;/h2&gt;

&lt;h4 id=&#34;a-performance-of-binary-search-approach:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;a) Performance of binary search approach&lt;/h4&gt;

&lt;h4 id=&#34;b-why-does-keying-a-data-table-result-in-blazing-fast-susbets:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;b) Why does keying a data.table result in blazing fast susbets?&lt;/h4&gt;

&lt;h2 id=&#34;总结:e288dbec01fe10fa9bd0f8ade4810458&#34;&gt;总结&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>R语言入门教程1（编写中）</title>
      <link>http://youngspring1.github.io/post/2016-03-22-R1/</link>
      <pubDate>Tue, 22 Mar 2016 23:20:42 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-22-R1/</guid>
      <description>

&lt;p&gt;最近用R语言改写一个现有的小工具，把学到的东西简单总结下。&lt;/p&gt;

&lt;p&gt;目录：&lt;br /&gt;
1) 数据结构&lt;br /&gt;
2) 输入输出&lt;br /&gt;
3) 图形初步&lt;br /&gt;
4) 基本数据管理&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;教程1介绍R语言中常用的几种数据结构。&lt;/p&gt;

&lt;h2 id=&#34;1-向量:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;1.向量&lt;/h2&gt;

&lt;h2 id=&#34;2-矩阵:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;2.矩阵&lt;/h2&gt;

&lt;h2 id=&#34;3-数组:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;3.数组&lt;/h2&gt;

&lt;h2 id=&#34;4-数据框:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;4.数据框&lt;/h2&gt;

&lt;h2 id=&#34;5-列表:42c22e7d6c4eed432ecfe282fd334b8f&#34;&gt;5.列表&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>data.table 教程2（翻译中）</title>
      <link>http://youngspring1.github.io/post/2016-03-21-datatable2/</link>
      <pubDate>Mon, 21 Mar 2016 19:56:45 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-21-datatable2/</guid>
      <description>

&lt;p&gt;目录：&lt;br /&gt;
1) &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt;&lt;br /&gt;
2) 语义引用&lt;br /&gt;
3) Keys and fast binary search based subsets&lt;br /&gt;
4) Efficient reshaping using data.tables&lt;/p&gt;

&lt;p&gt;原文地址：&lt;br /&gt;
1) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-intro-vignette.html&#34;&gt;Introduction to data.table&lt;/a&gt;&lt;br /&gt;
2) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html&#34;&gt;Reference semantics&lt;/a&gt;&lt;br /&gt;
3) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-keys-fast-subset.html&#34;&gt;Keys and fast binary search based subsets&lt;/a&gt;&lt;br /&gt;
4) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reshape.html&#34;&gt;Efficient reshaping using data.tables&lt;/a&gt;&lt;br /&gt;
5) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-faq.html&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本教程讨论data.table的语义引用，它允许通过引用来add/update/delete列，然后通过参数i和by结合。它主要给那些熟悉data.table语法、知道如何subset行／select列／分组的人使用。如果你对这些不熟悉，请学习上一讲 &lt;a href=&#34;http://youngspring1.github.io/post/2016-03-13-datatable1/&#34;&gt;data.table 介绍&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;数据:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;数据&lt;/h2&gt;

&lt;p&gt;我们继续使用上一讲中使用的航班信息flights。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights &amp;lt;- fread(&amp;quot;https://raw.githubusercontent.com/wiki/arunsrinivasan/    flights/NYCflights14/flights14.csv&amp;quot;)
flights
#         year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight
#      1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1
#      2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3
#      3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21
#      4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29
#      5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117
#     ---                                                                                      
# 253312: 2014    10  31     1459         1     1747       -30         0      UA  N23708   1744
# 253313: 2014    10  31      854        -5     1147       -14         0      UA  N33132   1758
# 253314: 2014    10  31     1102        -8     1311        16         0      MQ  N827MQ   3591
# 253315: 2014    10  31     1106        -4     1325        15         0      MQ  N511MQ   3592
# 253316: 2014    10  31      824        -5     1045         1         0      MQ  N813MQ   3599
#         origin dest air_time distance hour min
#      1:    JFK  LAX      359     2475    9  14
#      2:    JFK  LAX      363     2475   11  57
#      3:    JFK  LAX      351     2475   19   2
#      4:    LGA  PBI      157     1035    7  22
#      5:    JFK  LAX      350     2475   13  47
#     ---                                       
# 253312:    LGA  IAH      201     1416   14  59
# 253313:    EWR  IAH      189     1400    8  54
# 253314:    LGA  RDU       83      431   11   2
# 253315:    LGA  DTW       75      502   11   6
# 253316:    LGA  SDF      110      659    8  24
dim(flights)
# [1] 253316     17
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;介绍:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;在这一讲，我们会：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 简要讨论“语义引用”，然后比较操作符“:=”的两种不同的形式。
* 学习如何在参数j里面使用操作符“:=”来add/update/delete列，如何与参数i和by相结合。
* 了解操作符“:=”的副作用，并学习如何用 copy() 来避免这些副作用。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-语义引用:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;1. 语义引用&lt;/h2&gt;

&lt;p&gt;到目前为止，我们学习到的所有的操作都会生成一个新的数据集。接下来，我们会学习如何在原来数据集的基础上，添加／更新／删除那些已经存在的列。&lt;/p&gt;

&lt;h4 id=&#34;a-背景:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;a) 背景&lt;/h4&gt;

&lt;p&gt;在学习语义引用之前，我们先来看下面这个data.frame：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DF = data.frame(ID = c(&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;c&amp;quot;), a = 1:6, b = 7:12, c=13:18)
DF
#   ID a  b  c
# 1  b 1  7 13
# 2  b 2  8 14
# 3  b 3  9 15
# 4  a 4 10 16
# 5  a 5 11 17
# 6  c 6 12 18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当我们执行下面的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DF$c &amp;lt;- 18:13               # (1) -- replace entire column
# or
DF$c[DF$ID == &amp;quot;b&amp;quot;] &amp;lt;- 15:13 # (2) -- subassign in column &#39;c&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在R语言V3.1之前的版本里，上面这两种方法都会导致对整个data.frame的深度拷贝&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e5b9ad2772afb60de67bb09a99ffa4e1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e5b9ad2772afb60de67bb09a99ffa4e1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。而且还会拷贝多次&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e5b9ad2772afb60de67bb09a99ffa4e1:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e5b9ad2772afb60de67bb09a99ffa4e1:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。为了提高效率避免冗余操作，data.tabel使用了操作符&amp;rdquo;:=&amp;ldquo;。R里面本来就有定义了这个操作符，但却没有使用&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e5b9ad2772afb60de67bb09a99ffa4e1:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e5b9ad2772afb60de67bb09a99ffa4e1:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;br /&gt;
在R语言V3.1之前的版本里，方法(1)只做影子拷贝，处理性能有了很大提升。然而，方法(2)还是会做深度拷贝。这就意味着，对于同样的查询语句，想要选取的列越多，需要做的深度拷贝就越多。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;影子拷贝 vs 深度拷贝
影子拷贝，只是一份指向列的指针向量的拷贝，它会随着data.frame或者data.table的变化而变化。但在内存里，数据不是真的被复制了。   
深度拷贝，正相反，它会复制整个数据，并且保存在内存里。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用操作符&amp;rdquo;:=&amp;ldquo;，不管在R语言的什么版本里，不管是方法(1)还是方法(2)，都不会再拷贝。这是因为，操作符&amp;rdquo;:=&amp;ldquo;通过引用更新列。&lt;/p&gt;

&lt;h4 id=&#34;b-操作符:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;b) 操作符“:=”&lt;/h4&gt;

&lt;p&gt;在参数j中，操作符“:=”有两种使用方法：&lt;br /&gt;
a.左右等式的形式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[, c(&amp;quot;colA&amp;quot;, &amp;quot;colB&amp;quot;, ...) := list(valA, valB, ...)]

# when you have only one column to assign to you 
# can drop the quotes and list(), for convenience
DT[, colA := valA]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b.函数形式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[, `:=`(colA = valA, # valA is assigned to colA
      colB = valB, # valB is assigned to colB
      ...
)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;上面的两个例子只是用来说明使用的形式，并不是实际可以运行的代码示例。我们会在下一节中，用航班信息flight的data.table来举例说明。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 形式(a)比较容易编码，特别是，事先不知道需要被赋值的列的时候。
* 相对而言，形式(b)更加趁手，如果你愿意追加点注释😄。
* 操作符“:=”没有返回值。
* 既然参数j里面可以使用操作符“:=”，那么，就像上一讲中学习到的内容，我们可以和参数i和参数by一起，做些聚合的运算。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面两种形式里，注意我们没有把运算的结果赋值给一个变量。因为完全没必要。我们直接更新data.table。让我们通过一些例子来说明。&lt;br /&gt;
在接下来的教程里，我们对航班信息flight，这个data.table来示例。&lt;/p&gt;

&lt;h2 id=&#34;2-通过引用添加-更新-删除列:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;2. 通过引用添加／更新／删除列&lt;/h2&gt;

&lt;h4 id=&#34;a-添加列:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;a) 添加列&lt;/h4&gt;

&lt;p&gt;－如何对每次航班，添加 speed 和 total delay 两列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[, `:=`(speed = distance / (air_time/60), # speed in km/hr
           delay = arr_delay + dep_delay)]       # delay in minutes
head(flights)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21    JFK
# 4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29    LGA
# 5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117    JFK
# 6: 2014     1   1     1824         4     2145         0         0      AA  N3DEAA    119    EWR
#    dest air_time distance hour min    speed delay
# 1:  LAX      359     2475    9  14 413.6490    27
# 2:  LAX      363     2475   11  57 409.0909    10
# 3:  LAX      351     2475   19   2 423.0769    11
# 4:  PBI      157     1035    7  22 395.5414   -34
# 5:  LAX      350     2475   13  47 424.2857     3
# 6:  LAX      339     2454   18  24 434.3363     4

## alternatively, using the &#39;LHS := RHS&#39; form
# flights[, c(&amp;quot;speed&amp;quot;, &amp;quot;delay&amp;quot;) := list(distance/(air_time/60), arr_delay + dep_delay)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们不需要将结果赋值给 flights。
* flights 现在包含了刚刚追加的两列。这就是我们说的“添加列”。
* 我们用函数形式，这样就可以在旁边写注释了。当然也可以用等式的形式。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-更新列-sub-assign:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;b) 更新列（sub-assign）&lt;/h4&gt;

&lt;p&gt;现在留意一下 fligths 里的 hour列。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get all &#39;hours&#39; in flights
flights[, sort(unique(hour))]
#  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，hour列有25种不同的取值。但是0点和24点应该是一样的，我们来把24点全部替换成0点。
－将 hour=24 替换成0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# subassign by reference
flights[hour == 24L, hour := 0L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 就像在上一讲中学习的一样，我们可以使用参数i 和 参数j里的操作符:=一起使用。
* 只有满足了参数i 中指定的条件 hour == 24L 的那些列，它们的值会被替换成0。
* 操作符:=没有返回值。有时候需要查看运行的结果，我们可以在查询语句的最后加一对方括号[]，来达到这个目的。
flights[hour == 24L, hour := 0L][]
#         year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight
#      1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1
#      2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3
#      3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21
#      4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29
#      5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117
#     ---                                                                                      
# 253312: 2014    10  31     1459         1     1747       -30         0      UA  N23708   1744
# 253313: 2014    10  31      854        -5     1147       -14         0      UA  N33132   1758
# 253314: 2014    10  31     1102        -8     1311        16         0      MQ  N827MQ   3591
# 253315: 2014    10  31     1106        -4     1325        15         0      MQ  N511MQ   3592
# 253316: 2014    10  31      824        -5     1045         1         0      MQ  N813MQ   3599
#         origin dest air_time distance hour min    speed delay
#      1:    JFK  LAX      359     2475    9  14 413.6490    27
#      2:    JFK  LAX      363     2475   11  57 409.0909    10
#      3:    JFK  LAX      351     2475   19   2 423.0769    11
#      4:    LGA  PBI      157     1035    7  22 395.5414   -34
#      5:    JFK  LAX      350     2475   13  47 424.2857     3
#     ---                                                      
# 253312:    LGA  IAH      201     1416   14  59 422.6866   -29
# 253313:    EWR  IAH      189     1400    8  54 444.4444   -19
# 253314:    LGA  RDU       83      431   11   2 311.5663     8
# 253315:    LGA  DTW       75      502   11   6 401.6000    11
# 253316:    LGA  SDF      110      659    8  24 359.4545    -4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们再来看下 hour列。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# check again for &#39;24&#39;
flights[, sort(unique(hour))]
#  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-删除列:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;c) 删除列&lt;/h4&gt;

&lt;h4 id=&#34;d-和分组:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;d) “:=”和分组&lt;/h4&gt;

&lt;h4 id=&#34;e-和复数列:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;e) “:=”和复数列&lt;/h4&gt;

&lt;h2 id=&#34;3-和copy:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;3. “:=”和copy()&lt;/h2&gt;

&lt;h4 id=&#34;a-的副作用:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;a) “:=”的副作用&lt;/h4&gt;

&lt;h4 id=&#34;b-函数copy:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;b) 函数copy()&lt;/h4&gt;

&lt;h2 id=&#34;总结:e5b9ad2772afb60de67bb09a99ffa4e1&#34;&gt;总结&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e5b9ad2772afb60de67bb09a99ffa4e1:1&#34;&gt;&lt;a href=&#34;http://r.789695.n4.nabble.com/speeding-up-perception-td3640920.html#a3646694&#34;&gt;TODO&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e5b9ad2772afb60de67bb09a99ffa4e1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e5b9ad2772afb60de67bb09a99ffa4e1:2&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/23898969/is-data-really-copied-four-times-in-rs-replacement-functions&#34;&gt;Is data really copied four times in R&amp;rsquo;s replacement functions?&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e5b9ad2772afb60de67bb09a99ffa4e1:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e5b9ad2772afb60de67bb09a99ffa4e1:3&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/7033106/why-has-data-table-defined-rather-than-overloading&#34;&gt;Why has data.table defined := rather than overloading &amp;lt;-?&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e5b9ad2772afb60de67bb09a99ffa4e1:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>单车一周旅行计划</title>
      <link>http://youngspring1.github.io/post/2016-03-20-bike/</link>
      <pubDate>Sun, 20 Mar 2016 22:10:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-20-bike/</guid>
      <description>&lt;p&gt;D1：南京&amp;ndash;溧阳市  110km&lt;/p&gt;

&lt;p&gt;很容易&lt;/p&gt;

&lt;p&gt;D2：溧阳市&amp;ndash;安吉县 115km&lt;/p&gt;

&lt;p&gt;容易&lt;/p&gt;

&lt;p&gt;D3：安吉县&amp;ndash;太阳镇  105km&lt;/p&gt;

&lt;p&gt;如果走天荒坪，爬山，难&lt;/p&gt;

&lt;p&gt;如果绕过西天目，中等&lt;/p&gt;

&lt;p&gt;D4：太阳镇&amp;ndash;岛石镇 103km&lt;/p&gt;

&lt;p&gt;翻山，华浪线，难&lt;/p&gt;

&lt;p&gt;D5：岛石镇&amp;ndash;十字镇 130km&lt;/p&gt;

&lt;p&gt;走南极，宁国，中等&lt;/p&gt;

&lt;p&gt;（可以考虑走荆州公路提高难度）&lt;/p&gt;

&lt;p&gt;D6：十字镇&amp;ndash;南京  137km&lt;/p&gt;

&lt;p&gt;容易&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>转：某T的职级系统</title>
      <link>http://youngspring1.github.io/post/2016-03-15-career/</link>
      <pubDate>Tue, 15 Mar 2016 22:51:30 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-15-career/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;http://www.cyzone.cn/a/20140828/262150.html&#34;&gt;http://www.cyzone.cn/a/20140828/262150.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;腾讯的职级系统有26个职业通道，如果你是一个一张白纸只有素质没有任何职业能力的毕业生，可以从这个26个通道，比如行政、财务、设计、运维、开发、运营、产品…….的任何一个1-1级开始，修炼，打怪升级，直到千万年薪。如同一个完整的人生指引。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;横轴是26个职业通道，专业技能各不相同，纵轴是4个大层级。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以下是按照我的理解来写了。(直接抄原文会被企鹅摔着打的)。&lt;/p&gt;

&lt;p&gt;我觉得腾讯的职业四大层级，几乎就是人生发展的四大层级。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一层是动作执行层、第二层是任务执行层、第三层是战略管理层、第四层是战略决策层。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先说动作执行层。一个企业最多的就是这个层面的员工。或者每个人初入职场，都是从练好一个动作开始。比如，画原型，写代码，写稿子……&lt;/p&gt;

&lt;p&gt;而腾讯对动作执行层的要求是：按照品质要求，完成动作、优化效率。注意，没有品质要求的动作，毫无意义。用户体验的不是产品而是品质感。就像你去一个川餐馆吃鱼香肉丝，你感受到的是这家鱼香肉丝的品质。大厨的工作不单是保证把菜炒出来，更是要保证菜品在一个什么样的品质感里。所以麦当劳的桌子永远擦的干净，同样的人在另外一个餐馆未必达到这种清洁标准。因为麦当劳不是要求把桌子擦了，而是清晰地要求达到什么样的清洁品质。&lt;/p&gt;

&lt;p&gt;达成品质要求之后，在谈完成动作与优化效率。&lt;/p&gt;

&lt;p&gt;任务执行层。就是要把分配的任务及指标，拆解成动作。由不同人组合完成，或者一个团队次序完成。需要在整个过程中，控制人心，安排动作序列，并配置风险，保证完成任务，达成指标。几乎所有铁血创业者都是从这个层级冒出来的。&lt;/p&gt;

&lt;p&gt;战略管理层。就是大家永远不理解的那批副总。带兄弟痛快淋漓干活的都是总监。而副总，心累。他们需要根据战略决策，确定任务优先级，配置资源，鼓舞士气。保证战略方向不偏差。&lt;/p&gt;

&lt;p&gt;而最高的战略决策层，几乎就是个CEO的活。他需要有前瞻，推动相关资源方做出战略决策，并且获取战略资源。就像亮剑里的李云龙。在除了自己，什么都没有的情况，他可以沟通，说服。一个队伍打没了，马上再拉起一个队伍。只要他还要打下去。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四个层级的核心工作不同，对人的特性的核心需求也不同。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在动作执行层，才气很重要。&lt;/p&gt;

&lt;p&gt;在任务执行层，责任心，执行力的价值，远大于才气。甚至需要放弃自己的才气，把时间交给众多的兄弟，才能实现任务的完成。&lt;/p&gt;

&lt;p&gt;而一个人能否达到战略管理层，核心要考核的是：心力。心力是什么?就是无止无尽操心的能力。资源永远有限，战略常常在变，兄弟都是亲的，永远没人满意。所以，一堆人拉我去当副总，我都谢谢了。因为自己清楚，心力真心不足啊～&lt;/p&gt;

&lt;p&gt;战略决策层。愿力。其实我在《决策》那篇文章中谈过愿力的问题。没有愿景支撑的决策都是机会主义。一个人如果心中没有愿，那真是谁都帮不了他。看上去再大都是纸老虎。&lt;/p&gt;

&lt;p&gt;所以，人会在哪个层级呆着，度过一生，其实都是因为吃不了其他层级的苦。其实发展个人才气，在动作层呆着，是人生最舒适的选择。&lt;/p&gt;

&lt;p&gt;不过那些以才子自居的人，创业往往格外困难，因为在整个创业的战略确定到达成的过程里，最不值钱的，也就是才气。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>演化</title>
      <link>http://youngspring1.github.io/post/2016-03-15-evalution/</link>
      <pubDate>Tue, 15 Mar 2016 22:11:49 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-15-evalution/</guid>
      <description>&lt;p&gt;自古登堡以来，书籍因为其“不变”的特质，象征着稳定、专注、权威；而电子时代，amazon可以很方便地更新我手中kindle中的内容。&lt;br /&gt;
这是一个一直在变化的时代，我们也不用等待准备好了，才去做某件事情。&lt;br /&gt;
我们一直处在演化的过程中。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>data.table 教程1（校对中）</title>
      <link>http://youngspring1.github.io/post/2016-03-13-datatable1/</link>
      <pubDate>Sun, 13 Mar 2016 18:57:40 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-13-datatable1/</guid>
      <description>

&lt;p&gt;最近使用data.table这个增强包，来计算数据的聚合信息，比sql语句简单明了不是一点半点，于是想把data.table的资料翻译出来。&lt;/p&gt;

&lt;p&gt;目录：&lt;br /&gt;
1) data.table 介绍&lt;br /&gt;
2) Reference semantics&lt;br /&gt;
3) Keys and fast binary search based subsets&lt;br /&gt;
4) Efficient reshaping using data.tables&lt;/p&gt;

&lt;p&gt;原文地址：&lt;br /&gt;
1) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-intro-vignette.html&#34;&gt;Introduction to data.table&lt;/a&gt;&lt;br /&gt;
2) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reference-semantics.html&#34;&gt;Reference semantics&lt;/a&gt;&lt;br /&gt;
3) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-keys-fast-subset.html&#34;&gt;Keys and fast binary search based subsets&lt;/a&gt;&lt;br /&gt;
4) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-reshape.html&#34;&gt;Efficient reshaping using data.tables&lt;/a&gt;&lt;br /&gt;
5) &lt;a href=&#34;https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-faq.html&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本教程介绍data.table的语法，大概的形式，如何subset行，如何按列select／compute，如何分组聚合。熟悉data.frame的数据结构是有帮助的，不过不熟悉也没关系。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;使用data-table分析数据:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;使用data.table分析数据&lt;/h2&gt;

&lt;p&gt;支持操作数据的功能，例如subset、group、update、join等。&lt;br /&gt;
这些功能可以让我们：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 通过简洁一致的语法，实行想要的操作，达到目的。
* 从一系列函数到最终的分析，都没有将所有的操作都对应到函数的负担。能够流畅地执行分析。
* 精确地知道每步操作所需要的数据，内部自动优化操作，在运行速度和内存开销两方面都很有效果。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简要的讲，如果你对减小计算复杂度和计算时间有着迫切的需求，那么这个package就是为你量身打造的。data.table就是干这事儿的。我们通过这一系列教程，说明这些功能。&lt;/p&gt;

&lt;h2 id=&#34;数据:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;数据&lt;/h2&gt;

&lt;p&gt;在这个教程中，我们使用&lt;a href=&#34;https://github.com/arunsrinivasan/flights/wiki/NYC-Flights-2014-data&#34;&gt;NYC-flights14&lt;/a&gt;的数据。它包含了2014年纽约机场发出的所有航班信息。这份数据只有2014年1月到10月是公开的。&lt;br /&gt;
我们可以使用data.table的fread()函数，用下面的方式，快速直接读取航班数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights &amp;lt;- fread(&amp;quot;https://raw.githubusercontent.com/wiki/arunsrinivasan/    flights/NYCflights14/flights14.csv&amp;quot;)
flights
#         year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight
#      1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1
#      2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3
#      3: 2014     1   1     1902         2     2224         9         0      AA  N327AA     21
#      4: 2014     1   1      722        -8     1014       -26         0      AA  N3EHAA     29
#      5: 2014     1   1     1347         2     1706         1         0      AA  N319AA    117
#     ---                                                                                      
# 253312: 2014    10  31     1459         1     1747       -30         0      UA  N23708   1744
# 253313: 2014    10  31      854        -5     1147       -14         0      UA  N33132   1758
# 253314: 2014    10  31     1102        -8     1311        16         0      MQ  N827MQ   3591
# 253315: 2014    10  31     1106        -4     1325        15         0      MQ  N511MQ   3592
# 253316: 2014    10  31      824        -5     1045         1         0      MQ  N813MQ   3599
#         origin dest air_time distance hour min
#      1:    JFK  LAX      359     2475    9  14
#      2:    JFK  LAX      363     2475   11  57
#      3:    JFK  LAX      351     2475   19   2
#      4:    LGA  PBI      157     1035    7  22
#      5:    JFK  LAX      350     2475   13  47
#     ---                                       
# 253312:    LGA  IAH      201     1416   14  59
# 253313:    EWR  IAH      189     1400    8  54
# 253314:    LGA  RDU       83      431   11   2
# 253315:    LGA  DTW       75      502   11   6
# 253316:    LGA  SDF      110      659    8  24
dim(flights)
# [1] 253316     17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既然整个教程我们都会使用这份数据，那你不妨先下载到你的电脑上，然后每次使用的时候再读取。&lt;/p&gt;

&lt;h2 id=&#34;介绍:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;在本章中，我们会学习下面两点：&lt;br /&gt;
1. 基础 － 什么是data.table，它的形式，如何subset行，如何select列，如何按列进行运算。&lt;br /&gt;
2. 聚合 － 按组聚合的效果。&lt;/p&gt;

&lt;h2 id=&#34;1-基础:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;1.基础&lt;/h2&gt;

&lt;h4 id=&#34;a-什么是data-table:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;a) 什么是data.table&lt;/h4&gt;

&lt;p&gt;data.table是R语言的一个包，它是对data.frames的增强。在上文（读取航班）“数据”的部分，我们通过函数fread()创建了一个data.table。我们也可以通过函数data.table()创建一个data.table，比如这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT = data.table(ID = c(&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;c&amp;quot;), a = 1:6, b = 7:12, c=13:18)
DT
#    ID a  b  c
# 1:  b 1  7 13
# 2:  b 2  8 14
# 3:  b 3  9 15
# 4:  a 4 10 16
# 5:  a 5 11 17
# 6:  c 6 12 18
class(DT$ID)
# [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们也可以通过as.data.table()将已经存在的对象转化成data.table。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注意：
* 不同于data.frames，字符型的列，不会被自动转化成因子。
* 行号后面有个冒号，用于隔开第一列的内容。
* 如果数据的条目超过了全局选项datatable.print.nrows所定义的数值（默认是100条），那么只会输出数据最开头和最末尾的5行。就如同上文（读取航班）“数据”的部分。

getOption(&amp;quot;datatable.print.nrows&amp;quot;)
# [1] 100

* data.table不能设置行的名称。我们会在第三讲中说明原因。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-形式-data-table增强了什么:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;b) 形式－data.table增强了什么&lt;/h4&gt;

&lt;p&gt;和data.frame相反，我们能做的可不仅仅局限于subset行或者select列。首先介绍下data.table的语法，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[i, j, by]

##   R:      i                 j        by
## SQL:  where   select | update  group by
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你有SQL语句的基础，那么你应该能马上明白data.table的语法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;语法是：
对于DT这个data.table，使用 i 来subset行，然后计算 j ，最后用 by 分组。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-subset行:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;c) subset行&lt;/h4&gt;

&lt;p&gt;－ 获取六月份所有从&amp;rdquo;JFK&amp;rdquo;机场起飞的航班&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L]
head(ans)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     6   1      851        -9     1205        -5         0      AA  N787AA      1    JFK
# 2: 2014     6   1     1220       -10     1522       -13         0      AA  N795AA      3    JFK
# 3: 2014     6   1      718        18     1014        -1         0      AA  N784AA      9    JFK
# 4: 2014     6   1     1024        -6     1314       -16         0      AA  N791AA     19    JFK
# 5: 2014     6   1     1841        -4     2125       -45         0      AA  N790AA     21    JFK
# 6: 2014     6   1     1454        -6     1757       -23         0      AA  N785AA    117    JFK
#    dest air_time distance hour min
# 1:  LAX      324     2475    8  51
# 2:  LAX      329     2475   12  20
# 3:  LAX      326     2475    7  18
# 4:  LAX      320     2475   10  24
# 5:  LAX      326     2475   18  41
# 6:  LAX      329     2475   14  54
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 通过data.frame的frame？，列可以像变量一样被引用。因此，我们不需要加上 flights$ 前缀，比如 flights$dest 和 flights$month，而是直接简单地引用 dest 和 month这两列。
* 满足 origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L 这两个条件的行会被抽出出来。既然我们没有指定其他的条件，一个包含原数据里面所有列的data.table会被返回。
* 语法里面[i,j,k]的逗号不是必须的，当然如果指定了逗号，比如 flights[dest == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L, ] 也是没问题的。但在data.frame里面，逗号却是必须的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 获取 flights 开头的两行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[1:2]
ans
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2: 2014     1   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
#    dest air_time distance hour min
# 1:  LAX      359     2475    9  14
# 2:  LAX      363     2475   11  57
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们没有指定任何条件。行的索引已经自动提供给参数 i 了。因此，我们得到一个包含原数据 flight 里所有列的data.table（for 这些行的索引？）。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 排序（先按 origin列 的升序，再按 dest 的降序排列）
我们可以通过R语言的基础函数 order() 来完成这个功能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[order(origin, -dest)]
head(ans)
#    year month day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1: 2014     1   5      836         6     1151        49         0      EV  N12175   4419    EWR
# 2: 2014     1   6      833         7     1111        13         0      EV  N24128   4419    EWR
# 3: 2014     1   7      811        -6     1035       -13         0      EV  N12142   4419    EWR
# 4: 2014     1   8      810        -7     1036       -12         0      EV  N11193   4419    EWR
# 5: 2014     1   9      833        16     1055         7         0      EV  N14198   4419    EWR
# 6: 2014     1  13      923        66     1154        66         0      EV  N12157   4419    EWR
#    dest air_time distance hour min
# 1:  XNA      195     1131    8  36
# 2:  XNA      190     1131    8  33
# 3:  XNA      179     1131    8  11
# 4:  XNA      184     1131    8  10
# 5:  XNA      181     1131    8  33
# 6:  XNA      188     1131    9  23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;内置的 order() 函数
* 我们可以对一个字符型的列，使用减号“-”，来实现降序排列。
* 另外，函数 order() 其实调用了data.table的快速基数排序函数 forder()，它比 base::order 快很多。这是一个说明它们基本区别的例子：

odt = data.table(col=sample(1e7))
(t1 &amp;lt;- system.time(ans1 &amp;lt;- odt[base::order(col)]))  ## uses order from base R
#    user  system elapsed 
#   8.610   0.056   8.708
(t2 &amp;lt;- system.time(ans2 &amp;lt;- odt[order(col)]))        ## uses data.table&#39;s forder
#    user  system elapsed 
#   0.526   0.024   0.553
(identical(ans1, ans2))
# [1] TRUE

order() 比 base::order 大约快了16倍。我们会在data.table的内部教程中讨论data.table快速排序的更多细节。
* 因此，使用我们熟悉的函数，就可以显著地提高分析效率。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-select列:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;d) select列&lt;/h4&gt;

&lt;p&gt;－ 选取 arr_delay 列，返回值是向量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, arr_delay]
head(ans)
# [1]  13  13   9 -26   1   0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 既然列可以作为变量被引用，我们可以直接引用我们想选取的列。
* 既然我们想选取所有的行，我们毋需指定参数 i。
* 返回了所有行的 arr_delay 列。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 选取 arr_delay 列，返回值是data.table&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, list(arr_delay)]
head(ans)
#    arr_delay
# 1:        13
# 2:        13
# 3:         9
# 4:       -26
# 5:         1
# 6:         0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们用 list() 把列名 arr_delay 包围起来，它可以确保返回值是data.table。正如前面一个例子，如果不这样做，返回值就是一个向量。
* data.table也允许用 .() 来包围列名，它是 list() 的别名，它们的效果是同样的。教程后面会使用 .() 来说明。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;只要参数 j 返回一个list，这个list的每一个元素都会被转换成结果data.table的一列。你马上就会发现，这个功能是多么强大。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 选取 arr_delay 列和 dep_delay 列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, .(arr_delay, dep_delay)]
head(ans)
#    arr_delay dep_delay
# 1:        13        14
# 2:        13        -3
# 3:         9         2
# 4:       -26        -8
# 5:         1         2
# 6:         0         4

## alternatively
# ans &amp;lt;- flights[, list(arr_delay, dep_delay)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 使用 .() 或者 list() 都可以。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 选取 arr_delay 列和 dep_delay 列，并把列名改为 delay_arr 和 delay_dep
既然 .() 是 list() 的别名，那么我们可以在创建 list 的时候对列命名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, .(delay_arr = arr_delay, delay_dep = dep_delay)]
head(ans)
#    delay_arr delay_dep
# 1:        13        14
# 2:        13        -3
# 3:         9         2
# 4:       -26        -8
# 5:         1         2
# 6:         0         4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就是这样。&lt;/p&gt;

&lt;h4 id=&#34;e-在参数j里运算:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;e) 在参数j里运算&lt;/h4&gt;

&lt;p&gt;－ 有多少航班完全没有延误&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, sum((arr_delay + dep_delay) &amp;lt; 0)]
ans
# [1] 141814
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;刚刚发生了什么？
* 参数 j 能做的，可不只是选取列这么简单，它能处理表达式，比如对列进行计算。这没什么大惊小怪的，因为列可以作为变量被引用嘛。所以，我们可以对这些变量调用函数。我们刚刚就是对两列求和(sum)了。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;f-在参数i里选取-在参数j里运算:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;f) 在参数i里选取，在参数j里运算&lt;/h4&gt;

&lt;p&gt;－ 在六月份，从&amp;rdquo;JFK&amp;rdquo;机场起飞的航班中，计算起飞和到达的平均延误时间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L, 
           .(m_arr=mean(arr_delay), m_dep=mean(dep_delay))]
ans
#       m_arr    m_dep
# 1: 5.839349 9.807884
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们首先在i参数里，找到所有符合 origin (机场)是&amp;quot;JFK&amp;quot;，并且 month (月份)是 6 这样条件的行。此时，我们还没有subset整个data.table。
* 现在，我们看看参数j，它只使用了两列。我们需要分别计算这两列的平均值 mean()。这个时候，我们才subset那些符合i参数里条件的列，然后计算它们的平均值。
因为这三个参数（i，j和by）都被指定在同一个方括号中，data.table能同时接受这三个参数，并在计算之前，选取最优的计算方法，而不是分步骤计算。所以，我们可以避免对整个data.table计算，同时，在计算速度和内存使用量这两方面，取得最优的效果。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 在六月份，从&amp;rdquo;JFK&amp;rdquo;机场起飞的航班一共有多少&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L, length(dest)]
ans
# [1] 8422
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;函数 length() 需要一个参数。我们只需要知道，结果里有多少行数据。我们可以使用任何一列作为函数 length() 的参数。&lt;br /&gt;
这一类的操作特别频繁，特别是在下一节里，当我们需要分组的时候，会讲到这个特别的符号 .N。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;特别的符号 .N 
.N 是一个内建的变量，它表示当前的分组中，对象的数目。在下一节，当它和 by 一起使用的时候，我们会发现它特别有用。还没有涉及到分组的时候，它只是简单地返回行的数目。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以，我们可以用 .N 来完成这个任务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L, .N]
ans
# [1] 8422
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 再说一遍，首先在i参数里，找到所有符合 origin (机场)是&amp;quot;JFK&amp;quot;，并且 month (月份)是 6 这样条件的行。   
* 在参数j里，我们只指定了 .N，其他什么也没指定。所以实际上我们什么也没做。我们只是返回了符合条件的行的数目（就是行的 length长度）。   
* 注意，我们没有用 list() 或者 .() 包围 .N，所以返回值是个向量。
我们也可以这样完成这个任务 nrow(flights[origin == &amp;quot;JFK&amp;quot; &amp;amp; month == 6L])。但是，这会从整个data.table里面subset符合条件的行，然后用 nrow() 返回行的数目，这是没有必要的，而且效率低下。我们会在 data.table的设计 这个教程里面说明这一点和其他的优化方法。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;g-太棒了-但我应该如何用参数j里面的名字引用列-就像在data-frame那样:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;g) 太棒了！但我应该如何用参数j里面的名字引用列（就像在data.frame那样）&lt;/h4&gt;

&lt;p&gt;你可以使用 with = FALSE 来引用列名。&lt;br /&gt;
－ 用data.frame的方式，选取 arr_delay 和 dep_delay 两列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;), with=FALSE]
head(ans)
#    arr_delay dep_delay
# 1:        13        14
# 2:        13        -3
# 3:         9         2
# 4:       -26        -8
# 5:         1         2
# 6:         0         4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个参数叫做 with，是根据 R里面的函数 with() 演变而来的。假设你有一个data.frame叫做 DF，想要subset所有符合 x&amp;gt;1 的行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DF = data.frame(x = c(1,1,1,2,2,3,3,3), y = 1:8)

## (1) normal way
DF[DF$x &amp;gt; 1, ] # data.frame needs that &#39;,&#39; as well
#   x y
# 4 2 4
# 5 2 5
# 6 3 6
# 7 3 7
# 8 3 8

## (2) using with
DF[with(DF, x &amp;gt; 1), ]
#   x y
# 4 2 4
# 5 2 5
# 6 3 6
# 7 3 7
# 8 3 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 在上面的 (2) using with里面，使用 with()，我们像变量一样使用DF的x列。
因此，在data.table里，我们设置 with=FALSE，使得我们不能再像变量一样引用列了，这被保存在“data.frame mode”中。
* 我们也可以使用 - 或者 ! 来排除列。比如：
## not run

# returns all columns except arr_delay and dep_delay
ans &amp;lt;- flights[, !c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;), with=FALSE]
# or
ans &amp;lt;- flights[, -c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;), with=FALSE]

* R语言从V1.9.5版开始，可以指定开始和结束的列名，比如通过指定 year:day 来选择前三列。
## not run

# returns year,month and day
ans &amp;lt;- flights[, year:day, with=FALSE]
# returns day, month and year
ans &amp;lt;- flights[, day:year, with=FALSE]
# returns all columns except year, month and day
ans &amp;lt;- flights[, -(year:day), with=FALSE]
ans &amp;lt;- flights[, !(year:day), with=FALSE]

这在交互式的工作中特别方便。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with=FALSE 是data.table的默认值，因为我们可以通过参数j表达式，来做更多的事，特别是接下来一节我们要讲到的，和 by 的联合。&lt;/p&gt;

&lt;h2 id=&#34;2-聚合:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;2.聚合&lt;/h2&gt;

&lt;p&gt;在前面一节，我们已经了解了参数i和j，知道了data.table的基本语法。在这一节，我们学习如何跟 by 相结合，做一些分组的操作。先来看看几个例子。&lt;/p&gt;

&lt;h4 id=&#34;a-用by分组:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;a) 用by分组&lt;/h4&gt;

&lt;p&gt;－ 如何获取每个机场起飞的航班数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, .(.N), by=.(origin)]
ans
#    origin     N
# 1:    JFK 81483
# 2:    LGA 84433
# 3:    EWR 87400

## or equivalently using a character vector in &#39;by&#39;
# ans &amp;lt;- flights[, .(.N), by=&amp;quot;origin&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们知道 .N 表示当前的分组中，对象的数目。先按照 origin 列分组，再用 .N 获取每组的数目。
* 通过 head(flights)，我们可以看到结果里面，机场是按照“JFK”, “LGA” 然后 “EWR” 的顺序排列的。原始数据里，被分组的那一列变量的顺序，也体现在结果里面。   
* 既然我们没有在参数j里面指定列名，那这一列就自然是 N 了。
* by 也接受一个包含列名的字符向量作为参数。这在写代码的时候特别有用，比如设计一个函数，它的参数是要被分组的列。
* 当参数j和by里面只有一列，我们可以省略 .()，这实在很方便。刚刚的任务我们可以这样做：
ans &amp;lt;- flights[, .N, by=origin]
ans
#    origin     N
# 1:    JFK 81483
# 2:    LGA 84433
# 3:    EWR 87400

只要允许，我们就会使用这种方便的形式。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何获取美航（carrier code代码是“AA”）在每个机场起飞的航班数
航空公司代码“AA”代表美航。每个航空公司的代码都是唯一的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by=origin]
ans
#    origin     N
# 1:    JFK 11923
# 2:    LGA 11730
# 3:    EWR  2649
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们首先通过参数i，指定表达式 carrier == &amp;quot;AA&amp;quot;，选取符合条件的行。
* 对于这些行，我们再按 origin 分组，获取每组的数目。再次声明，实际上没有列被重新创建，因为参数j表达式不需要获取列，因此在计算速度和内存使用量这两方面，取得最优的效果。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何获取美航在所有机场的起／降的数目&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by=.(origin,dest)]
head(ans)
#    origin dest    N
# 1:    JFK  LAX 3387
# 2:    LGA  PBI  245
# 3:    EWR  LAX   62
# 4:    JFK  MIA 1876
# 5:    JFK  SEA  298
# 6:    EWR  MIA  848

## or equivalently using a character vector in &#39;by&#39;
# ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by=c(&amp;quot;origin&amp;quot;, &amp;quot;dest&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 参数by 可以接受多个列。我们可以指定所有我们想分组的列。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何获取美航在所有机场的起／降的平均延误时间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, 
    .(mean(arr_delay), mean(dep_delay)), 
    by=.(origin, dest, month)]
ans
#      origin dest month         V1         V2
#   1:    JFK  LAX     1   6.590361 14.2289157
#   2:    LGA  PBI     1  -7.758621  0.3103448
#   3:    EWR  LAX     1   1.366667  7.5000000
#   4:    JFK  MIA     1  15.720670 18.7430168
#   5:    JFK  SEA     1  14.357143 30.7500000
#  ---                                        
# 196:    LGA  MIA    10  -6.251799 -1.4208633
# 197:    JFK  MIA    10  -1.880184  6.6774194
# 198:    EWR  PHX    10  -3.032258 -4.2903226
# 199:    JFK  MCO    10 -10.048387 -1.6129032
# 200:    JFK  DCA    10  16.483871 15.5161290
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们没有在参数j表达式中指定列名，它们会自动命名为(V1, V2)。    * 再次声明，原数据里面的顺序，会反映在结果中。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可是，如果我们想让结果按照 origin, dest 和 month 排序呢？&lt;/p&gt;

&lt;h4 id=&#34;b-参数keyby:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;b) 参数keyby&lt;/h4&gt;

&lt;p&gt;data.table本身就被设计成能保持原数据的顺序。在一些情况下，必须保持原来的顺序。但是，有时我们希望自动根据分组的变量排序。&lt;/p&gt;

&lt;p&gt;－ 如何按照分组的变量排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, 
    .(mean(arr_delay), mean(dep_delay)), 
    keyby=.(origin, dest, month)]
ans
#      origin dest month         V1         V2
#   1:    EWR  DFW     1   6.427673 10.0125786
#   2:    EWR  DFW     2  10.536765 11.3455882
#   3:    EWR  DFW     3  12.865031  8.0797546
#   4:    EWR  DFW     4  17.792683 12.9207317
#   5:    EWR  DFW     5  18.487805 18.6829268
#  ---                                        
# 196:    LGA  PBI     1  -7.758621  0.3103448
# 197:    LGA  PBI     2  -7.865385  2.4038462
# 198:    LGA  PBI     3  -5.754098  3.0327869
# 199:    LGA  PBI     4 -13.966667 -4.7333333
# 200:    LGA  PBI     5 -10.357143 -6.8571429
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们做的，只是把 by 改为了 keyby。这会自动的将结果按照升序排列。注意 keyby() 在完成操作后生效，例如，在计算结果后再排序。   
keys：实际上 keyby 做的不只是排序。它在排序之后，设置一个叫做sorted的属性。我们会在下一教程学习更多关于 keys的内容。   
现在，你需要知道的，就是使用 keyby 自动排序。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-chaining表达式:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;c) chaining表达式&lt;/h4&gt;

&lt;p&gt;让我们再来考虑下“获取美航在所有机场的起／降的数目”的问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by = .(origin, dest)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何让 ans 按origin的升序、按dest的降序排列
我们可以将中间结果保存为一个临时变量，再对这个变量使用 order(origin, -dest) 排序。这看上去还挺简洁明了的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- ans[order(origin, -dest)]
head(ans)
#    origin dest    N
# 1:    EWR  PHX  121
# 2:    EWR  MIA  848
# 3:    EWR  LAX   62
# 4:    EWR  DFW 1618
# 5:    JFK  STT  229
# 6:    JFK  SJU  690
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 回忆一下，我们在函数 order()中，对一个字符型的列使用 &amp;quot;-&amp;quot; 来降序排列。由于data.table的内部查询优化(internal query optimisation)，这样做是可行的。
* 再回忆一下 order(...)已经通过data.table内部的快速基数排序函数 forder()优化过了。那么，我们可以继续使用熟悉的R的基础函数，而不是考虑使用data.table提供的速度快内存消耗少的排序方法。我们会在data.table internals的教程中说明更多细节。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这么做会生成一个临时变量，然后再修改这个临时变量。其实我们可以通过添加chaining表达式，避免生成临时变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[carrier == &amp;quot;AA&amp;quot;, .N, by=.(origin, dest)][order(origin, -dest)]
head(ans, 10)
#     origin dest    N
#  1:    EWR  PHX  121
#  2:    EWR  MIA  848
#  3:    EWR  LAX   62
#  4:    EWR  DFW 1618
#  5:    JFK  STT  229
#  6:    JFK  SJU  690
#  7:    JFK  SFO 1312
#  8:    JFK  SEA  298
#  9:    JFK  SAN  299
# 10:    JFK  ORD  432
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们可以一个接一个地添加表达式，做一系列操作，就像这样：DT[...][...][...]。
* 或者你可以换行写：
DT[...
 ][...
 ][...
 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-by表达式:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;d) by表达式&lt;/h4&gt;

&lt;p&gt;－ 参数by也可以接受表达式吗？还是只能指定列&lt;br /&gt;
当然可以接受表达式。举个例子，如果我们想要知道，有多少航班起飞延误但却提前／准时到达的，有多少航班起飞和到达都延误了……&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, .N, .(dep_delay&amp;gt;0, arr_delay&amp;gt;0)]
ans
#    dep_delay arr_delay      N
# 1:      TRUE      TRUE  72836
# 2:     FALSE      TRUE  34583
# 3:     FALSE     FALSE 119304
# 4:      TRUE     FALSE  26593
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 最后一行，满足 dep_delay &amp;gt; 0 = TRUE 且 arr_delay &amp;gt; 0 = FALSE 的条件。我们知道有26593次航班起飞延误但却提前／准时到达了。
* 注意，我们没有在by表达式里面指定任何列名。然而结果里面，列名还是自动的生成了。
* 我们可以在表达式里面指定其他的列，比如：DT[, .N, by=.(a, b&amp;gt;0)]。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;e-在参数j里面指定多个列:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;e) 在参数j里面指定多个列&lt;/h4&gt;

&lt;p&gt;－ 必须分别对每列指定 mean() 函数吗
当然不必分别对每列输入 mean(myCol) 了。要是我们有100列要计算平均值，不就惨了吗。&lt;br /&gt;
如何高效地计算呢。记不记得这个小贴士-“只要参数j 返回一个list，这个list的每一个元素都会被转换成结果data.table的一列。”假设我们分组的时候，可以像变量一样，引用每个分组的数据，那么就可以循环对所有的列应用函数 lapply() ，而不需要学习新的函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;特殊的语法 .SD:
data.table提供一个特殊的语法，形式是 .SD。它是 Subset of Data 的缩写。它自身就是一个data.table，包含通过by 分组后的每一组。
回忆一下，一个data.table本质上是一个list，它们的列包含的元素个数都相同（其实就是行数）。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们用之前的一个data.table DT来看看 .SD 是如何使用的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT
#    ID a  b  c
# 1:  b 1  7 13
# 2:  b 2  8 14
# 3:  b 3  9 15
# 4:  a 4 10 16
# 5:  a 5 11 17
# 6:  c 6 12 18

DT[, print(.SD), by=ID]
#    a b  c
# 1: 1 7 13
# 2: 2 8 14
# 3: 3 9 15
#    a  b  c
# 1: 4 10 16
# 2: 5 11 17
#    a  b  c
# 1: 6 12 18
# Empty data.table (0 rows) of 1 col: ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* .SD 包含除了分组依据的那一列以外的所有列。
* 返回值依旧保持了原数据的顺序。首先打印出来的是 ID=“b” 的数据，然后是 ID=“a” 的，最后是  ID=“c” 的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了对复数的列进行计算，我们可以简单地使用函数 lapply()。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[, lapply(.SD, mean), by=ID]
#    ID   a    b    c
# 1:  b 2.0  8.0 14.0
# 2:  a 4.5 10.5 16.5
# 3:  c 6.0 12.0 18.0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* .SD 分别包含了ID是 a、b、c的所有行，它们分别对应了各自的组。我们应用函数 lapply() 对每列计算平均值。
* 每一组返回包含三个平均数的list，这些构成了最终返回的data.table。
* 既然函数 lapply() 返回 list，我们就不需要在外面多加 .() 了。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;差不多可以了，再补充一点。在 flights 这个 data.table里面，我们执行计算 arr_delay 和 dep_delay 这两列的平均值。但是，.SD 默认包含用于分组的所有列的平均值。&lt;/p&gt;

&lt;p&gt;－如何指定希望计算平均值的列&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.SDcols
使用参数 .SDcols。它接受列名或者列索引。比如，.SDcols = c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;)能确保.SD之包含 arr_delay 和 dep_delay 这两列。
和 with = FALSE 一样，我们也可以使用 - 或者 ! 来移除列。比如，我们指定 !(colA:colB) 或者 -(colA:colB)表示移除从 colA 到 colB 的所有列。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在让我们试着用 .SD 和 .SDcols 来获取 arr_delay 和 dep_delay 这两列的平均值，并且按照 origin, dest 和 month 来分组。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flights[carrier == &amp;quot;AA&amp;quot;,                     ## Only on trips with carrier &amp;quot;AA&amp;quot;
        lapply(.SD, mean),                   ## compute the mean
        by=.(origin, dest, month),           ## for every &#39;origin,dest,month&#39;
        .SDcols=c(&amp;quot;arr_delay&amp;quot;, &amp;quot;dep_delay&amp;quot;)] ## for just those specified in .SDcols
#      origin dest month  arr_delay  dep_delay
#   1:    JFK  LAX     1   6.590361 14.2289157
#   2:    LGA  PBI     1  -7.758621  0.3103448
#   3:    EWR  LAX     1   1.366667  7.5000000
#   4:    JFK  MIA     1  15.720670 18.7430168
#   5:    JFK  SEA     1  14.357143 30.7500000
#  ---                                        
# 196:    LGA  MIA    10  -6.251799 -1.4208633
# 197:    JFK  MIA    10  -1.880184  6.6774194
# 198:    EWR  PHX    10  -3.032258 -4.2903226
# 199:    JFK  MCO    10 -10.048387 -1.6129032
# 200:    JFK  DCA    10  16.483871 15.5161290
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;f-对每组subset-sd:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;f) 对每组subset .SD&lt;/h4&gt;

&lt;p&gt;－ 如何返回每个月的前两行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ans &amp;lt;- flights[, head(.SD, 2), by=month]
head(ans)
#    month year day dep_time dep_delay arr_time arr_delay cancelled carrier tailnum flight origin
# 1:     1 2014   1      914        14     1238        13         0      AA  N338AA      1    JFK
# 2:     1 2014   1     1157        -3     1523        13         0      AA  N335AA      3    JFK
# 3:     2 2014   1      859        -1     1226         1         0      AA  N783AA      1    JFK
# 4:     2 2014   1     1155        -5     1528         3         0      AA  N784AA      3    JFK
# 5:     3 2014   1      849       -11     1306        36         0      AA  N784AA      1    JFK
# 6:     3 2014   1     1157        -3     1529        14         0      AA  N787AA      3    JFK
#    dest air_time distance hour min
# 1:  LAX      359     2475    9  14
# 2:  LAX      363     2475   11  57
# 3:  LAX      358     2475    8  59
# 4:  LAX      358     2475   11  55
# 5:  LAX      375     2475    8  49
# 6:  LAX      368     2475   11  57
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* .SD 包含了每组的所有行。我们可以简单的subset各组数据的前两行。
* 对每组数据，head(.SD, 2)返回的data.table同时也是个list。所以不需要用 .() 包围起来。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;g-为什么参数j这么灵活:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;g) 为什么参数j这么灵活&lt;/h4&gt;

&lt;p&gt;这样，我们有了符合R语言风格的语法，我们也使用R语言里面既存的函数定义，而不是定义新的函数。我们用教程一开始创建的DT来说明。&lt;/p&gt;

&lt;p&gt;－如何保存按照ID分组后数据中的 a列和 b列 的信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT
#    ID a  b  c
# 1:  b 1  7 13
# 2:  b 2  8 14
# 3:  b 3  9 15
# 4:  a 4 10 16
# 5:  a 5 11 17
# 6:  c 6 12 18

DT[, .(val = c(a,b)), by=ID]
#     ID val
#  1:  b   1
#  2:  b   2
#  3:  b   3
#  4:  b   7
#  5:  b   8
#  6:  b   9
#  7:  a   4
#  8:  a   5
#  9:  a  10
# 10:  a  11
# 11:  c   6
# 12:  c  12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 就这样，不需要特殊的语法。我们需要知道的，就是用函数 c() 指定需要连结的向量。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;－ 如何将刚刚的数据，作为一列返回&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[, .(val = list(c(a,b))), by=ID]
#    ID         val
# 1:  b 1,2,3,7,8,9
# 2:  a  4, 5,10,11
# 3:  c        6,12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 我们首先用 c(a,b) 连结了每组的值，然后用 list() 包围起来。那么对于每组数据，我们返回一个所有连结后的值的 list。
* 注意，那些逗号都是用来辅助显示的。一个list中的元素可以包含任何对象。在这个例子里，每个元素是一个向量，它们的长度都不相同。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦你对参数j的用法产生了兴趣，你会发现语法是多么强大。理解这些的一个有效的方法就是，在 print() 的帮助下，多多使用。&lt;br /&gt;
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## (1) look at the difference between
DT[, print(c(a,b)), by=ID]
# [1] 1 2 3 7 8 9
# [1]  4  5 10 11
# [1]  6 12
# Empty data.table (0 rows) of 1 col: ID

## (2) and
DT[, print(list(c(a,b))), by=ID]
# [[1]]
# [1] 1 2 3 7 8 9
# 
# [[1]]
# [1]  4  5 10 11
# 
# [[1]]
# [1]  6 12
# Empty data.table (0 rows) of 1 col: ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在(1)里面，每组返回一个向量，它们的长度分别是6，4，2.但是(2)里面，每组返回一个长度都为1的list，它们的第一个元素包含了长度为6，4，2的向量。因此，(1)的结果的长度是6+4+2=12，(2)的结果的长度是1+1+1=3。&lt;/p&gt;

&lt;h2 id=&#34;总结:3d5b18c834d19c525ed890cfd64b400c&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;data.table的语法形式是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DT[i, j, by]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定参数i：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 类似于data.frame，我们可以subset行，除非不需要重复地使用 DT$，既然我们能将列当做变量来引用。 
* 我们可以使用order()排序。为了得到更快速的效果，order()函数内部使用了data.table的快速排序。 
我们可以通过参数i做更多的事，得到更快速的选取和连结。我们可以在教程“Keys and fast binary search based subsets”和“Joins and rolling joins”中学到这些。 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定参数j：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 以data.table的形式选取列：DT[, .(colA, colB)]。
* 以data.frame的形式选取列：DT[, c(&amp;quot;colA&amp;quot;, &amp;quot;colB&amp;quot;), with=FALSE]。
* 按列进行计算：DT[, .(sum(colA), mean(colB))]。
* 如果需要：DT[, .(sA =sum(colA), mB = mean(colB))]。
* 和i共同使用：DT[colA &amp;gt; value, sum(colB)]。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定参数by：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 通过by，我们可以指定列，或者列名，甚至表达式，进行分组。参数j可以很灵活地配置参数i和by实现强大的功能。
* by可以指定多个列，也可以指定表达式。
* 我们可以用 keyby，对分组的结果自动排序。
* 我们可以在参数j中指定 .SD 和 .SDcols，对复数的列进行操作。例如：   
  1.把函数fun 应用到所有 .SDcols指定的列上，同时对参数by指定的列进行分组：DT[, lapply(.SD, fun), by=., .SDcols=...]。 
  2.返回每组册前两行：DT[, head(.SD, 2), by=.]。
  3.三个参数联合使用：DT[col &amp;gt; val, head(.SD, 1), by=.]。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;小提示：&lt;br /&gt;
只要j返回一个list，这个list的每个元素都会是结果data.table的一列。&lt;/p&gt;

&lt;p&gt;下一讲，我们学习如何用reference来add／update／delete某一列，如何通过i和by合并它们。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>写给大家看的设计书</title>
      <link>http://youngspring1.github.io/post/2016-03-12-designer/</link>
      <pubDate>Sat, 12 Mar 2016 21:56:16 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-12-designer/</guid>
      <description>

&lt;p&gt;即使不是设计师，如果懂一点设计，做出来的产品会更明确和清晰。&lt;br /&gt;
况且，一个现代人，总会有书面形式的表达，此时知晓一些设计原则，对文档非常有帮助。&lt;/p&gt;

&lt;p&gt;这本设计书，就是写给设计师以外的人看的。&lt;br /&gt;
The Non-Designer&amp;rsquo;s Design Book&lt;/p&gt;

&lt;p&gt;在看这本书以前，对于日常能见到的海报、传单、商品包装、图书封面，我都不甚在意；看完这本书之后，同样还是对于这些常见信息的展示形式，有了新的认识。&lt;br /&gt;
也就是说，能明确地说出来，这个传单，遵循了什么样的规则，所以产生了什么样的效果。而那个海报，如果稍微如何如何修改一下，或许能够变得更好。&lt;/p&gt;

&lt;h2 id=&#34;四大设计原则:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;四大设计原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;亲密性&lt;/li&gt;
&lt;li&gt;对齐&lt;/li&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;li&gt;对比&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;书上介绍了很多没有遵循这些原则的实例，然后告诉我们应该如何修改这些实例。&lt;br /&gt;
通过实例，能够更容易掌握下面这些干巴巴的定义。&lt;/p&gt;

&lt;h4 id=&#34;亲密性:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;亲密性&lt;/h4&gt;

&lt;p&gt;彼此相关的信息，应当归并在一起，形成一个视觉单元，而不是多个孤立的元素。&lt;br /&gt;
这有助于组织信息，减少混乱，为读者提供清晰的结构。&lt;/p&gt;

&lt;h4 id=&#34;对齐:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对齐&lt;/h4&gt;

&lt;p&gt;每个元素都应当于页面上的另一个元素有视觉的联系。&lt;br /&gt;
以此建立一种清晰、精巧而且清爽的外观。&lt;/p&gt;

&lt;h4 id=&#34;重复:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;重复&lt;/h4&gt;

&lt;p&gt;同一类元素应当以同样的颜色、形状、材质、空间关系、线宽、字体、大小和图片来重复出现。&lt;br /&gt;
既能增加条理性，还可以加强统一性。&lt;/p&gt;

&lt;h4 id=&#34;对比:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;对比&lt;/h4&gt;

&lt;p&gt;不同类别的元素，应当截然不同。&lt;/p&gt;

&lt;h2 id=&#34;颜色:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;颜色&lt;/h2&gt;

&lt;p&gt;介绍了调色板里面各种颜色的关系，以及“亮色“和“暗色”的对比，“暖色”和“冷色”的对比，“纸”和“显示屏”的对比。&lt;/p&gt;

&lt;h2 id=&#34;字体:52b2b97ee6d139c2c7764e1ed205052a&#34;&gt;字体&lt;/h2&gt;

&lt;p&gt;介绍了不同字体的来源和对比，非常有启发。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/写给大家看的设计书-威廉姆斯/dp/B018KMT5WI/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1457794020&amp;amp;sr=1-1&#34;&gt;写给大家看的设计书&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R语言中的class()、mode()和typeof()的区别</title>
      <link>http://youngspring1.github.io/post/2016-03-08-r-class/</link>
      <pubDate>Tue, 08 Mar 2016 22:52:12 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-08-r-class/</guid>
      <description>

&lt;p&gt;今天对R语言中的这三个函数产生了疑惑，为什么有时候它们的运行结果一样，有时候却又不一样？&lt;/p&gt;

&lt;h3 id=&#34;定义:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;定义&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;mode&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;The (Storage) Mode of an Object&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;Get or set the type or storage mode of an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;The Type of an Object&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;typeof determines the (R internal) type or storage mode of any object&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;Object Classes&lt;br /&gt;
&lt;strong&gt;Description&lt;/strong&gt;&lt;br /&gt;
&amp;emsp;R possesses a simple generic function mechanism which can be used for an object-oriented style of programming.&lt;br /&gt;
&amp;emsp;Method dispatch takes place based on the class of the first argument to the generic function.&lt;/p&gt;

&lt;h3 id=&#34;解释:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;解释&lt;/h3&gt;

&lt;p&gt;在R里面，每一个对象都有一个mode和一个class。&lt;br /&gt;
前者表示对象在内存中是如何存储的。 (numeric, character, list and function)&lt;br /&gt;
后者表示对象的抽象类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d &amp;lt;- data.frame(V1=c(1,2))
class(d)
# [1] &amp;quot;data.frame&amp;quot;
mode(d)
# [1] &amp;quot;list&amp;quot;
typeof(d)
# list

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面的例子，我们可以知道，data frame这种类型，在内存中作为list被存储，但是它们被包装成data frame。&lt;br /&gt;
对于某个函数的参数，它的类型是data frame，却不能说是list。&lt;/p&gt;

&lt;p&gt;再来看mode和typeof。&lt;br /&gt;
mode和typeof通常返回同样的值，但也有例外。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typeof(c(1,2))
# [1] &amp;quot;double&amp;quot;
mode(c(1,2))
# [1] &amp;quot;numeric&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;历史原因啦。R语言由S语言发展而来。&lt;br /&gt;
mode，为了和S语言兼容，返回R的对象的模式。&lt;br /&gt;
typeof是R语言特有的，返回一个R的对象的类型。（哎呀，解释不清楚啦）&lt;/p&gt;

&lt;h3 id=&#34;参考:4392bb40a36ba9fbdbf9a9669f2b4fbf&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&#34;http://stackoverflow.com/questions/6258004/r-types-and-classes-of-variables&#34;&gt;http://stackoverflow.com/questions/6258004/r-types-and-classes-of-variables&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&#34;http://stats.stackexchange.com/questions/3212/mode-class-and-type-of-r-objects&#34;&gt;http://stats.stackexchange.com/questions/3212/mode-class-and-type-of-r-objects&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>大部分时候都是目光短浅的动物</title>
      <link>http://youngspring1.github.io/post/2016-03-08-thought/</link>
      <pubDate>Tue, 08 Mar 2016 22:42:24 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-08-thought/</guid>
      <description>&lt;p&gt;大部分时候都是目光短浅的动物，只能看到眼前一小块；要是再远一点，便如同迷雾般不可捉摸。&lt;br /&gt;
写代码的时候，不时需要打印出一些debug信息，这样才能确认正确；见过有牛人，一次写完代码，最后调试一遍，通过。&lt;br /&gt;
看不到利好，往往不敢继续。所以需要给自己的甜头，引诱自己继续前行。&lt;br /&gt;
在普通人看不到任何收益的情况下，还能继续做，要么眼光比别人更长远，要么是因为情怀。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今天吃饭看见一个老太太，一个人点了份寿司，安安静静的吃完，离开。面容好平静。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>敦煌旅行计划</title>
      <link>http://youngspring1.github.io/post/2016-03-06-plan/</link>
      <pubDate>Sun, 06 Mar 2016 23:39:55 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-plan/</guid>
      <description>

&lt;h3 id=&#34;day1-南京-兰州:4d92112643788221cfde671ff2b890a2&#34;&gt;Day1:南京－兰州&lt;/h3&gt;

&lt;p&gt;正宁路夜市（小吃）：到达的当晚可以逛。&lt;br /&gt;
永昌路夜市（杂货）：返程有空就逛，连着正宁路夜市。&lt;br /&gt;
中山铁桥：清朝。&lt;br /&gt;
省博：返程住兰州，有空逛，大约半天。&lt;/p&gt;

&lt;h3 id=&#34;day2-兰州-武威-张掖:4d92112643788221cfde671ff2b890a2&#34;&gt;Day2:兰州－武威－张掖&lt;/h3&gt;

&lt;p&gt;武威旧称凉州，西夏文化，特色小吃：拨鱼儿、面片、三套车。&lt;br /&gt;
张掖&lt;br /&gt;
&amp;emsp;丹霞景区（40元），最好早晨或者傍晚去，雨后更佳。&lt;br /&gt;
&amp;emsp;大佛寺（41元），西夏国寺，卧佛。&lt;br /&gt;
&amp;emsp;甘州美食广场。&lt;/p&gt;

&lt;h3 id=&#34;day3-张掖-嘉峪关-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day3:张掖－嘉峪关－敦煌&lt;/h3&gt;

&lt;p&gt;嘉峪关&lt;br /&gt;
&amp;emsp;关城、第一城、悬壁长城三景区联票，但距离较远。&lt;br /&gt;
&amp;emsp;镜铁市场的眼镜烧烤有名。&lt;br /&gt;
瓜洲&lt;br /&gt;
&amp;emsp;榆林窟，有空就去。&lt;/p&gt;

&lt;h3 id=&#34;day4-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day4:敦煌&lt;/h3&gt;

&lt;p&gt;敦煌市区以及莫高窟&lt;br /&gt;
&amp;emsp;鸣沙山月牙泉（120元）傍晚去。&lt;br /&gt;
&amp;emsp;市博。&lt;br /&gt;
&amp;emsp;沙洲市场（敦煌夜市）。&lt;br /&gt;
东线：莫高窟。&lt;/p&gt;

&lt;h3 id=&#34;day5-敦煌:4d92112643788221cfde671ff2b890a2&#34;&gt;Day5:敦煌&lt;/h3&gt;

&lt;p&gt;敦煌周边&lt;br /&gt;
西线：&lt;br /&gt;
&amp;emsp;西北：玉门关（90km 40元）、雅丹魔鬼城（80km 80元）&lt;br /&gt;
&amp;emsp;西南：西千佛洞（35km）、阳关（70km 50元包含博物馆）&lt;/p&gt;

&lt;h3 id=&#34;day6-敦煌-青海湖-兰州:4d92112643788221cfde671ff2b890a2&#34;&gt;Day6:敦煌－青海湖－兰州&lt;/h3&gt;

&lt;h3 id=&#34;day7-兰州-南京:4d92112643788221cfde671ff2b890a2&#34;&gt;Day7:兰州－南京&lt;/h3&gt;

&lt;h3 id=&#34;路线备忘:4d92112643788221cfde671ff2b890a2&#34;&gt;路线备忘&lt;/h3&gt;

&lt;p&gt;G30 丝绸之路：兰州－武威－张掖－酒泉－瓜洲：1000km&lt;br /&gt;
S314 瓜洲－敦煌：120km&lt;br /&gt;
G215-G315-G25 敦煌－青海湖－兰州&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>20160306 碎碎念</title>
      <link>http://youngspring1.github.io/post/2016-03-06-ssn/</link>
      <pubDate>Sun, 06 Mar 2016 15:04:54 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-ssn/</guid>
      <description>&lt;p&gt;我有一个小侄子，吃饭时必须要拿iPad播放光头强，才能吃得下。&lt;br /&gt;
我以为只有小孩才会这样。&lt;br /&gt;
结果现在发现所有人吃饭都看着手机。&lt;br /&gt;
简直和筷子一样不可或缺。&lt;br /&gt;
下次我给大家表演一下，吃饭without手机。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>必然</title>
      <link>http://youngspring1.github.io/post/2016-03-06-inevitable/</link>
      <pubDate>Sun, 06 Mar 2016 14:57:21 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-inevitable/</guid>
      <description>

&lt;p&gt;我们期待未来30年，哪些预言能够成为现实！&lt;/p&gt;

&lt;h3 id=&#34;形成-becoming:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;形成(Becoming)&lt;/h3&gt;

&lt;p&gt;无数在未来颠覆我们当前世界的产品，可能还没有发明出来，所以当下就是创业的最佳时机。&lt;br /&gt;
未来正在“形成”，正在被我们所塑造。我们没有迟到。&lt;br /&gt;
上学的时候有人讲“互联网的圈地时代已经过去了”，现在看来，过去的十年里，无数的互联网公司涌现出来，并且在几个巨头的统治下，顽强地生存着。人类的需求和欲望，是不断扩大和增长的，有这一点，就有足够的理由期待未来有更多的产品，来满足人类的需求。&lt;/p&gt;

&lt;h3 id=&#34;知化-cognifying:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;知化(Cognifying)&lt;/h3&gt;

&lt;p&gt;大数据＋计算能力＋算法＝人工智能时代。
一个有趣的循环：&lt;br /&gt;
1.机器人（电脑）干不了我的工作。&lt;br /&gt;
2.好吧，它会许多事情，但我做的事情，它不一定都会。&lt;br /&gt;
3.好吧，我做的事情它都会，但它常常出故障，这时需要我来处理。&lt;br /&gt;
4.好吧，它干常规工作时从不出错，但是我需要训练它学习新任务。&lt;br /&gt;
5.好吧，就让它做我原来的工作吧，那本来就不是人该干的。&lt;br /&gt;
6.哇，机器人正在干我以前做的工作，我的新工作不仅好玩多了，工资还高！&lt;br /&gt;
7.真高兴，机器人（电脑）绝对干不了我现在做的事情。&lt;/p&gt;

&lt;p&gt;好了，我要去找工作了！&lt;/p&gt;

&lt;h3 id=&#34;流动-flowing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;流动(Flowing)&lt;/h3&gt;

&lt;p&gt;如果某个产品可以依赖互联网复制，那么价格会趋近于免费。&lt;br /&gt;
但是下面这几种特性却无法复制，我们可以从这些角度创造价值：&lt;br /&gt;
1.即时性&lt;br /&gt;
2.个性化&lt;br /&gt;
3.解释性（用户手册、技术支持收费）&lt;br /&gt;
4.可靠性&lt;br /&gt;
5.获取权（云服务）&lt;br /&gt;
6.实体化（现场感）&lt;br /&gt;
7.可赞助&lt;br /&gt;
8.可寻性（相关性数据）&lt;br /&gt;
在“流动”的时代，互联网产品时开放的，可分享的，也是变化的。&lt;/p&gt;

&lt;h3 id=&#34;屏读-screening:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;屏读(Screening)&lt;/h3&gt;

&lt;p&gt;从古登堡以来，人们获取信息的方式，从书页转移到屏幕。未来我们的生活中会使用大大小小、分散在各处的屏幕。&lt;/p&gt;

&lt;h3 id=&#34;使用-accessing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;使用(Accessing)&lt;/h3&gt;

&lt;p&gt;未来我们不需要真正“拥有”某些资源，我们只在需要的时候，租用／借阅／访问这些资源。&lt;/p&gt;

&lt;h3 id=&#34;共享-sharing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;共享(Sharing)&lt;/h3&gt;

&lt;p&gt;我们分享我们的知识（StackOverflow），并且互相协作（github），看上去是免费提供的，但是参与者可以获得满足感。
如果对某个设想感兴趣，并且想把它制造出来，可以“众筹”，也就是粉丝们集体资助他们所喜爱的，再也没有比“众筹”更能让创作者受益的好方法了。&lt;/p&gt;

&lt;h3 id=&#34;过滤-filtering:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;过滤(Filtering)&lt;/h3&gt;

&lt;p&gt;这个世界每秒钟创造出来的信息，可能我一辈子都阅览不完。这个一个信息爆炸的时代，最稀缺的资源是我们自己的注意力，我们需要过滤器，将这些大量丰富的信息缩减到令人满意的程度，再将我们的注意力投入之上。&lt;br /&gt;
事实上，这些过滤器已经在工作了。电子邮件服务器帮我们区分出正常邮件／广告邮件／垃圾邮件；朋友圈／微博只推送给我，那些我感兴趣的信息；亚马逊通过我的购买记录，给我推荐我可能感兴趣的商品信息，我无须再自己搜索。&lt;br /&gt;
Google这样的广告服务商，可以根据用户的信息，提供更加准确的广告投放服务。&lt;br /&gt;
未来我们会在自己的身体或者生活中加入更多的感知仪器，测量到的数据会发送给我个人的过滤器，让我得到更加准确有效的信息。&lt;/p&gt;

&lt;h3 id=&#34;重混-remixing:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;重混(Remixing)&lt;/h3&gt;

&lt;p&gt;文学作品／音乐／摄影作品／电影，这些作品在未来，最有可能发生再创作。同人小说创作、音乐改编、PS、电影片段剪辑。。。&lt;br /&gt;
法律上，应该如何界定一段代码、一个idea、一段旋律的所有权和期限，都可以是亟待探明的问题。&lt;/p&gt;

&lt;h3 id=&#34;互动-interacting:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;互动(Interacting)&lt;/h3&gt;

&lt;p&gt;通过各种各样的感应器，我们可以在增强现实／虚拟现实的世界里，用我们自己的感知和行为跟这个世界互动。
有些感应器可以增强我们的能力，比如视力、听力，有些感应器能够给我们添加一些新能力，比如GPS定位、X光透视、温度探测等。互动发生的区域，会比现在的手机和手表，离我们更近。&lt;br /&gt;
我们自己就是密码和数字身份证。我们的步态、心跳模式、敲击键盘的节奏、表情、眨眼的频率、坐下的姿势、声音等等，都是和他人不同的，也几乎无法仿造。&lt;/p&gt;

&lt;h3 id=&#34;追踪-tracking:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;追踪(Tracking)&lt;/h3&gt;

&lt;p&gt;越来越多的物联网设备记录了我们生活中的各种数据：行驶记录、旅行记录、手机位置、公共摄像头、公共wifi、社交网络、浏览器、智能家居设备、健康追踪等等。我们不断增长的自身信息，被追踪、分析，甚至被利用。&lt;/p&gt;

&lt;h3 id=&#34;提问-questioning:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;提问(Questioning)&lt;/h3&gt;

&lt;p&gt;在互联网上提问，可能是别人回答你的问题，比如维基百科、知乎；也有可能是人工智能回答你的问题，比如Google、Siri。
好的提问创造更多价值。&lt;/p&gt;

&lt;h3 id=&#34;开始-beginning:fa9b0ec1f63f40caaef72feef83ae042&#34;&gt;开始(Beginning)&lt;/h3&gt;

&lt;p&gt;未来正在发生，我们就站在起点，能够参与其中，深感荣幸。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;亚马逊链接：&lt;a href=&#34;http://www.amazon.cn/gp/product/B0176RQ53A?ref_=s9_hps_bw_g14_i1&#34;&gt;必然&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160306-the-inevitable.jpg&#34; alt=&#34;必然&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git常用命令备忘</title>
      <link>http://youngspring1.github.io/post/2016-03-06-git/</link>
      <pubDate>Sun, 06 Mar 2016 13:53:07 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-git/</guid>
      <description>

&lt;p&gt;不用git简直就是反人类啊。&lt;br /&gt;
不过没有能力一下子把所有的命令都记住，先把常用的几个列下，具体的后面用到了再查。&lt;/p&gt;

&lt;h2 id=&#34;示意图:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;示意图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160306-git-map.png&#34; alt=&#34;git-map&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remote&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;repository&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;index&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;workspace&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-图中的remote是远程仓库，而repository、index和workspace都是在你本地。&lt;br /&gt;
remote还可以分为trunk repository和your own github repository。
如果你觉得别人的工程很好，想在此基础上嫁接自己的开发，那么fork一下，就会到你自己的github工程列表中。这些remote都是有独立的地址的，比如git自己的代码，提供一个唯一的地址供大家fork：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/git/git.git   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-图中的repository是本地仓库，如果这个本地仓库刚刚被初始化，还是空的，那么我们需要clone一下远程仓库。&lt;br /&gt;
如果这个本地仓库是以前就创建好的，我们开发代码之前，应该取得（fetch）远程仓库remote的更新。&lt;/p&gt;

&lt;p&gt;-图中的workspace是工作区，就是具体的代码文件。
-图中的index是暂存区，代码某个版本开发好后，需要add进index，就是告诉仓库，我修改了哪些文件，将会提交哪些文件。&lt;br /&gt;
此时使用commit命令来提交文件。&lt;br /&gt;
最后，把修改从本地仓库repository推送（push）到远程仓库（remote）。&lt;/p&gt;

&lt;h2 id=&#34;1-git-clone:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;1.git clone&lt;/h2&gt;

&lt;p&gt;重要的事情在前面说，chone之前需要init！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd proj-dir
$ git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;clone命令会在本地主机生成一个目录，与远程主机的版本库同名。&lt;br /&gt;
如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone &amp;lt;版本库的网址&amp;gt;
$ git clone &amp;lt;版本库的网址&amp;gt; &amp;lt;本地目录名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如，克隆jQuery的版本库。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/jquery/jquery.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;clone支持HTTP(s)、SSH、Git、FTP等协议。&lt;/p&gt;

&lt;h2 id=&#34;2-git-remote:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;2.git remote&lt;/h2&gt;

&lt;p&gt;git remote命令列出所有远程主机。&lt;br /&gt;
克隆版本库的时候，所使用的远程主机自动被Git命名为origin。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用-v选项，可以参看远程主机的网址。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想用其他的主机名，需要用git clone命令的-o选项指定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone -o jQuery https://github.com/jquery/jquery.git
$ git remote
jQuery
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-git-fetch:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;3.git fetch&lt;/h2&gt;

&lt;p&gt;如果远程仓库的代码有更新，我们需要将这些更新取到本地。&lt;br /&gt;
通常建议在修改本地代码前做这件事。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git fetch &amp;lt;远程主机名&amp;gt;
$ git fetch &amp;lt;远程主机名&amp;gt; &amp;lt;分支名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不指定分支名，则取回所有分支的更新。&lt;br /&gt;
如果指定分支名，则仅取回指定分支的更新。&lt;/p&gt;

&lt;p&gt;那么，我怎么知道取哪个分支？&lt;br /&gt;
git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch -r
origin/master

$ git branch -a
* master
remotes/origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的命令表示，本地主机的当前分支是master，远程分支是origin/master。&lt;/p&gt;

&lt;p&gt;fetch只能从远程仓库取得代码，还没有合并到本地的代码中去。需要使用git merge命令或者git rebase命令，在本地分支上合并远程分支。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge origin/master
# 或者
$ git rebase origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可是可是，如果我不想合并到现在的分支上怎么办呢。可以使用git checkout命令创建一个新的分支。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b newBrach origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面命令表示，在origin/master的基础上，创建一个新分支。&lt;/p&gt;

&lt;h2 id=&#34;4-git-pull:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;4.git pull&lt;/h2&gt;

&lt;p&gt;取回远程主机某个分支的更新，并且与本地的指定分支合并。
同最开始的图上看，是不是相当于fetch＋checkout？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
$ git pull origin next:master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示取回origin主机的next分支，与本地的master分支合并。&lt;br /&gt;
如果远程分支是与当前分支合并，则冒号后面的部分可以省略。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git pull origin next
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是先做git fetch，再做git merge。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git fetch origin
$ git merge origin/next
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-git-add:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;5.git add&lt;/h2&gt;

&lt;p&gt;把修改信息添加到index暂存区。
添加所有文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add -A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加指定文件到暂存区：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add &amp;lt;文件1&amp;gt; &amp;lt;文件2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以指定文件夹：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add &amp;lt;文件夹&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除文件，并且将删除信息也添加到暂存区：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rm &amp;lt;文件1&amp;gt; &amp;lt;文件2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重命名，并且将重命名信息也添加到暂存区：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git mv &amp;lt;原文件名&amp;gt; &amp;lt;新文件名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-git-commit:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;6.git commit&lt;/h2&gt;

&lt;p&gt;把暂存区的修改，提交到仓库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;quot;信息&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原则上是，每一个原子修改，都作一次提交。&lt;/p&gt;

&lt;h2 id=&#34;7-git-push:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;7.git push&lt;/h2&gt;

&lt;p&gt;将本地分支的更新，推送到远程主机。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常本地分支名和远程分支名都同名，可以省略远程分支名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示将本地的master分支推送到origin主机的master分支。&lt;/p&gt;

&lt;h2 id=&#34;其他:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;其他&lt;/h2&gt;

&lt;p&gt;显示暂存区和工作区的差异：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git diff  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示有变更的文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:d71c3921adf591fdd23ac81ec6f69f8c&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;1.阮一峰  &lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/06/git_remote.html&#34;&gt;Git远程操作详解&lt;/a&gt;&lt;br /&gt;
2.阮一峰  &lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu&#34;&gt;常用 Git 命令清单&lt;/a&gt;&lt;br /&gt;
3.廖雪峰  &lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34;&gt;Git教程&lt;/a&gt;&lt;br /&gt;
4.&lt;a href=&#34;http://git-scm.com/book/zh/v2&#34;&gt;Git官方文档&lt;/a&gt;&lt;br /&gt;
5.Git常用命令一览&lt;br /&gt;
&lt;img src=&#34;http://7xrjai.com1.z0.glb.clouddn.com/20160306-git-cmd.png&#34; alt=&#34;git-cmd&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用hugo搭建个人博客入门教程</title>
      <link>http://youngspring1.github.io/post/2016-03-06-hugo/</link>
      <pubDate>Sun, 06 Mar 2016 10:28:49 +0800</pubDate>
      
      <guid>http://youngspring1.github.io/post/2016-03-06-hugo/</guid>
      <description>

&lt;h3 id=&#34;起因:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;起因&lt;/h3&gt;

&lt;p&gt;之前看过腾讯工程师写的《Web全站工程师的自我修养》&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;一书，萌生了搭建一个博客的想法，用来记录学习记录和生活感受。先用免费的github，挂载静态页面试试吧。原来计划使用道听途说的Jekyll，然后一不小心看到了这篇文章&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;http://blog.coderzh.com/2015/08/29/hugo/&lt;/a&gt;，各种好:&lt;br /&gt;
1.只有一个二进制文件。&lt;br /&gt;
2.可以将宇宙标准MarkDown格式的文章自动转换为静态网页。&lt;br /&gt;
3.内置Web服务器，可以立即在本地查看修改结果。&lt;br /&gt;
那么就用hugo&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;吧。有空再试试hexo&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;安装hugo:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;安装hugo&lt;/h3&gt;

&lt;p&gt;我是在mac上通过tar压缩文件安装的。&lt;br /&gt;
其他方法可以参考官方文档。&lt;br /&gt;
1.下载&lt;br /&gt;
&amp;emsp;下载地址：&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;&lt;br /&gt;
&amp;emsp;我要的mac版，文件名长这样：hugo_X.YY_darwin_amd64.zip&lt;br /&gt;
2.解压&lt;br /&gt;
&amp;emsp;解压后是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l   
total 31696
-rw-r--r--@ 1 username  staff     10480  2 28 21:38 LICENSE.md
-rw-r--r--@ 1 username  staff      7694  2 28 21:38 README.md
-rwxr-xr-x@ 1 username  staff  16201084  2 28 21:38 hugo_0.15_darwin_amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;试一试：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./hugo_0.15_darwin_amd64 version   
Hugo Static Site Generator v0.15 BuildDate: 2016-02-28T21:38:32+08:00   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.创建链接文件&lt;br /&gt;
&amp;emsp;这么长的命令，用起来多不方便啊，我们简化一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ln -s /fullpath/fullpath/hugo_0.15_darwin_amd64 hugo
$ ls -l
total 31696
-rw-r--r--@ 1 username  staff     10480  2 28 21:38 LICENSE.md
-rw-r--r--@ 1 username  staff      7694  2 28 21:38 README.md
lrwxr-xr-x  1 username  staff        54  2 28 22:05 hugo -&amp;gt; /fullpath/fullpath/hugo_0.15_darwin_amd64
-rwxr-xr-x@ 1 username  staff  16201084  2 28 21:38 hugo_0.15_darwin_amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;亲测有效：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./hugo version   
Hugo Static Site Generator v0.15 BuildDate: 2016-02-28T21:38:32+08:00   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.加入PATH&lt;br /&gt;
&amp;emsp;这还不够，我们要加到PATH里去。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which hugo
/fullpath/fullpath/hugo
$ vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;加入这一行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/fullpath/fullpath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;这样你应该可以在任意位置运行hugo命令了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo version   
Hugo Static Site Generator v0.15 BuildDate: 2016-02-28T21:38:32+08:00   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;生成本地站点:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;生成本地站点&lt;/h3&gt;

&lt;p&gt;安装好hugo之后，就可以很轻松地生成本地站点啦：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugo会在当前的目录下，生成mysite这个目录，cd进去，目录结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;archetypes/
content/
layouts/
static/
config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中content是MarkDown文章目录，layouts存放的是网站的模版文件，static存放的是图片、css、js资源等。config.toml是网站的配置文件，你也可以换成yaml、json等。&lt;/p&gt;

&lt;h3 id=&#34;创建文章:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;创建文章&lt;/h3&gt;

&lt;p&gt;在mysite目录下，创建一个[关于]页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd mysite
$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容自己填呗。
再创建一个文章页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/2016-03-06-first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容自己填。&lt;br /&gt;
想看看效果么？等等，还需要导入个主题。&lt;/p&gt;

&lt;h3 id=&#34;导入主题:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;导入主题&lt;/h3&gt;

&lt;p&gt;还是在在mysite目录下，创建一个文件夹，我们随便clone一个主题下来。&lt;br /&gt;
我在&lt;a href=&#34;https://themes.gohugo.io&#34;&gt;https://themes.gohugo.io&lt;/a&gt;上没有找到喜欢的主题，就直接拉了上面原文作者的主题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd themes
$ git clone https://github.com/coderzh/hugo-rapid-theme.git
$ cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（主题里面包含了作者的信息，如果需要使用，记得修改。）&lt;/p&gt;

&lt;h3 id=&#34;调试:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;调试&lt;/h3&gt;

&lt;p&gt;现在终于可以调试了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --theme=hugo-rapid-theme --buildDrafts --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览器里打开：&lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;br /&gt;
选项watch会让服务器自动检测文章的改动，自动刷新浏览器，非常方便。&lt;/p&gt;

&lt;h3 id=&#34;发布:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;发布&lt;/h3&gt;

&lt;p&gt;在本地自己偷着看有什么意思，发布到github上去吧。&lt;br /&gt;
1.生成静态页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo --theme=hugo-rapid-theme --buildDrafts --baseUrl=&amp;quot;http://youngspring1.github.io&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;这里的url要替换成你自己的。&lt;br /&gt;
&amp;emsp;所有的静态页面都会生成到public目录。&lt;/p&gt;

&lt;p&gt;2.创建Repository&lt;br /&gt;
&amp;emsp;在github上创建一个Repository，名为&amp;rdquo;youngspring1.github.io&amp;rdquo;。&lt;br /&gt;
&amp;emsp;同样，不认识的名字要替换成你自己的。&lt;/p&gt;

&lt;p&gt;3.提交&lt;br /&gt;
&amp;emsp;把public目录下的内容，全部提交到刚刚创建的Repository中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd public
$ git init
$ git remote add origin https://github.com/youngspring1/youngspring1.github.io.git
$ git add -A
$ git commit -m &amp;quot;first commit&amp;quot;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;在浏览器中访问&lt;a href=&#34;http://youngspring1.github.io&#34;&gt;http://youngspring1.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考:c4d0ba6a52d2bffd88ff711ada3d2ff1&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;原文作者&lt;a href=&#34;http://blog.coderzh.com&#34;&gt;coderzh&lt;/a&gt;搭建的中文的hugo站点：&lt;a href=&#34;http://www.gohugo.org/&#34;&gt;http://www.gohugo.org/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:1&#34;&gt;余果：&lt;a href=&#34;http://www.amazon.cn/Web全栈工程师的自我修养-余果/dp/B0141BI0D2/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1457233956&amp;amp;sr=1-1&#34;&gt;《Web全站工程师的自我修养》&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:2&#34;&gt;hugo主页：&lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c4d0ba6a52d2bffd88ff711ada3d2ff1:3&#34;&gt;hexo主页：&lt;a href=&#34;https://www.hexo.io&#34;&gt;https://www.hexo.io&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c4d0ba6a52d2bffd88ff711ada3d2ff1:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>